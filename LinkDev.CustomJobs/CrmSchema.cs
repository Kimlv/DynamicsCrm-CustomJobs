//         Project / File: LinkDev.CustomJobs / CrmSchema.cs
// File generated by: CRM Code Generator - Eric Labashosky, Ahmed el-Sawalhy

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Reflection;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Client;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Query;

[assembly: ProxyTypesAssemblyAttribute()]
namespace LinkDev.CustomJobs
{
	#region XrmServiceContext

	/// <summary>
	/// Represents a source of entities bound to a CRM service. It tracks and manages changes made to the retrieved entities.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode()]
	public partial class XrmServiceContext : OrganizationServiceContext
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public XrmServiceContext(IOrganizationService service) : 
				base(service)
		{
		}

		/// <summary>
		/// Gets a binding to the set of all <see cref="Account"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Account> AccountSet
		{
			get
			{
				return this.CreateQuery<Account>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ActivityParty"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ActivityParty> ActivityPartySet
		{
			get
			{
				return this.CreateQuery<ActivityParty>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Contact"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Contact> ContactSet
		{
			get
			{
				return this.CreateQuery<Contact>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="CustomJob"/> entities.
		/// </summary>
		public System.Linq.IQueryable<CustomJob> CustomJobSet
		{
			get
			{
				return this.CreateQuery<CustomJob>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="CustomJobEngine"/> entities.
		/// </summary>
		public System.Linq.IQueryable<CustomJobEngine> CustomJobEngineSet
		{
			get
			{
				return this.CreateQuery<CustomJobEngine>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="CustomJobFailedTarget"/> entities.
		/// </summary>
		public System.Linq.IQueryable<CustomJobFailedTarget> CustomJobFailedTargetSet
		{
			get
			{
				return this.CreateQuery<CustomJobFailedTarget>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="CustomJobLog"/> entities.
		/// </summary>
		public System.Linq.IQueryable<CustomJobLog> CustomJobLogSet
		{
			get
			{
				return this.CreateQuery<CustomJobLog>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="GenericConfiguration"/> entities.
		/// </summary>
		public System.Linq.IQueryable<GenericConfiguration> GenericConfigurationSet
		{
			get
			{
				return this.CreateQuery<GenericConfiguration>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_customjob_ldv_recurrencerule"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_customjob_ldv_recurrencerule> ldv_ldv_customjob_ldv_recurrenceruleSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_customjob_ldv_recurrencerule>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_recurrencerule_ldv_recurrenceexgrou"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_recurrencerule_ldv_recurrenceexgrou> ldv_ldv_recurrencerule_ldv_recurrenceexgrouSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_recurrencerule_ldv_recurrenceexgrou>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_recurrencerule_ldv_recurrenceruleex"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_recurrencerule_ldv_recurrenceruleex> ldv_ldv_recurrencerule_ldv_recurrenceruleexSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_recurrencerule_ldv_recurrenceruleex>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="ldv_ldv_recurrenceruleexceptiongrouping_ldv"/> entities.
		/// </summary>
		public System.Linq.IQueryable<ldv_ldv_recurrenceruleexceptiongrouping_ldv> ldv_ldv_recurrenceruleexceptiongrouping_ldvSet
		{
			get
			{
				return this.CreateQuery<ldv_ldv_recurrenceruleexceptiongrouping_ldv>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="Log"/> entities.
		/// </summary>
		public System.Linq.IQueryable<Log> LogSet
		{
			get
			{
				return this.CreateQuery<Log>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="RecurrenceRule"/> entities.
		/// </summary>
		public System.Linq.IQueryable<RecurrenceRule> RecurrenceRuleSet
		{
			get
			{
				return this.CreateQuery<RecurrenceRule>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="RecurrenceRuleException"/> entities.
		/// </summary>
		public System.Linq.IQueryable<RecurrenceRuleException> RecurrenceRuleExceptionSet
		{
			get
			{
				return this.CreateQuery<RecurrenceRuleException>();
			}
		}
		/// <summary>
		/// Gets a binding to the set of all <see cref="RecurrenceRuleExceptionGrouping"/> entities.
		/// </summary>
		public System.Linq.IQueryable<RecurrenceRuleExceptionGrouping> RecurrenceRuleExceptionGroupingSet
		{
			get
			{
				return this.CreateQuery<RecurrenceRuleExceptionGrouping>();
			}
		}
	}

	#endregion

	#region Extensions

    public class ValidationError
    {
        public Guid? RecordId;
        public string AttributeName;

        public ValidationType ErrorType;
        public IDictionary<int, string> ErrorMessage;

        public string StringValue;
        public int? StringMaxLength;

        public decimal? NumericValue;
        public decimal? NumericRangeMin;
        public decimal? NumericRangeMax;
    }

	public class ValidationLocalisation
	{
		public ValidationType ErrorType;
		/// <summary>
		/// A dictionary of language code as key and message format as value
		/// </summary>
		public IDictionary<int, string> Localisation;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class CrmGeneratorExtensions
	{
		/// <summary>
		/// Retrieves the label of the 'OptionSetValue' using the corresponding enum member constant
		/// and the language code given.
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.Enums.IndustryCode.Accounting'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The label corresponding to the enum constant and the language code.</returns>
		public static string GetLabel(this Enum enumMember, int languageCode = 1033)
		{
			var enumType = enumMember.GetType();
			var enumParentType = enumType.DeclaringType;

			if (enumParentType == null)
			{
				return "NO_LABEL";
			}

			var enumsType = enumParentType.GetNestedType("Enums");

			if (enumsType == null)
			{
				return "NO_LABEL";
			}

			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumType.Name.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(enumMember + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		/// <summary>
		/// Converts an enum constant to an OptionSetValue object..
		/// </summary>
		/// <param name="enumMember">The early-bound enum member constant; e.g.: 'Account.IndustryCode.Accounting'</param>
		/// <returns>The OptionSetValue object.</returns>
		public static OptionSetValue ToOptionSetValue(this Enum enumMember)
		{
			return new OptionSetValue(int.Parse(enumMember.ToString("d")));
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run. Default is all.</param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorsMessage(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A single message containing all validation errors.</returns>
		public static string GetValidationErrorsMessage(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
				&& validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrorMessages = GetValidationErrorMessages(entityRecord, validationLocalisation);

			if (validationErrorMessages.Any())
			{
				return validationErrorMessages.Aggregate(
					(message1, message2) => message1 + "\r\n-----------------------\r\n" + message2);
			}

			return null;
		}

		private static readonly ValidationLocalisation[] validationLocationsDefaults =
		{
			new ValidationLocalisation
			{
				ErrorType = ValidationType.Required,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, "Value cannot be null."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.InRange,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute value must be between ""{0}"" and ""{1}"", inclusive. Actual value was ""{2}""."}
				               }
			},
			new ValidationLocalisation
			{
				ErrorType = ValidationType.MaxLength,
				Localisation = new Dictionary<int, string>
				               {
					               {1033, @"Attribute length must be less than ""{0}"". Actual attribute value was ""{1}""."}
				               }
			}
		};

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrorMessages(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationLocalisation">
		///     [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///     For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///         e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///     For validation type "MaxLength", the message format takes two params;
		///		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///     Only include ONE localisation language.<br />
		///     Default is a check on all validation types.
		/// </param>
		/// <returns>A list of messages indicating validation errors.</returns>
		public static List<string> GetValidationErrorMessages(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			if (validationLocalisation != null
			    && validationLocalisation.Any(local => local.Localisation.Count > 1))
			{
				throw new ArgumentOutOfRangeException("validationLocalisation",
					"There should only be one validation localisation language for this method.");
			}

			var validationErrors = GetValidationErrors(entityRecord, validationLocalisation);

			if (validationErrors.Any())
			{
				var messages = validationErrors.Select(error => error.ErrorMessage.Values.First()).ToList();
				var id = ((dynamic)entityRecord).Id;
				messages.Insert(0, string.Format("Record of type \"{0}\"" + (id != null ? " and ID \"{1}\"" : "")
													+ " has invalid values.", entityRecord.GetType().Name, id));
				return messages;
			}

			return null;
		}

		/// <summary>
		///     Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///     Validation checks: required, numeric value range, and string length.<br />
		/// </summary>
		/// <param name="validationTypes">An array of validations to run.</param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationType[] validationTypes)
		{
			return GetValidationErrors(entityRecord,
				validationLocationsDefaults.Where(local => validationTypes.Contains(local.ErrorType)).ToArray());
		}

		///  <summary>
		///      Validates that all field values in this record adhere to their contraints specified in CRM.<br />
		///      Validation checks: required, numeric value range, and string length.<br />
		///  </summary>
		///  <param name="validationLocalisation">
		///      [OPTIONAL] An array containing validation types with the message format to use for the validation error.<br />
		///      For validation type "InRange", the message format takes three params for min, max, and actual value respectively;
		///          e.g.: "Value must be between {0} and {1}. Actual value was {2}.".<br />
		///      For validation type "MaxLength", the message format takes two params;
		/// 		    e.g.: "Value length must be less than {0}. Actual value was {1}."<br />
		///      Default is a check on all validation types.
		///  </param>
		/// <returns>A list of validation errors in the form of <see cref="ValidationError"/>.</returns>
		public static List<ValidationError> GetValidationErrors(this Entity entityRecord, ValidationLocalisation[] validationLocalisation = null)
		{
			var id = ((dynamic) entityRecord).Id;
			var fields = entityRecord.GetType().GetProperties();
			var exceptions = new List<ValidationError>();

			validationLocalisation = validationLocalisation ?? validationLocationsDefaults;

			var localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.Required);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields
				                    where Attribute.IsDefined(fieldQ, typeof (RequiredAttribute))
				                          && fieldQ.GetValue(entityRecord) == null
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage =
						                           localisation.Localisation.ToDictionary(local => local.Key, local => local.Value),
					                           ErrorType = ValidationType.Required
				                           });
			}

			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.InRange);

			if (localisation != null)
			{
				foreach (var field in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (InRangeAttribute)) && fieldQ.GetValue(entityRecord) != null))
				{
					var fieldValue = field.GetValue(entityRecord);
					Type type = field.GetCustomAttribute<InRangeAttribute>().Type;

					var method = type.GetMethods().FirstOrDefault(methodQ => methodQ.GetParameters().Length == 1 && methodQ.Name == "Parse");

					var min = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Min});
					var max = (IComparable) method.Invoke(null, new object[] {field.GetCustomAttribute<InRangeAttribute>().Max});

					if (fieldValue != null && (min.CompareTo(fieldValue) == 1 || max.CompareTo(fieldValue) == -1))
					{
						exceptions.Add(new ValidationError
						               {
							               RecordId = id,
							               AttributeName = field.Name,
							               ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
									               local => string.Format(local.Value, min, max, fieldValue)),
							               ErrorType = ValidationType.InRange,
							               NumericValue = decimal.Parse(fieldValue.ToString()),
							               NumericRangeMin = decimal.Parse(min.ToString()),
							               NumericRangeMax = decimal.Parse(max.ToString())
						               });
					}
				}
			}


			localisation = validationLocalisation.FirstOrDefault(local => local.ErrorType == ValidationType.MaxLength);

			if (localisation != null)
			{
				exceptions.AddRange(from fieldQ in fields.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (MaxLengthAttribute)))
				                    let fieldValue = fieldQ.GetValue(entityRecord) as string
				                    let maxLength = fieldQ.GetCustomAttribute<MaxLengthAttribute>().Max
				                    where fieldValue != null && fieldValue.Length > maxLength
				                    select new ValidationError
				                           {
					                           RecordId = id,
					                           AttributeName = fieldQ.Name,
					                           ErrorMessage = localisation.Localisation.ToDictionary(local => local.Key,
							                           local => string.Format(local.Value, maxLength, fieldValue)),
					                           ErrorType = ValidationType.MaxLength,
					                           StringValue = fieldValue,
					                           StringMaxLength = maxLength
				                           });
			}

			return exceptions;
		}

		public static TEntity ConvertTo<TEntity>(this Entity crmRecord) where TEntity : EntityContract
		{
			// create entity object
			var record = Activator.CreateInstance<TEntity>();

			var entityType = typeof(TEntity);
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;


			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("CRM entity '{0}' doesn't map to entity '{1}'.",
					crmRecord.GetType().Name, entityType.Name));
			}

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				SetValueInRecord(record, field, crmRecord, mapping);
			}

			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in typeof(TEntity).GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
						&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				SetRelationInRecord(record, relation, crmRecord, mapping);
			}

			return record;
		}

		private static void SetValueInRecord<TEntity>(TEntity entity, FieldInfo field, Entity crmRecord,
			CrmFieldMappingAttribute mapping)
			where TEntity : EntityContract
		{
			// if key not found, then the CRM record doesn't have that value set
			if (!crmRecord.Attributes.Contains(mapping.LogicalName))
			{
				return;
			}

			var value = crmRecord[mapping.LogicalName];

			// convert types
			if (value is OptionSetValue)
			{
				// can't set enum value with int using reflection!
				field.SetValue(entity, Enum.ToObject(Nullable.GetUnderlyingType(field.FieldType),
					((OptionSetValue)value).Value));

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else if (value is Money)
			{
				field.SetValue(entity, ((Money)value).Value);
			}
			else if (value is EntityReference && field.FieldType != typeof(EntityReference))
			{
				var entityRef = (EntityReference) value;

				field.SetValue(entity, entityRef.Id);

				var nameField = typeof(TEntity).GetFields().FirstOrDefault(fieldQ => fieldQ.Name == field.Name + "Name");

				if (nameField != null && entityRef.Name != null)
				{
					nameField.SetValue(entity, entityRef.Name);
				}

				var labelsProperty = typeof(TEntity).GetProperties().FirstOrDefault(propQ => propQ.Name == field.Name + "Labels");

                if (labelsProperty != null)
                {
                    // get the label value from the CRM record
                    var matchingProperty = crmRecord.GetType().GetProperties().FirstOrDefault(propQ => Attribute.IsDefined(propQ, typeof(LabelAttribute))
                        && propQ.GetCustomAttribute<LabelAttribute>().FieldLogicalName == labelsProperty.GetCustomAttribute<LabelAttribute>().FieldLogicalName);

                    // if it has a value, set it in contract
                    if (matchingProperty != null)
                    {
                        labelsProperty.SetValue(entity, matchingProperty.GetValue(crmRecord));
                    }
                }
			}
			else
			{
				field.SetValue(entity, value);
			}
		}

		private static void SetRelationInRecord<TEntity>(TEntity record, FieldInfo field, Entity crmRecord,
			CrmRelationMappingAttribute mapping)
			where TEntity : EntityContract
		{
			var crmRelations = crmRecord.RelatedEntities
				.Where(relationQ => relationQ.Key.SchemaName == mapping.SchemaName
									&& relationQ.Key.PrimaryEntityRole == mapping.Role);

			// if relation not found in CRM record, exit
			if (!crmRelations.Any())
			{
				return;
			}

			var crmRelatedRecords = crmRelations.First().Value.Entities;

			// if there are not related entities in the CRM relation, exit
			if (!crmRelatedRecords.Any())
			{
				return;
			}

			var fieldType = field.FieldType;

			object convertedValue = null;

			// x-N relation
			if (typeof(Array).IsAssignableFrom(fieldType))
			{
				// get the contract type for the relation
				var elementType = fieldType.GetElementType();

				// create an array for the related entities of the appropriate type
				var relatedRecords = Array.CreateInstance(elementType, crmRelatedRecords.Count);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = MethodBase.GetCurrentMethod().DeclaringType
					.GetMethod("ConvertTo").MakeGenericMethod(elementType);

				// convert all entities to contract entities
				var objectRelatedRecords = (from object relatedRecord in crmRelatedRecords
											select method.Invoke(relatedRecord, new[] { relatedRecord })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectRelatedRecords, relatedRecords, relatedRecords.Length);
				convertedValue = relatedRecords;
			}
			else if (typeof(EntityContract).IsAssignableFrom(fieldType))
			{
				// N-1 relation
				var relatedRecord = crmRelatedRecords.FirstOrDefault();

				if (relatedRecord != null)
				{
					// go over all fields in the contract entity that has the mapping attribute
					foreach (var fieldT in typeof(TEntity).GetFields()
						.Where(fieldQ => fieldQ.Name.Contains(field.Name)
						&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
					{
						// get the value of the mapping attribute
						var mappingT = fieldT.GetCustomAttribute<CrmFieldMappingAttribute>();
						SetValueInRecord(record, fieldT, relatedRecord, mappingT);
					}
					// create the method reference that will be used to convert the related entities to the CRM entities
					var method = MethodBase.GetCurrentMethod().DeclaringType
						.GetMethod("ConvertTo").MakeGenericMethod(fieldType);

					convertedValue = method.Invoke(relatedRecord, new object[] { relatedRecord });
				}
			}

			// set the related entities value in the entity
			field.SetValue(record, convertedValue);
		}

		/// <summary>
		/// Returns an array of logical names whose property is marked for WCF contract.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetDataMemberAttributes(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(DataMemberAttribute)) && Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Returns an array of logical names of the properties.
		/// </summary>
		/// <param name="entity"></param>
		/// <returns>An array of logical names.</returns>
		public static string[] GetAttributeNames(this Entity entity)
		{
			return entity.GetType().GetProperties()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(AttributeLogicalNameAttribute)) && !Attribute.IsDefined(fieldQ, typeof(RelationshipSchemaNameAttribute)))
				.Select(field => field.GetCustomAttribute<AttributeLogicalNameAttribute>().LogicalName).ToArray();
		}

		/// <summary>
		/// Loads the values of data member properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		public static void LoadDataMemberAttributes(this Entity entity, IOrganizationService service)
		{
			LoadAttributeValues(entity, service, entity.GetDataMemberAttributes());
		}

		/// <summary>
		/// Loads the values of all properties from CRM.
		/// </summary>
		/// <param name="entity"></param>
		/// <param name="service">CRM organisation service.</param>
		/// <param name="attributes"></param>
		public static void LoadAttributeValues(this Entity entity, IOrganizationService service, params string[] attributes)
		{
			try
			{
				entity.Id = entity.Id;
			}
			catch
			{
				throw new Exception("Entity is ready only. Set 'MergeOption' to 'NoTracking' in the context used for fetching this entity.");
			}

			var isLoadAll = attributes == null || attributes.Length <= 0;

			if (isLoadAll)
			{
				entity.Attributes.Clear();
			}

			foreach (var attribute in service.Retrieve(entity.LogicalName, entity.Id, new ColumnSet(isLoadAll ? entity.GetAttributeNames() : attributes)).Attributes)
			{
				entity[attribute.Key] = attribute.Value;
			}
		}
	}

	#endregion

	#region Helpers

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntityBase : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		public GeneratedEntityBase()
		{}

		public GeneratedEntityBase(string logicalName) : base(logicalName)
		{}

		[DataMember]
		private List<string> NullValuedAttributes { get; set; }
		protected Microsoft.Xrm.Sdk.AttributeCollection backupAttributeCollection;
		protected FormattedValueCollection backupFormattedCollection;
		protected RelatedEntityCollection backupRelatedEntityCollection;
		internal IList<QueryAction> DeferredQueriesList = new List<QueryAction>();
		protected IDictionary<string, object[]> relationProperties;
		protected virtual IDictionary<string, object[]> RelationProperties { get { return new Dictionary<string, object[]>(); } }

		#region Serialisation events

		[OnSerializing]
		private void SerializingInitializer(StreamingContext ctx)
		{
			backupAttributeCollection = new Microsoft.Xrm.Sdk.AttributeCollection();
			backupAttributeCollection.AddRange(Attributes);
			Attributes.Clear();

			backupFormattedCollection = new FormattedValueCollection();
			backupFormattedCollection.AddRange(FormattedValues);
			FormattedValues.Clear();

			backupRelatedEntityCollection = new RelatedEntityCollection();
			backupRelatedEntityCollection.AddRange(RelatedEntities);
			RelatedEntities.Clear();
		}

		[OnSerialized]
		private void SerializedInitializer(StreamingContext ctx)
		{
			Attributes.Clear();
			Attributes.AddRange(backupAttributeCollection);
			backupAttributeCollection = null;

			FormattedValues.Clear();
			FormattedValues.AddRange(backupFormattedCollection);
			backupFormattedCollection = null;

			RelatedEntities.Clear();
			RelatedEntities.AddRange(backupRelatedEntityCollection);
			backupRelatedEntityCollection = null;
		}

		[OnDeserialized]
		private void DeserializedInitializer(StreamingContext ctx)
		{
			LogicalName = (string)GetType().GetField("EntityLogicalName").GetRawConstantValue();
			Attributes.Where(attribute => attribute.Value == null).ToList().ForEach(attribute => Attributes.Remove(attribute.Key));
			if (NullValuedAttributes != null && NullValuedAttributes.Count > 0)
			{
				NullValuedAttributes.ForEach(attribute =>
				{
					var property = GetType().GetProperty(attribute);
					if (property == null)
					{
						throw new Exception("Couldn't find the property '" + attribute + "' in entity.");
					}
					property.SetValue(this, null);
				});
			}
		}

		#endregion

		public XrmServiceContext ServiceContext { get; set; }

		public event PropertyChangedEventHandler PropertyChanged;
		public event PropertyChangingEventHandler PropertyChanging;

		protected void OnPropertyChanged(string propertyName)
		{
			if (PropertyChanged != null)
			{
				PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}

		protected void OnPropertyChanging(string propertyName)
		{
			if (PropertyChanging != null)
			{
				PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}

		public void LoadLookupLabels(IOrganizationService service, bool isDeferred = false)
		{
			var properties = from propQ in this.GetType().GetProperties()
			                 let propIdQ = this.GetType().GetProperty(propQ.Name.Replace("Labels", ""))
			                 where Attribute.IsDefined(propQ, typeof(LabelAttribute))
			                       && (Guid?) propIdQ.GetValue(this) != null
			                 select new
			                        {
				                        property = propQ,
				                        id = propIdQ.GetValue(this),
				                        attribute = propQ.GetCustomAttribute<LabelAttribute>()
			                        };

			foreach (var property in properties)
			{
				var fields = property.attribute.LabelFieldNames.Split(',');

				var query = new QueryExpression(property.attribute.LogicalName);
				query.Criteria.AddCondition(property.attribute.IdFieldName, ConditionOperator.Equal, property.id);
				query.ColumnSet = new ColumnSet(fields.Select(field => field.Substring(5)).ToArray());

				var queryAction =
					new QueryAction(query)
					{
						Action =
							result =>
							{
								var response = result as RetrieveMultipleResponse;
								if (response == null) return;

								var entityQ = response.EntityCollection.Entities.FirstOrDefault();
								if (entityQ == null) return;

								var englishLabel = (string) entityQ.Attributes.FirstOrDefault(
									attribute => ("1033_" + attribute.Key) == fields.FirstOrDefault(field => field.Contains("1033_"))).Value;
								var dictionary = new Dictionary<int, string>();
								dictionary[1033] = englishLabel;
								property.property.SetValue(this, dictionary);
							}
					};

				if (isDeferred)
				{
					this.DeferredQueriesList.Add(queryAction);
				}
				else
				{
					queryAction.Action.Invoke(service.Execute(new RetrieveMultipleRequest{Query = query}));
				}
			}
		}

		#region Relationship methods

		protected override IEnumerable<TEntity> GetRelatedEntities<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
		    var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && enumerable == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			enumerable = base.GetRelatedEntities<TEntity>(relationshipSchemaName, primaryEntityRole);
			
			if (enumerable == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					enumerable = backupRelatedEntityCollection[key].Entities.Cast<TEntity>();
			}

			return enumerable;
		}

		protected override TEntity GetRelatedEntity<TEntity>(string relationshipSchemaName, EntityRole? primaryEntityRole)
		{
			var key = new Relationship(relationshipSchemaName) { PrimaryEntityRole = primaryEntityRole };

			var result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (ServiceContext != null && result == null)
			{
				if (!ServiceContext.IsAttached(this))
				{
					throw new Exception("The context that loaded this entity must be used to load relationships, " +
										"or set 'MergeOption' to anything other than 'NoTracking' in the context before fetching this entity using LINQ.");
				}

				ServiceContext.LoadProperty(this, key);
			}

			result = base.GetRelatedEntity<TEntity>(relationshipSchemaName, primaryEntityRole);

			if (result == null)
			{
				if (backupRelatedEntityCollection != null && backupRelatedEntityCollection.Contains(key))
					result = (TEntity)backupRelatedEntityCollection[key].Entities.FirstOrDefault();
			}
			
			return result;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class GeneratedEntity<TRelationName> : GeneratedEntityBase where TRelationName : RelationNameBase
	{
		public GeneratedEntity()
		{}

		public GeneratedEntity(string logicalName) : base(logicalName)
		{}

		#region Relationship methods

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, params string[] attributes)
		{
			return LoadRelation(relationName, service, false, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. 
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, -1, -1, null, filter, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, -1, null, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, null, attributes);
		}

		/// <summary>
		/// Fetch the next page of records related to this entity on this relationship using the previous paging info object returned.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, pagingInfo.RecordCountLimit, pagingInfo.NextPage, pagingInfo.Cookie, pagingInfo.Filter, pagingInfo, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, params string[] attributes)
		{
			return LoadRelation(relationName, service, isDeferred, recordCountLimit, page, cookie, filter, null, attributes);
		}

		/// <summary>
		/// Fetch the records related to this entity on this relationship. The record limit accepts '-1', which means 'unlimited'.
		/// The page param accepts '-1', which means 'all pages'. If a page is specified, the record limit won't exceed '5000' internally.
        /// To specify columns to fetch, the "attributes" param accepts either "*", which means all attributes; empty, which means no attributes;
        /// or a list of column names to fetch. If 'deferred', then loading will be added to the queue to be executed later upon request.
		/// </summary>
		public RelationPagingInfo LoadRelation(TRelationName relationName, IOrganizationService service, bool isDeferred, int recordCountLimit, int page, string cookie, FilterExpression filter, RelationPagingInfo pagingInfo, params string[] attributes)
		{
			if (RelatedEntities.IsReadOnly) {
				throw new Exception("Relationship collection is ready only. The context that loaded this entity from CRM must be passed as a parameter, " +
									"or set 'MergeOption' to 'NoTracking' in the context before fetching this entity using LINQ.");
			}
			if (!RelationProperties.ContainsKey(relationName.Name)) {
				throw new Exception("Relation does not exist in entity, or is not generated.");
			}
			var relationPagingInfo = pagingInfo ?? new RelationPagingInfo
				{
					RecordCountLimit = recordCountLimit,
					Filter = filter,
					Cookie = cookie,
					NextPage = page
				};
			var relationParams = RelationProperties[relationName.Name];
			var queryActionObject = new QueryAction(GeneratorHelpers.GetLoadRelationQuery(this, service, (string) relationParams[1], (string) relationParams[2], (string) relationParams[3], (string) relationParams[4], (string) relationParams[5], (string) relationParams[6],
					recordCountLimit, page, cookie, filter, attributes));
			var queryAction = queryActionObject.Action =
							  resultQ => {
								  var response = resultQ as RetrieveMultipleResponse;
								  var entityType = ((Type) relationParams[8]).GetElementType() ?? (Type) relationParams[8];
					              var resultArray = response == null ? ((List<Entity>) resultQ).Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray()
	    				              : response.EntityCollection.Entities.Select(entityQ => entityQ.GetType().GetMethod("ToEntity").MakeGenericMethod(entityType).Invoke(entityQ, null)).ToArray();
					              var relatedRecords = Array.CreateInstance(entityType, resultArray.Length);
					              Array.Copy(resultArray, relatedRecords, resultArray.Length);
								  DeferredQueriesList.Remove(queryActionObject);
								  var newValue = relatedRecords.Length <= 0 ? null : (((Type) relationParams[8]).GetElementType() == null ? relatedRecords.GetValue(0) : relatedRecords);
								  GetType().GetProperty((string) relationParams[0]).SetValue(this, newValue);
							  };
			if (isDeferred) DeferredQueriesList.Add(queryActionObject);
			else queryAction.Invoke(GeneratorHelpers.LoadRelation(service, queryActionObject.Query, recordCountLimit, page, cookie, relationPagingInfo));
			return relationPagingInfo;
		}

		#endregion
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class RelationPagingInfo
	{
		public string Cookie;
		public int NextPage = 1;
		public int RecordCountLimit = -1;
		public FilterExpression Filter;
		public bool IsMoreRecords = true;
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public abstract class RelationNameBase
	{
		public string Name;

		public RelationNameBase(string name)
		{
			Name = name;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	internal class QueryAction
	{
		public QueryExpression Query { get; set; }
		public Action<object> Action { get; set; }

		public QueryAction(QueryExpression query, Action<object> action = null)
		{
			Query = query;
			Action = action;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Class)]
	public class CrmEntityMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string SchemaName { get; private set; }
		public string DisplayName { get; private set; }

		public CrmEntityMappingAttribute(string logicalName, string schemaName, string displayName = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			LogicalName = logicalName;
			SchemaName = schemaName;
			DisplayName = displayName;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class ReadOnlyFieldAttribute : Attribute
	{}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmFieldMappingAttribute : Attribute
	{
		public string LogicalName { get; private set; }
		public string RelatedEntity { get; private set; }

		public CrmFieldMappingAttribute(string logicalName, string relatedEntity = null)
		{
			if (string.IsNullOrWhiteSpace(logicalName))
			{
				throw new ArgumentNullException("logicalName");
			}

			LogicalName = logicalName;
			RelatedEntity = relatedEntity;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field)]
	public class CrmRelationMappingAttribute : Attribute
	{
		public string SchemaName { get; private set; }
		public Type RelatedEntityType { get; private set; }
		public EntityRole? Role { get; private set; }

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
		}

		public CrmRelationMappingAttribute(string schemaName, Type relatedEntityType, EntityRole role)
		{
			if (string.IsNullOrWhiteSpace(schemaName))
			{
				throw new ArgumentNullException("schemaName");
			}

			if (relatedEntityType == null)
			{
				throw new ArgumentNullException("relatedEntityType");
			}

			SchemaName = schemaName;
			RelatedEntityType = relatedEntityType;
			Role = role;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class InRangeAttribute : Attribute
	{
		public string Min { get; set; }
		public string Max { get; set; }
		public Type Type { get; set; }

		public InRangeAttribute(string min, string max, Type type)
		{
			Min = min;
			Max = max;
			Type = type;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class MaxLengthAttribute : Attribute
	{
		public int Max { get; set; }

		public MaxLengthAttribute(int max)
		{
			Max = max;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Field | AttributeTargets.Property)]
	public class RequiredAttribute : Attribute
	{
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[AttributeUsage(AttributeTargets.Property)]
	public class LabelAttribute : Attribute
	{
		public string LabelFieldNames { get; set; }
		public string LogicalName { get; set; }
		public string IdFieldName { get; set; }
		public string FieldLogicalName { get; set; }

		public LabelAttribute(string labelFieldNames, string logicalName, string idFieldName, string fieldLogicalName)
		{
			LabelFieldNames = labelFieldNames;
			LogicalName = logicalName;
			IdFieldName = idFieldName;
			FieldLogicalName = fieldLogicalName;
		}
	}

	public enum ValidationType
	{
		Required,
		InRange,
		MaxLength
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public class OptionsetLanguageLabel
	{
		public int LanguageCode { get; set; }
		public string OptionsetLabel {get; set;}
	}

	public enum ClearMode
	{
		[EnumMember] Disabled,
		[EnumMember] Empty,
		[EnumMember] Convention,
		[EnumMember] Flag
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract]
	public partial class EntityContract
	{
		[DataMember] public virtual ClearMode? ValueClearMode { get { return ClearMode.Disabled; } set{} }

		public TCrmEntity ConvertTo<TCrmEntity>(ClearMode? clearMode = null) where TCrmEntity : Entity
		{
			// create CRM entity object
			var crmRecord = Activator.CreateInstance<TCrmEntity>();

			var entityType = GetType();
			var entityLogicalName = entityType.GetCustomAttribute<CrmEntityMappingAttribute>().LogicalName;

			// if logical names don't match
			if (entityLogicalName != crmRecord.LogicalName)
			{
				throw new Exception(string.Format("Entity '{0}' doesn't map to CRM entity '{1}'.",
					entityType.Name, typeof(TCrmEntity).Name));
			}
            
            clearMode = clearMode ?? (ClearMode?) entityType.GetProperty("ValueClearMode").GetValue(this) ?? ClearMode.Disabled;

			// go over all fields in the contract entity that has the mapping attribute
			foreach (var field in entityType.GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))
								 && !Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = field.GetCustomAttribute<CrmFieldMappingAttribute>();
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>() != null;
                // get the clear flag mode value if it exists
                var isClearFlag = value == null && clearMode == ClearMode.Flag
                    && (bool?)entityType.GetFields().Where(fieldQ => fieldQ.Name == "Clear_" + field.Name)
                    .Select(fieldQ => fieldQ.GetValue(this)).FirstOrDefault() == true;
                // check 'empty' mode
                var isClearEmpty = value == null && clearMode == ClearMode.Empty;

                var isSetValue = (value != null && !isReadOnly) || isClearFlag || isClearEmpty;

                // skip if no value and clear mode does not match and pass check
                if (isReadOnly || !isSetValue)
				{
					continue;
				}

				SetValueInCrmRecord(value, crmRecord, field.Name, mapping, clearMode);
			}

			// go over flattened relations in the contract entity that has the mapping attribute
			foreach (var field in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the field
				var value = field.GetValue(this);
				// is the field value read only
				var isReadOnly = field.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || (value == null && clearMode != ClearMode.Empty) || value is Array)
				{
					continue;
				}

				SetRelationInRecord(value, field);
			}
			// go over all relations in the contract entity that has the mapping attribute
			foreach (var relation in GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof(CrmRelationMappingAttribute))
					&& !Attribute.IsDefined(fieldQ, typeof(CrmFieldMappingAttribute))))
			{
				// get the value of the mapping attribute
				var mapping = relation.GetCustomAttribute<CrmRelationMappingAttribute>();
				// get the value of the field
				var value = relation.GetValue(this);
				// is the relation read only
				var isReadOnly = relation.GetCustomAttribute<ReadOnlyFieldAttribute>();

				// skip if no value
				if (isReadOnly != null || value == null || (value is Array && ((Array)value).Length <= 0))
				{
					continue;
				}

				SetRelationInCrmRecord(value, crmRecord, mapping, clearMode);
			}

			return crmRecord;
		}

		private void SetRelationInRecord(object value, FieldInfo fieldInfo)
		{
			var fields = GetType().GetFields()
				.Where(fieldQ => Attribute.IsDefined(fieldQ, typeof (CrmRelationMappingAttribute))
				                 && !Attribute.IsDefined(fieldQ, typeof (CrmFieldMappingAttribute)));
			// get the field representing the relationship
			var relation = fields.First(fieldQ => fieldQ.Name == fieldInfo.Name.Split('_')[0]);
			// get the related entity type
			var fieldType = relation.FieldType;
			// get the target field in the related entity to set the value
			var field = fieldType.GetFields().First(fieldQ => fieldQ.Name == fieldInfo.Name.Substring(relation.Name.Length + 1));

			// get the relation value
			var record = relation.GetValue(this);

			if (record == null)
			{
				// create a new instance of the related entity if it's null
				record = Activator.CreateInstance(fieldType);
				// save the relation object in this entity
				relation.SetValue(this, record);
			}

			// set the field value in the related record
			field.SetValue(record, value);
		}

		private static void SetValueInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			string fieldName, CrmFieldMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmProperty = GetCrmProperty<TCrmEntity>(mapping);

			// if property not found, then the entities don't map correctly
			if (crmProperty == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}
            
			// if no value, and clear mode is global, then clear
			if (value == null && clearMode == ClearMode.Empty)
			{
				crmRecord[mapping.LogicalName] = null;
			}
            
			// convert types
			if (value is Enum)
			{
			    // if clear mode is convention, and value fits convention, then clear
				crmRecord[mapping.LogicalName] = (((int) value) == -1 && clearMode == ClearMode.Convention) ? null : new OptionSetValue((int) value);
			}
			else if (value is decimal? && crmProperty.PropertyType == typeof(Money))
			{
				crmRecord[mapping.LogicalName] = (value.Equals(decimal.MinValue) && clearMode == ClearMode.Convention) ? null : new Money(((decimal?) value).Value);
			}
			else if (value is Guid? && fieldName != "Id"
					 && crmProperty.PropertyType != typeof(EntityReference))
			{
				crmProperty.SetValue(crmRecord, (value.Equals(Guid.Empty) && clearMode == ClearMode.Convention) ? null : (Guid?) value);
			}
			else
			{
			    // if clear mode is convention, and value fits convention, then clear
			    if (clearMode == ClearMode.Convention
                    && ((value is DateTime? && value.Equals(new DateTime(1970, 1, 1)))
                        || (value is int? && value.Equals(int.MinValue))
                        || (value is long? && value.Equals(long.MinValue))
                        || (value is decimal? && value.Equals(decimal.MinValue))
                        || (value is double? && value.Equals(double.MinValue))
                        || (value is string && value.Equals(""))))
			    {
				    crmProperty.SetValue(crmRecord, null);
			    }
                else
				{
                    crmProperty.SetValue(crmRecord, value);
                }
			}
		}

		/// <summary>
		///     Gets the property from the CRM entity that corresponds to this field -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmProperty<TCrmEntity>(CrmFieldMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmProperty = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var fieldAttribute = propertyQ
										.GetCustomAttributes<AttributeLogicalNameAttribute>(true)
										.FirstOrDefault();

									return fieldAttribute != null
										   && fieldAttribute.LogicalName == mapping.LogicalName;
								});

			return crmProperty;
		}

		private static void SetRelationInCrmRecord<TCrmEntity>(object value, TCrmEntity crmRecord,
			CrmRelationMappingAttribute mapping, ClearMode? clearMode = null)
			where TCrmEntity : Entity
		{
			var crmRelation = GetCrmRelation<TCrmEntity>(mapping);

			// if relation not found, then the entities don't map correctly
			if (crmRelation == null)
			{
				throw new Exception(string.Format("Entity doesn't map to CRM entity '{0}'.",
					typeof(TCrmEntity).Name));
			}

			object convertedValue = null;

			// x-N relation
			if (value is Array)
			{
				var relatedRecords = (Array)value;
				// create an array for the related entities of the appropriate type
				var crmRelatedRecords = Array.CreateInstance(mapping.RelatedEntityType, relatedRecords.Length);

				// create the method reference that will be used to convert the related entities to the CRM entities
				var method = GetConversionMethod(relatedRecords.GetValue(0), mapping.RelatedEntityType);

				// convert all entities to CRM entities
				var objectCrmRelatedRecords = (from object relatedRecord in relatedRecords
											   select method.Invoke(relatedRecord, new object[] { clearMode })).ToArray();

				// copy the object entities to the array of the specific type
				Array.Copy(objectCrmRelatedRecords, crmRelatedRecords, crmRelatedRecords.Length);
				convertedValue = crmRelatedRecords;
			}
			else if (value is EntityContract)
			{
				// N-1 relation
				var method = GetConversionMethod(value, mapping.RelatedEntityType);
				convertedValue = method.Invoke(value, new object[] { clearMode });
			}

			// set the related entities value in the CRM entity
			crmRelation.SetValue(crmRecord, convertedValue);
		}

		private static MethodInfo GetConversionMethod(object entity, Type relatedType)
		{
			return entity.GetType().GetMethod("ConvertTo")
				.MakeGenericMethod(relatedType);
		}

		/// <summary>
		///     Gets the relation from the CRM entity that corresponds to this relation -- same mapping
		/// </summary>
		/// <typeparam name="TCrmEntity">The type of the entity.</typeparam>
		/// <param name="mapping">The mapping.</param>
		/// <returns></returns>
		private static PropertyInfo GetCrmRelation<TCrmEntity>(CrmRelationMappingAttribute mapping)
			where TCrmEntity : Entity
		{
			var crmRelation = typeof(TCrmEntity).GetProperties()
				.FirstOrDefault(propertyQ =>
								{
									var relationAttribute = propertyQ
										.GetCustomAttributes<RelationshipSchemaNameAttribute>(true)
										.FirstOrDefault();

									return relationAttribute != null
										   && relationAttribute.SchemaName == mapping.SchemaName
										   && relationAttribute.PrimaryEntityRole == mapping.Role;
								});

			return crmRelation;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static partial class GeneratorHelpers
	{
		#region Enums

		/// <summary>
		/// Get the value that corresponds to the label from the option-set,
		/// using the type of the class enclosing both, label type, and the language code given.
		/// </summary>
		/// <param name="labelType">The type of the class containing the labels; e.g.: 'typeof(Account.Enums.Labels.IndustryCode)'</param>
		/// <param name="label">The label to search for, corresponding to the value</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(Type labelType, string label, int languageCode = 1033)
		{
			var labelsType = labelType.DeclaringType;

			if (labelsType == null)
			{
				return -1;
			}

			var enumsType = labelsType.DeclaringType;

			if (enumsType == null)
			{
				return -1;
			}

			// get the fields with the same label from the label class
			var fields = labelType.GetFields()
				.Where(fieldQ => fieldQ.Name.Contains(languageCode.ToString())
					&& (string)fieldQ.GetValue(labelType) == label);

			if (!fields.Any())
			{
				return -1;
			}

			var field = fields.First();

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				return -1;
			}

			var enumType = entityType.GetNestedType(labelType.Name + "Enum");

			if (enumType == null)
			{
				return -1;
			}

			// get the enum constant corresponding to the field name
			var enumConstant = Enum.Parse(enumType, field.Name.Replace("_" + languageCode, ""));

			return (int)enumConstant;
		}

		/// <summary>
		/// Gets the value corresponding to the option-set's label using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="label">The label from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns>The value corresponding to the label</returns>
		public static int GetValue(string logicalName, string label, Type enumsType, int languageCode = 1033)
		{
			var labelType = GetLabelType(enumsType, logicalName);

			return GetValue(labelType, label, languageCode);
		}

		private static Type GetEnumType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);

			var entityType = enumsType.DeclaringType;

			if (entityType == null)
			{
				throw new Exception("Can't find the entity type from the enum type.");
			}

			return field == null ? null : entityType.GetNestedType(field.Name + "Enum");
		}

		#endregion

		#region Labels

		/// <summary>
		/// Gets the label corresponding to the option-set's value using its logical name,
		/// the value within, and the language code.
		/// </summary>
		/// <param name="logicalName">The logical name of the option-set in CRM</param>
		/// <param name="constant">The value from the option-set</param>
		/// <param name="enumsType">The 'Enums' type; e.g.: 'typeof(Account.Enums)'</param>
		/// <param name="languageCode">The language code from CRM</param>
		/// <returns></returns>
		public static string GetLabel(string logicalName, int constant, Type enumsType, int languageCode = 1033)
		{
			var enumType = GetEnumType(enumsType, logicalName);

			if (enumType == null)
			{
				return "NO_LABEL";
			}

			var enumName = enumType.Name;
			var constantName = enumType.GetEnumName(constant);
			var labelsType = enumsType.GetNestedType("Labels");

			if (labelsType == null)
			{
				return "NO_LABEL";
			}

			var labelType = labelsType.GetNestedType(enumName.Substring(0, enumType.Name.LastIndexOf("Enum")));

			if (labelType == null)
			{
				return "NO_LABEL";
			}

			var field = labelType.GetField(constantName + "_" + languageCode);

			return field == null ? "NO_LABEL" : field.GetValue(labelType).ToString();
		}

		private static Type GetLabelType(Type enumsType, string logicalName)
		{
			var field = GetLogicalNameField(enumsType, logicalName);
			return enumsType.GetNestedType("Labels").GetNestedType(field.Name);
		}

		#endregion

		private static FieldInfo GetLogicalNameField(Type enumsType, string logicalName)
		{
			var namesType = enumsType.GetNestedType("Names");
			return namesType.GetFields().FirstOrDefault(fieldQ => (string)fieldQ.GetValue(namesType) == logicalName);
		}

		internal static QueryExpression GetLoadRelationQuery(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1, string cookie = null,
			FilterExpression filter = null, params string[] attributes)
		{
			limit = limit <= 0 ? int.MaxValue : limit;

			// create the query taking into account paging
			var query = new QueryExpression(fromEntityName);
			query.LinkEntities.Add(new LinkEntity(fromEntityName, toEntityName, fromFieldName, toFieldName, JoinOperator.Inner));
			query.LinkEntities[0].EntityAlias = "linkedEntityAlias";
			query.Criteria.AddCondition("linkedEntityAlias", intersectIdFieldName, ConditionOperator.Equal, entity[idFieldName]);

			if (filter != null)
			{
				query.Criteria.AddFilter(filter);
			}

			if (attributes.Length == 1 && attributes[0] == "*")
			{
				query.ColumnSet = new ColumnSet(true);
			}
			else if (attributes.Length > 0)
			{
				query.ColumnSet = new ColumnSet(attributes);
			}
			else
			{
				query.ColumnSet = new ColumnSet(false);
			}

			query.PageInfo = new PagingInfo
			{
				PageNumber = page <= 0 ? 1 : page,
				Count = limit,
				PagingCookie = cookie
			};

			return query;
		}

		internal static List<Entity> LoadRelation(Entity entity, IOrganizationService service,
			string fromEntityName, string toEntityName, string fromFieldName, string toFieldName,
			string idFieldName, string intersectIdFieldName, int limit = -1, int page = -1,
			FilterExpression filter = null, string cookie = null, RelationPagingInfo relationPagingInfo = null, params string[] attributes)
		{
			return LoadRelation(service, GetLoadRelationQuery(entity, service, fromEntityName, toEntityName,
				fromFieldName, toFieldName, idFieldName, intersectIdFieldName, limit, page, cookie,
				filter, attributes), limit, page, cookie, relationPagingInfo);
		}

		public static List<Entity> LoadRelation(IOrganizationService service, QueryExpression query,
			int limit = -1, int page = -1, string cookie = null, RelationPagingInfo relationPagingInfo = null)
		{
			limit = limit <= 0 ? int.MaxValue : limit;
			query.PageInfo = query.PageInfo ??
				new PagingInfo
				{
					PageNumber = page <= 0 ? 1 : page,
					Count = limit
				};
			query.PageInfo.PagingCookie = cookie ?? relationPagingInfo.Cookie ?? query.PageInfo.PagingCookie;

			EntityCollection records;
			var entities = new List<Entity>();

			// get all records
			do
			{
				// fetch the records
				records = service.RetrieveMultiple(query);

				// next time get the next bundle of records
				query.PageInfo.PagingCookie = records.PagingCookie;
				query.PageInfo.PageNumber++;

				// add to existing list
				entities.AddRange(records.Entities);
			} while (records.MoreRecords && entities.Count < limit && page <= 0);

			if (relationPagingInfo != null)
			{
				relationPagingInfo.Cookie = query.PageInfo.PagingCookie;
				relationPagingInfo.NextPage = query.PageInfo.PageNumber;
				relationPagingInfo.IsMoreRecords = records.MoreRecords;
			}

			return entities.ToList();
		}

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		public static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			params GeneratedEntityBase[] entities)
		{
            return ProcessDeferredQueries(service, 100, entities);
        }

		/// <summary>
		/// Executes the queries in the query queue in each entity passed, and executes the action related to the query after.<br />
		/// Returns a list of errors per entity processed.
		/// </summary>
		/// <param name="service">CRM service to use to execute query.</param>
		/// <param name="bulkSize">The number of requests from the queue to execute in each iteration.</param>
		/// <param name="entities">List of entities containing the queues.</param>
		internal static IDictionary<GeneratedEntityBase, IList<string>> ProcessDeferredQueries(IOrganizationService service,
			int bulkSize, params GeneratedEntityBase[] entities)
		{
			var errorList = new Dictionary<GeneratedEntityBase, IList<string>>();

			// exit if no entities to process
			if (!entities.Any()) return errorList;
            
            bulkSize = Math.Min(1000, bulkSize);

			// filter entities to only the ones with a queue
			entities = entities.Where(entity => entity.DeferredQueriesList.Any()).ToArray();

			// queue to assign errors to proper entity and to find the original query and invoke the action
			var queryActionQueue = new Queue<KeyValuePair<GeneratedEntityBase, QueryAction>>();

			// create a queue to support paging in bulk execution
			var requestsQueue = new Queue<OrganizationRequest>();

			// go over the entities and fill the queues
			foreach (var entity in entities)
			{
				foreach (var queryAction in entity.DeferredQueriesList)
				{
					queryActionQueue.Enqueue(new KeyValuePair<GeneratedEntityBase, QueryAction>(entity, queryAction));
					requestsQueue.Enqueue(new RetrieveMultipleRequest {Query = queryAction.Query});
				}
			}

			var bulkQuery = new ExecuteMultipleRequest
			{
				Settings = new ExecuteMultipleSettings
				{
					ContinueOnError = true,
					ReturnResponses = true
				},
				Requests = new OrganizationRequestCollection()
			};

			while (requestsQueue.Any())
			{
				bulkQuery.Requests.Clear();

				// page execution
				do
				{
					bulkQuery.Requests.Add(requestsQueue.Dequeue());
				} while (bulkQuery.Requests.Count % bulkSize != 0 && requestsQueue.Any());

				var result = (ExecuteMultipleResponse) service.Execute(bulkQuery);

				foreach (var response in result.Responses)
				{
					var queryAction = queryActionQueue.Dequeue();
					var entity = queryAction.Key;

					// parse fault
					if (response.Fault != null)
					{
						if (!errorList.ContainsKey(entity))
						{
							errorList.Add(entity, new List<string>());
						}

						errorList[entity].Add(string.Format("Error code: {0}.\nError message: {1}.",
							response.Fault.ErrorCode, response.Fault.Message)
													 + (!string.IsNullOrEmpty(response.Fault.TraceText)
															? "\nError trace: " + response.Fault.TraceText
															: ""));

						continue;
					}

					queryAction.Value.Action.Invoke(response.Response);
				}
			}

			return errorList;
		}
	}

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
    public class EntityComparer : IEqualityComparer<Entity>
    {
        public bool Equals(Entity x, Entity y)
        {
            return x.Id == y.Id;
        }

        public int GetHashCode(Entity obj)
        {
            return obj.Id.GetHashCode();
        }
    }

	#endregion

	#region Global Actions

	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	public static class GlobalActions
	{
			public class ldv_CustomJobCreateCustomJob
			{
				public IOrganizationService Service;
				public OrganizationRequest Request;
				public OrganizationResponse Response;
				public Inputs InputParams;
				public Outputs OutputFields;
				
				public ldv_CustomJobCreateCustomJob()
				{
					Request = new OrganizationRequest("ldv_CustomJobCreateCustomJob");
					InputParams = new Inputs(Request);
				}
				
				public ldv_CustomJobCreateCustomJob(IOrganizationService service) : this()
				{
					Service = service;
				}
				

				public Outputs Execute(IOrganizationService service = null)
				{
					if (service != null)
					{
						Service = service;
					}

					Response = Service.Execute(Request);

					return OutputFields = new Outputs(Response);
				}
				
				public class Inputs
				{
					public OrganizationRequest Request;

					public Inputs(OrganizationRequest request)
					{
						Request = request;
					}

					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.DateTime TargetDate
					{
						set
						{
							Request["TargetDate"] = value;
						}
						get
						{
							return (System.DateTime) Request["TargetDate"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String Name
					{
						set
						{
							Request["Name"] = value;
						}
						get
						{
							return (System.String) Request["Name"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String ActionName
					{
						set
						{
							Request["ActionName"] = value;
						}
						get
						{
							return (System.String) Request["ActionName"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String InputParams
					{
						set
						{
							Request["InputParams"] = value;
						}
						get
						{
							return (System.String) Request["InputParams"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public Microsoft.Xrm.Sdk.EntityReference Workflow
					{
						set
						{
							Request["Workflow"] = value;
						}
						get
						{
							return (Microsoft.Xrm.Sdk.EntityReference) Request["Workflow"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public Microsoft.Xrm.Sdk.EntityReference ContextUser
					{
						set
						{
							Request["ContextUser"] = value;
						}
						get
						{
							return (Microsoft.Xrm.Sdk.EntityReference) Request["ContextUser"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.Int32 Timer
					{
						set
						{
							Request["Timer"] = value;
						}
						get
						{
							return (System.Int32) Request["Timer"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.DateTime TimerBase
					{
						set
						{
							Request["TimerBase"] = value;
						}
						get
						{
							return (System.DateTime) Request["TimerBase"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.Boolean UseWorkingHours
					{
						set
						{
							Request["UseWorkingHours"] = value;
						}
						get
						{
							return (System.Boolean) Request["UseWorkingHours"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String TargetLogicalName
					{
						set
						{
							Request["TargetLogicalName"] = value;
						}
						get
						{
							return (System.String) Request["TargetLogicalName"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String TargetId
					{
						set
						{
							Request["TargetId"] = value;
						}
						get
						{
							return (System.String) Request["TargetId"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String TargetXml
					{
						set
						{
							Request["TargetXml"] = value;
						}
						get
						{
							return (System.String) Request["TargetXml"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.Int32 RecordsPerPage
					{
						set
						{
							Request["RecordsPerPage"] = value;
						}
						get
						{
							return (System.Int32) Request["RecordsPerPage"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String RecurrenceIdsCsv
					{
						set
						{
							Request["RecurrenceIdsCsv"] = value;
						}
						get
						{
							return (System.String) Request["RecurrenceIdsCsv"];
						}
					}
				}
				
				public class Outputs
				{
					public OrganizationResponse Response;

					public Outputs(OrganizationResponse response)
					{
						Response = response;
					}

					public Microsoft.Xrm.Sdk.EntityReference NewJob
					{
							private set {}
							get
						{
							return (Microsoft.Xrm.Sdk.EntityReference) Response["NewJob"];
						}
					}
				}
			}
			public class ldv_NotifyCentreGetMessages
			{
				public IOrganizationService Service;
				public OrganizationRequest Request;
				public OrganizationResponse Response;
				public Inputs InputParams;
				public Outputs OutputFields;
				
				public ldv_NotifyCentreGetMessages()
				{
					Request = new OrganizationRequest("ldv_NotifyCentreGetMessages");
					InputParams = new Inputs(Request);
				}
				
				public ldv_NotifyCentreGetMessages(IOrganizationService service) : this()
				{
					Service = service;
				}
				

				public Outputs Execute(IOrganizationService service = null)
				{
					if (service != null)
					{
						Service = service;
					}

					Response = Service.Execute(Request);

					return OutputFields = new Outputs(Response);
				}
				
				public class Inputs
				{
					public OrganizationRequest Request;

					public Inputs(OrganizationRequest request)
					{
						Request = request;
					}

					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public Microsoft.Xrm.Sdk.EntityReference User
					{
						set
						{
							Request["User"] = value;
						}
						get
						{
							return (Microsoft.Xrm.Sdk.EntityReference) Request["User"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String MessageId
					{
						set
						{
							Request["MessageId"] = value;
						}
						get
						{
							return (System.String) Request["MessageId"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.Int32 Count
					{
						set
						{
							Request["Count"] = value;
						}
						get
						{
							return (System.Int32) Request["Count"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.Int32 Page
					{
						set
						{
							Request["Page"] = value;
						}
						get
						{
							return (System.Int32) Request["Page"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String LatestMenuOpenDate
					{
						set
						{
							Request["LatestMenuOpenDate"] = value;
						}
						get
						{
							return (System.String) Request["LatestMenuOpenDate"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.Boolean IsLoadRead
					{
						set
						{
							Request["IsLoadRead"] = value;
						}
						get
						{
							return (System.Boolean) Request["IsLoadRead"];
						}
					}
					/// <summary>
					///		OPTIONAL!
					/// </summary>
					public System.String Cookie
					{
						set
						{
							Request["Cookie"] = value;
						}
						get
						{
							return (System.String) Request["Cookie"];
						}
					}
				}
				
				public class Outputs
				{
					public OrganizationResponse Response;

					public Outputs(OrganizationResponse response)
					{
						Response = response;
					}

					public System.String Messages
					{
							private set {}
							get
						{
							return (System.String) Response["Messages"];
						}
					}
					public System.String NewCookie
					{
							private set {}
							get
						{
							return (System.String) Response["NewCookie"];
						}
					}
					public System.Boolean IsUnreadEnd
					{
							private set {}
							get
						{
							return (System.Boolean) Response["IsUnreadEnd"];
						}
					}
					public System.Boolean IsReadEnd
					{
							private set {}
							get
						{
							return (System.Boolean) Response["IsReadEnd"];
						}
					}
				}
			}
			public class ldv_NotifyCentreSetMessageRead
			{
				public IOrganizationService Service;
				public OrganizationRequest Request;
				public OrganizationResponse Response;
				public Inputs InputParams;
				public Outputs OutputFields;
				
				public ldv_NotifyCentreSetMessageRead()
				{
					Request = new OrganizationRequest("ldv_NotifyCentreSetMessageRead");
					InputParams = new Inputs(Request);
				}
				
				public ldv_NotifyCentreSetMessageRead(IOrganizationService service) : this()
				{
					Service = service;
				}
				
				public ldv_NotifyCentreSetMessageRead(
					System.String MessageId
					, Microsoft.Xrm.Sdk.EntityReference User
					, IOrganizationService service = null) : this()
				{
					Service = service;
					InputParams.MessageId = MessageId;
					InputParams.User = User;
				}

				public Outputs Execute(IOrganizationService service = null)
				{
					if (service != null)
					{
						Service = service;
					}

					Response = Service.Execute(Request);

					return OutputFields = new Outputs(Response);
				}
				
				public class Inputs
				{
					public OrganizationRequest Request;

					public Inputs(OrganizationRequest request)
					{
						Request = request;
					}

					public System.String MessageId
					{
						set
						{
							Request["MessageId"] = value;
						}
						get
						{
							return (System.String) Request["MessageId"];
						}
					}
					public Microsoft.Xrm.Sdk.EntityReference User
					{
						set
						{
							Request["User"] = value;
						}
						get
						{
							return (Microsoft.Xrm.Sdk.EntityReference) Request["User"];
						}
					}
				}
				
				public class Outputs
				{
					public OrganizationResponse Response;

					public Outputs(OrganizationResponse response)
					{
						Response = response;
					}

				}
			}
			public class ldv_CustomJobGetNextRecurrenceDate
			{
				public IOrganizationService Service;
				public OrganizationRequest Request;
				public OrganizationResponse Response;
				public Inputs InputParams;
				public Outputs OutputFields;
				
				public ldv_CustomJobGetNextRecurrenceDate()
				{
					Request = new OrganizationRequest("ldv_CustomJobGetNextRecurrenceDate");
					InputParams = new Inputs(Request);
				}
				
				public ldv_CustomJobGetNextRecurrenceDate(IOrganizationService service) : this()
				{
					Service = service;
				}
				
				public ldv_CustomJobGetNextRecurrenceDate(
					Microsoft.Xrm.Sdk.EntityReference RecurrenceRule
					, IOrganizationService service = null) : this()
				{
					Service = service;
					InputParams.RecurrenceRule = RecurrenceRule;
				}

				public Outputs Execute(IOrganizationService service = null)
				{
					if (service != null)
					{
						Service = service;
					}

					Response = Service.Execute(Request);

					return OutputFields = new Outputs(Response);
				}
				
				public class Inputs
				{
					public OrganizationRequest Request;

					public Inputs(OrganizationRequest request)
					{
						Request = request;
					}

					public Microsoft.Xrm.Sdk.EntityReference RecurrenceRule
					{
						set
						{
							Request["RecurrenceRule"] = value;
						}
						get
						{
							return (Microsoft.Xrm.Sdk.EntityReference) Request["RecurrenceRule"];
						}
					}
				}
				
				public class Outputs
				{
					public OrganizationResponse Response;

					public Outputs(OrganizationResponse response)
					{
						Response = response;
					}

					public System.DateTime NextTargetDate
					{
							private set {}
							get
						{
							return (System.DateTime) Response["NextTargetDate"];
						}
					}
				}
			}
			public class rwb_CustomiseRibbon
			{
				public IOrganizationService Service;
				public OrganizationRequest Request;
				public OrganizationResponse Response;
				public Inputs InputParams;
				public Outputs OutputFields;
				
				public rwb_CustomiseRibbon()
				{
					Request = new OrganizationRequest("rwb_CustomiseRibbon");
					InputParams = new Inputs(Request);
				}
				
				public rwb_CustomiseRibbon(IOrganizationService service) : this()
				{
					Service = service;
				}
				
				public rwb_CustomiseRibbon(
					System.String Operation
					, System.String Data
					, IOrganizationService service = null) : this()
				{
					Service = service;
					InputParams.Operation = Operation;
					InputParams.Data = Data;
				}

				public Outputs Execute(IOrganizationService service = null)
				{
					if (service != null)
					{
						Service = service;
					}

					Response = Service.Execute(Request);

					return OutputFields = new Outputs(Response);
				}
				
				public class Inputs
				{
					public OrganizationRequest Request;

					public Inputs(OrganizationRequest request)
					{
						Request = request;
					}

					public System.String Operation
					{
						set
						{
							Request["Operation"] = value;
						}
						get
						{
							return (System.String) Request["Operation"];
						}
					}
					public System.String Data
					{
						set
						{
							Request["Data"] = value;
						}
						get
						{
							return (System.String) Request["Data"];
						}
					}
				}
				
				public class Outputs
				{
					public OrganizationResponse Response;

					public Outputs(OrganizationResponse response)
					{
						Response = response;
					}

					public System.String Result
					{
							private set {}
							get
						{
							return (System.String) Response["Result"];
						}
					}
				}
			}

	}

	#endregion

	#region Actions

	#endregion

	#region Known Types

	#endregion

	#region Entities

	#region Account

	/// <summary>
	/// 'Account'.<br />
	/// Business that represents a customer or potential customer. The company that is billed in business transactions.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("account")]
	public partial class Account : GeneratedEntity<Account.RelationName>
	{
		
		public Account() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Account";
		public const string SchemaName = "Account";
		public const string EntityLogicalName = "account";
		public const int EntityTypeCode = 1;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("accountid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (AccountId == null || AccountId == Guid.Empty) ? base.Id : AccountId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("accountid");
                    base.Id = value;
                } else {
				    AccountId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccountCategoryCode'.<br />
        /// Select a category to indicate whether the customer account is standard or preferred.
        /// </summary>
		[AttributeLogicalName("accountcategorycode")]
		public CategoryEnum? Category
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accountcategorycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountcategorycode"))
				    value = (OptionSetValue) backupAttributeCollection["accountcategorycode"];
                return value == null ? (CategoryEnum?) null : (CategoryEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Category");
                if (value != null)
				    SetAttributeValue("accountcategorycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("accountcategorycode", value);
				OnPropertyChanged("Category");
			}
		}

        /// <summary>
        ///  
		/// 'AccountClassificationCode'.<br />
        /// Select a classification code to indicate the potential value of the customer account based on the projected return on investment, cooperation level, sales cycle length or other criteria.
        /// </summary>
		[AttributeLogicalName("accountclassificationcode")]
		public ClassificationEnum? Classification
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accountclassificationcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountclassificationcode"))
				    value = (OptionSetValue) backupAttributeCollection["accountclassificationcode"];
                return value == null ? (ClassificationEnum?) null : (ClassificationEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Classification");
                if (value != null)
				    SetAttributeValue("accountclassificationcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("accountclassificationcode", value);
				OnPropertyChanged("Classification");
			}
		}

        /// <summary>
        ///  
		/// 'AccountId'.<br />
        /// Unique identifier of the account.
        /// </summary>
		[AttributeLogicalName("accountid")]
		public Guid? AccountId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("accountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountid"))
				    value = (Guid?) backupAttributeCollection["accountid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AccountId");
                if (value != null)
					SetAttributeValue("accountid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("AccountId");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'AccountNumber'.<br />
        /// Type an ID number or code for the account to quickly search and identify the account in system views.
        /// </summary>
		[AttributeLogicalName("accountnumber"), MaxLength(20)]
		public string AccountNumber
		{
			get
			{
				var value = GetAttributeValue<string>("accountnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountnumber"))
				    value = (string) backupAttributeCollection["accountnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AccountNumber");
					SetAttributeValue("accountnumber", value);
				OnPropertyChanged("AccountNumber");
			}
		}

        /// <summary>
        ///  
		/// 'AccountRatingCode'.<br />
        /// Select a rating to indicate the value of the customer account.
        /// </summary>
		[AttributeLogicalName("accountratingcode")]
		public AccountRatingEnum? AccountRating
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accountratingcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountratingcode"))
				    value = (OptionSetValue) backupAttributeCollection["accountratingcode"];
                return value == null ? (AccountRatingEnum?) null : (AccountRatingEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("AccountRating");
                if (value != null)
				    SetAttributeValue("accountratingcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("accountratingcode", value);
				OnPropertyChanged("AccountRating");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressId'.<br />
        /// Unique identifier for address 1.
        /// </summary>
		[AttributeLogicalName("address1_addressid")]
		public Guid? Address1ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address1_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addressid"))
				    value = (Guid?) backupAttributeCollection["address1_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1ID");
					SetAttributeValue("address1_addressid", value);
				OnPropertyChanged("Address1ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressTypeCode'.<br />
        /// Select the primary address type.
        /// </summary>
		[AttributeLogicalName("address1_addresstypecode")]
		public Address1AddressTypeEnum? Address1AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_addresstypecode"];
                return value == null ? (Address1AddressTypeEnum?) null : (Address1AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1AddressType");
                if (value != null)
				    SetAttributeValue("address1_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_addresstypecode", value);
				OnPropertyChanged("Address1AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address1_City'.<br />
        /// Type the city for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_city"), MaxLength(80)]
		public string Address1City
		{
			get
			{
				var value = GetAttributeValue<string>("address1_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_city"))
				    value = (string) backupAttributeCollection["address1_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1City");
					SetAttributeValue("address1_city", value);
				OnPropertyChanged("Address1City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address1_Composite'.<br />
        /// Shows the complete primary address.
        /// </summary>
		[AttributeLogicalName("address1_composite"), MaxLength(1000)]
		public string Address1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_composite"))
				    value = (string) backupAttributeCollection["address1_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1");
					SetAttributeValue("address1_composite", value);
				OnPropertyChanged("Address1");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address1_Country'.<br />
        /// Type the country or region for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_country"), MaxLength(80)]
		public string Address1CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address1_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_country"))
				    value = (string) backupAttributeCollection["address1_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1CountryRegion");
					SetAttributeValue("address1_country", value);
				OnPropertyChanged("Address1CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_County'.<br />
        /// Type the county for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_county"), MaxLength(50)]
		public string Address1County
		{
			get
			{
				var value = GetAttributeValue<string>("address1_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_county"))
				    value = (string) backupAttributeCollection["address1_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1County");
					SetAttributeValue("address1_county", value);
				OnPropertyChanged("Address1County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Fax'.<br />
        /// Type the fax number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_fax"), MaxLength(50)]
		public string Address1Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address1_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_fax"))
				    value = (string) backupAttributeCollection["address1_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Fax");
					SetAttributeValue("address1_fax", value);
				OnPropertyChanged("Address1Fax");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_FreightTermsCode'.<br />
        /// Select the freight terms for the primary address to make sure shipping orders are processed correctly.
        /// </summary>
		[AttributeLogicalName("address1_freighttermscode")]
		public Address1FreightTermsEnum? Address1FreightTerms
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_freighttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_freighttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_freighttermscode"];
                return value == null ? (Address1FreightTermsEnum?) null : (Address1FreightTermsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1FreightTerms");
                if (value != null)
				    SetAttributeValue("address1_freighttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_freighttermscode", value);
				OnPropertyChanged("Address1FreightTerms");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address1_Latitude'.<br />
        /// Type the latitude value for the primary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address1_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address1Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_latitude"))
				    value = (double?) backupAttributeCollection["address1_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Latitude");
					SetAttributeValue("address1_latitude", value);
				OnPropertyChanged("Address1Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address1_Line1'.<br />
        /// Type the first line of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_line1"), MaxLength(250)]
		public string Address1Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line1"))
				    value = (string) backupAttributeCollection["address1_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Street1");
					SetAttributeValue("address1_line1", value);
				OnPropertyChanged("Address1Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address1_Line2'.<br />
        /// Type the second line of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_line2"), MaxLength(250)]
		public string Address1Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line2"))
				    value = (string) backupAttributeCollection["address1_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Street2");
					SetAttributeValue("address1_line2", value);
				OnPropertyChanged("Address1Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address1_Line3'.<br />
        /// Type the third line of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_line3"), MaxLength(250)]
		public string Address1Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line3"))
				    value = (string) backupAttributeCollection["address1_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Street3");
					SetAttributeValue("address1_line3", value);
				OnPropertyChanged("Address1Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address1_Longitude'.<br />
        /// Type the longitude value for the primary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address1_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address1Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_longitude"))
				    value = (double?) backupAttributeCollection["address1_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Longitude");
					SetAttributeValue("address1_longitude", value);
				OnPropertyChanged("Address1Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'Address1_Name'.<br />
        /// Type a descriptive name for the primary address, such as Corporate Headquarters.
        /// </summary>
		[AttributeLogicalName("address1_name"), MaxLength(200)]
		public string Address1Name
		{
			get
			{
				var value = GetAttributeValue<string>("address1_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_name"))
				    value = (string) backupAttributeCollection["address1_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Name");
					SetAttributeValue("address1_name", value);
				OnPropertyChanged("Address1Name");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address1_PostalCode'.<br />
        /// Type the ZIP Code or postal code for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_postalcode"), MaxLength(20)]
		public string Address1ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postalcode"))
				    value = (string) backupAttributeCollection["address1_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1ZIPPostalCode");
					SetAttributeValue("address1_postalcode", value);
				OnPropertyChanged("Address1ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address1_PostOfficeBox'.<br />
        /// Type the post office box number of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_postofficebox"), MaxLength(20)]
		public string Address1PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postofficebox"))
				    value = (string) backupAttributeCollection["address1_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1PostOfficeBox");
					SetAttributeValue("address1_postofficebox", value);
				OnPropertyChanged("Address1PostOfficeBox");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address1_PrimaryContactName'.<br />
        /// Type the name of the main contact at the account's primary address.
        /// </summary>
		[AttributeLogicalName("address1_primarycontactname"), MaxLength(100)]
		public string Address1PrimaryContactName
		{
			get
			{
				var value = GetAttributeValue<string>("address1_primarycontactname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_primarycontactname"))
				    value = (string) backupAttributeCollection["address1_primarycontactname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1PrimaryContactName");
					SetAttributeValue("address1_primarycontactname", value);
				OnPropertyChanged("Address1PrimaryContactName");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to this address.
        /// </summary>
		[AttributeLogicalName("address1_shippingmethodcode")]
		public Address1ShippingMethodEnum? Address1ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_shippingmethodcode"];
                return value == null ? (Address1ShippingMethodEnum?) null : (Address1ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1ShippingMethod");
                if (value != null)
				    SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_shippingmethodcode", value);
				OnPropertyChanged("Address1ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_StateOrProvince'.<br />
        /// Type the state or province of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_stateorprovince"), MaxLength(50)]
		public string Address1StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address1_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_stateorprovince"))
				    value = (string) backupAttributeCollection["address1_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1StateProvince");
					SetAttributeValue("address1_stateorprovince", value);
				OnPropertyChanged("Address1StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone1'.<br />
        /// Type the main phone number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_telephone1"), MaxLength(50)]
		public string AddressPhone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone1"))
				    value = (string) backupAttributeCollection["address1_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AddressPhone");
					SetAttributeValue("address1_telephone1", value);
				OnPropertyChanged("AddressPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone2'.<br />
        /// Type a second phone number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_telephone2"), MaxLength(50)]
		public string Address1Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone2"))
				    value = (string) backupAttributeCollection["address1_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Telephone2");
					SetAttributeValue("address1_telephone2", value);
				OnPropertyChanged("Address1Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone3'.<br />
        /// Type a third phone number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_telephone3"), MaxLength(50)]
		public string Address1Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone3"))
				    value = (string) backupAttributeCollection["address1_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Telephone3");
					SetAttributeValue("address1_telephone3", value);
				OnPropertyChanged("Address1Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address1_UPSZone'.<br />
        /// Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
        /// </summary>
		[AttributeLogicalName("address1_upszone"), MaxLength(4)]
		public string Address1UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_upszone"))
				    value = (string) backupAttributeCollection["address1_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UPSZone");
					SetAttributeValue("address1_upszone", value);
				OnPropertyChanged("Address1UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address1_UTCOffset'.<br />
        /// Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
        /// </summary>
		[AttributeLogicalName("address1_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address1UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address1_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_utcoffset"))
				    value = (int?) backupAttributeCollection["address1_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UTCOffset");
					SetAttributeValue("address1_utcoffset", value);
				OnPropertyChanged("Address1UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressId'.<br />
        /// Unique identifier for address 2.
        /// </summary>
		[AttributeLogicalName("address2_addressid")]
		public Guid? Address2ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address2_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addressid"))
				    value = (Guid?) backupAttributeCollection["address2_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2ID");
					SetAttributeValue("address2_addressid", value);
				OnPropertyChanged("Address2ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressTypeCode'.<br />
        /// Select the secondary address type.
        /// </summary>
		[AttributeLogicalName("address2_addresstypecode")]
		public Address2AddressTypeEnum? Address2AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_addresstypecode"];
                return value == null ? (Address2AddressTypeEnum?) null : (Address2AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2AddressType");
                if (value != null)
				    SetAttributeValue("address2_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_addresstypecode", value);
				OnPropertyChanged("Address2AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address2_City'.<br />
        /// Type the city for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_city"), MaxLength(80)]
		public string Address2City
		{
			get
			{
				var value = GetAttributeValue<string>("address2_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_city"))
				    value = (string) backupAttributeCollection["address2_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2City");
					SetAttributeValue("address2_city", value);
				OnPropertyChanged("Address2City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address2_Composite'.<br />
        /// Shows the complete secondary address.
        /// </summary>
		[AttributeLogicalName("address2_composite"), MaxLength(1000)]
		public string Address2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_composite"))
				    value = (string) backupAttributeCollection["address2_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2");
					SetAttributeValue("address2_composite", value);
				OnPropertyChanged("Address2");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address2_Country'.<br />
        /// Type the country or region for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_country"), MaxLength(80)]
		public string Address2CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address2_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_country"))
				    value = (string) backupAttributeCollection["address2_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2CountryRegion");
					SetAttributeValue("address2_country", value);
				OnPropertyChanged("Address2CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_County'.<br />
        /// Type the county for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_county"), MaxLength(50)]
		public string Address2County
		{
			get
			{
				var value = GetAttributeValue<string>("address2_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_county"))
				    value = (string) backupAttributeCollection["address2_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2County");
					SetAttributeValue("address2_county", value);
				OnPropertyChanged("Address2County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Fax'.<br />
        /// Type the fax number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_fax"), MaxLength(50)]
		public string Address2Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address2_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_fax"))
				    value = (string) backupAttributeCollection["address2_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Fax");
					SetAttributeValue("address2_fax", value);
				OnPropertyChanged("Address2Fax");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_FreightTermsCode'.<br />
        /// Select the freight terms for the secondary address to make sure shipping orders are processed correctly.
        /// </summary>
		[AttributeLogicalName("address2_freighttermscode")]
		public Address2FreightTermsEnum? Address2FreightTerms
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_freighttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_freighttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_freighttermscode"];
                return value == null ? (Address2FreightTermsEnum?) null : (Address2FreightTermsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2FreightTerms");
                if (value != null)
				    SetAttributeValue("address2_freighttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_freighttermscode", value);
				OnPropertyChanged("Address2FreightTerms");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address2_Latitude'.<br />
        /// Type the latitude value for the secondary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address2_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address2Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_latitude"))
				    value = (double?) backupAttributeCollection["address2_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Latitude");
					SetAttributeValue("address2_latitude", value);
				OnPropertyChanged("Address2Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address2_Line1'.<br />
        /// Type the first line of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_line1"), MaxLength(250)]
		public string Address2Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line1"))
				    value = (string) backupAttributeCollection["address2_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Street1");
					SetAttributeValue("address2_line1", value);
				OnPropertyChanged("Address2Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address2_Line2'.<br />
        /// Type the second line of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_line2"), MaxLength(250)]
		public string Address2Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line2"))
				    value = (string) backupAttributeCollection["address2_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Street2");
					SetAttributeValue("address2_line2", value);
				OnPropertyChanged("Address2Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address2_Line3'.<br />
        /// Type the third line of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_line3"), MaxLength(250)]
		public string Address2Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line3"))
				    value = (string) backupAttributeCollection["address2_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Street3");
					SetAttributeValue("address2_line3", value);
				OnPropertyChanged("Address2Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address2_Longitude'.<br />
        /// Type the longitude value for the secondary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address2_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address2Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_longitude"))
				    value = (double?) backupAttributeCollection["address2_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Longitude");
					SetAttributeValue("address2_longitude", value);
				OnPropertyChanged("Address2Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'Address2_Name'.<br />
        /// Type a descriptive name for the secondary address, such as Corporate Headquarters.
        /// </summary>
		[AttributeLogicalName("address2_name"), MaxLength(200)]
		public string Address2Name
		{
			get
			{
				var value = GetAttributeValue<string>("address2_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_name"))
				    value = (string) backupAttributeCollection["address2_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Name");
					SetAttributeValue("address2_name", value);
				OnPropertyChanged("Address2Name");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address2_PostalCode'.<br />
        /// Type the ZIP Code or postal code for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_postalcode"), MaxLength(20)]
		public string Address2ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postalcode"))
				    value = (string) backupAttributeCollection["address2_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2ZIPPostalCode");
					SetAttributeValue("address2_postalcode", value);
				OnPropertyChanged("Address2ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address2_PostOfficeBox'.<br />
        /// Type the post office box number of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_postofficebox"), MaxLength(20)]
		public string Address2PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postofficebox"))
				    value = (string) backupAttributeCollection["address2_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2PostOfficeBox");
					SetAttributeValue("address2_postofficebox", value);
				OnPropertyChanged("Address2PostOfficeBox");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address2_PrimaryContactName'.<br />
        /// Type the name of the main contact at the account's secondary address.
        /// </summary>
		[AttributeLogicalName("address2_primarycontactname"), MaxLength(100)]
		public string Address2PrimaryContactName
		{
			get
			{
				var value = GetAttributeValue<string>("address2_primarycontactname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_primarycontactname"))
				    value = (string) backupAttributeCollection["address2_primarycontactname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2PrimaryContactName");
					SetAttributeValue("address2_primarycontactname", value);
				OnPropertyChanged("Address2PrimaryContactName");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to this address.
        /// </summary>
		[AttributeLogicalName("address2_shippingmethodcode")]
		public Address2ShippingMethodEnum? Address2ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_shippingmethodcode"];
                return value == null ? (Address2ShippingMethodEnum?) null : (Address2ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2ShippingMethod");
                if (value != null)
				    SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_shippingmethodcode", value);
				OnPropertyChanged("Address2ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_StateOrProvince'.<br />
        /// Type the state or province of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_stateorprovince"), MaxLength(50)]
		public string Address2StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address2_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_stateorprovince"))
				    value = (string) backupAttributeCollection["address2_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2StateProvince");
					SetAttributeValue("address2_stateorprovince", value);
				OnPropertyChanged("Address2StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone1'.<br />
        /// Type the main phone number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_telephone1"), MaxLength(50)]
		public string Address2Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone1"))
				    value = (string) backupAttributeCollection["address2_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone1");
					SetAttributeValue("address2_telephone1", value);
				OnPropertyChanged("Address2Telephone1");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone2'.<br />
        /// Type a second phone number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_telephone2"), MaxLength(50)]
		public string Address2Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone2"))
				    value = (string) backupAttributeCollection["address2_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone2");
					SetAttributeValue("address2_telephone2", value);
				OnPropertyChanged("Address2Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone3'.<br />
        /// Type a third phone number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_telephone3"), MaxLength(50)]
		public string Address2Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone3"))
				    value = (string) backupAttributeCollection["address2_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone3");
					SetAttributeValue("address2_telephone3", value);
				OnPropertyChanged("Address2Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address2_UPSZone'.<br />
        /// Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
        /// </summary>
		[AttributeLogicalName("address2_upszone"), MaxLength(4)]
		public string Address2UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address2_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_upszone"))
				    value = (string) backupAttributeCollection["address2_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UPSZone");
					SetAttributeValue("address2_upszone", value);
				OnPropertyChanged("Address2UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address2_UTCOffset'.<br />
        /// Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
        /// </summary>
		[AttributeLogicalName("address2_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address2UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address2_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_utcoffset"))
				    value = (int?) backupAttributeCollection["address2_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UTCOffset");
					SetAttributeValue("address2_utcoffset", value);
				OnPropertyChanged("Address2UTCOffset");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'Aging30'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("aging30"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? Aging30
		{
			get
			{
				var value = GetAttributeValue<Money>("aging30");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging30"))
				    value = (Money) backupAttributeCollection["aging30"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging30");
                if (value != null)
				    SetAttributeValue("aging30", new Money(value.Value));
                else
					SetAttributeValue("aging30", value);
				OnPropertyChanged("Aging30");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'Aging30_Base'.<br />
        /// The base currency equivalent of the aging 30 field.
        /// </summary>
		[AttributeLogicalName("aging30_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? Aging30Base
		{
			get
			{
				var value = GetAttributeValue<Money>("aging30_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging30_base"))
				    value = (Money) backupAttributeCollection["aging30_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging30Base");
                if (value != null)
				    SetAttributeValue("aging30_base", new Money(value.Value));
                else
					SetAttributeValue("aging30_base", value);
				OnPropertyChanged("Aging30Base");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'Aging60'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("aging60"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? Aging60
		{
			get
			{
				var value = GetAttributeValue<Money>("aging60");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging60"))
				    value = (Money) backupAttributeCollection["aging60"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging60");
                if (value != null)
				    SetAttributeValue("aging60", new Money(value.Value));
                else
					SetAttributeValue("aging60", value);
				OnPropertyChanged("Aging60");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'Aging60_Base'.<br />
        /// The base currency equivalent of the aging 60 field.
        /// </summary>
		[AttributeLogicalName("aging60_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? Aging60Base
		{
			get
			{
				var value = GetAttributeValue<Money>("aging60_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging60_base"))
				    value = (Money) backupAttributeCollection["aging60_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging60Base");
                if (value != null)
				    SetAttributeValue("aging60_base", new Money(value.Value));
                else
					SetAttributeValue("aging60_base", value);
				OnPropertyChanged("Aging60Base");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'Aging90'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("aging90"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? Aging90
		{
			get
			{
				var value = GetAttributeValue<Money>("aging90");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging90"))
				    value = (Money) backupAttributeCollection["aging90"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging90");
                if (value != null)
				    SetAttributeValue("aging90", new Money(value.Value));
                else
					SetAttributeValue("aging90", value);
				OnPropertyChanged("Aging90");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'Aging90_Base'.<br />
        /// The base currency equivalent of the aging 90 field.
        /// </summary>
		[AttributeLogicalName("aging90_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? Aging90Base
		{
			get
			{
				var value = GetAttributeValue<Money>("aging90_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging90_base"))
				    value = (Money) backupAttributeCollection["aging90_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging90Base");
                if (value != null)
				    SetAttributeValue("aging90_base", new Money(value.Value));
                else
					SetAttributeValue("aging90_base", value);
				OnPropertyChanged("Aging90Base");
			}
		}

        /// <summary>
        ///  
		/// 'BusinessTypeCode'.<br />
        /// Select the legal designation or other business type of the account for contracts or reporting purposes.
        /// </summary>
		[AttributeLogicalName("businesstypecode")]
		public BusinessTypeEnum? BusinessType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("businesstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("businesstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["businesstypecode"];
                return value == null ? (BusinessTypeEnum?) null : (BusinessTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("BusinessType");
                if (value != null)
				    SetAttributeValue("businesstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("businesstypecode", value);
				OnPropertyChanged("BusinessType");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Shows who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedByExternalParty'.<br />
        /// Shows the external party who created the record.
        /// </summary>
		[AttributeLogicalName("createdbyexternalparty")]
		public Guid? CreatedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["createdbyexternalparty"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByExternalParty");
                if (value != null)
				    SetAttributeValue("createdbyexternalparty", new EntityReference("externalparty", value.Value));
                else
					SetAttributeValue("createdbyexternalparty", value);
				OnPropertyChanged("CreatedByExternalParty");
			}
		}

        public string CreatedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["createdbyexternalparty"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'CreditLimit'.<br />
        /// Type the credit limit of the account. This is a useful reference when you address invoice and accounting issues with the customer.
        /// </summary>
		[AttributeLogicalName("creditlimit"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? CreditLimit
		{
			get
			{
				var value = GetAttributeValue<Money>("creditlimit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("creditlimit"))
				    value = (Money) backupAttributeCollection["creditlimit"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("CreditLimit");
                if (value != null)
				    SetAttributeValue("creditlimit", new Money(value.Value));
                else
					SetAttributeValue("creditlimit", value);
				OnPropertyChanged("CreditLimit");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'CreditLimit_Base'.<br />
        /// Shows the credit limit converted to the system's default base currency for reporting purposes.
        /// </summary>
		[AttributeLogicalName("creditlimit_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? CreditLimitBase
		{
			get
			{
				var value = GetAttributeValue<Money>("creditlimit_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("creditlimit_base"))
				    value = (Money) backupAttributeCollection["creditlimit_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("CreditLimitBase");
                if (value != null)
				    SetAttributeValue("creditlimit_base", new Money(value.Value));
                else
					SetAttributeValue("creditlimit_base", value);
				OnPropertyChanged("CreditLimitBase");
			}
		}

        /// <summary>
        ///  
		/// 'CreditOnHold'.<br />
        /// Select whether the credit for the account is on hold. This is a useful reference while addressing the invoice and accounting issues with the customer.
        /// </summary>
		[AttributeLogicalName("creditonhold")]
		public bool? CreditHold
		{
			get
			{
				var value = GetAttributeValue<bool?>("creditonhold");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("creditonhold"))
				    value = (bool?) backupAttributeCollection["creditonhold"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreditHold");
					SetAttributeValue("creditonhold", value);
				OnPropertyChanged("CreditHold");
			}
		}

        /// <summary>
        ///  
		/// 'CustomerSizeCode'.<br />
        /// Select the size category or range of the account for segmentation and reporting purposes.
        /// </summary>
		[AttributeLogicalName("customersizecode")]
		public CustomerSizeEnum? CustomerSize
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("customersizecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customersizecode"))
				    value = (OptionSetValue) backupAttributeCollection["customersizecode"];
                return value == null ? (CustomerSizeEnum?) null : (CustomerSizeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("CustomerSize");
                if (value != null)
				    SetAttributeValue("customersizecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("customersizecode", value);
				OnPropertyChanged("CustomerSize");
			}
		}

        /// <summary>
        ///  
		/// 'CustomerTypeCode'.<br />
        /// Select the category that best describes the relationship between the account and your organization.
        /// </summary>
		[AttributeLogicalName("customertypecode")]
		public RelationshipTypeEnum? RelationshipType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("customertypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customertypecode"))
				    value = (OptionSetValue) backupAttributeCollection["customertypecode"];
                return value == null ? (RelationshipTypeEnum?) null : (RelationshipTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("RelationshipType");
                if (value != null)
				    SetAttributeValue("customertypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("customertypecode", value);
				OnPropertyChanged("RelationshipType");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultPriceLevelId'.<br />
        /// Choose the default price list associated with the account to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.
        /// </summary>
		[AttributeLogicalName("defaultpricelevelid")]
		public Guid? PriceList
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultpricelevelid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultpricelevelid"))
				    value = (EntityReference) backupAttributeCollection["defaultpricelevelid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PriceList");
                if (value != null)
				    SetAttributeValue("defaultpricelevelid", new EntityReference("pricelevel", value.Value));
                else
					SetAttributeValue("defaultpricelevelid", value);
				OnPropertyChanged("PriceList");
			}
		}

        public string PriceListName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultpricelevelid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultpricelevelid"))
				    value = (EntityReference) backupAttributeCollection["defaultpricelevelid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'Description'.<br />
        /// Type additional information to describe the account, such as an excerpt from the company's website.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(2000)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotBulkEMail'.<br />
        /// Select whether the account allows bulk email sent through campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but is excluded from email.
        /// </summary>
		[AttributeLogicalName("donotbulkemail")]
		public bool? DonotallowBulkEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotbulkemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotbulkemail"))
				    value = (bool?) backupAttributeCollection["donotbulkemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowBulkEmails");
					SetAttributeValue("donotbulkemail", value);
				OnPropertyChanged("DonotallowBulkEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotBulkPostalMail'.<br />
        /// Select whether the account allows bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the account can be added to marketing lists, but will be excluded from the postal mail.
        /// </summary>
		[AttributeLogicalName("donotbulkpostalmail")]
		public bool? DonotallowBulkMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotbulkpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotbulkpostalmail"))
				    value = (bool?) backupAttributeCollection["donotbulkpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowBulkMails");
					SetAttributeValue("donotbulkpostalmail", value);
				OnPropertyChanged("DonotallowBulkMails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotEMail'.<br />
        /// Select whether the account allows direct email sent from Microsoft Dynamics 365.
        /// </summary>
		[AttributeLogicalName("donotemail")]
		public bool? DonotallowEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotemail"))
				    value = (bool?) backupAttributeCollection["donotemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowEmails");
					SetAttributeValue("donotemail", value);
				OnPropertyChanged("DonotallowEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotFax'.<br />
        /// Select whether the account allows faxes. If Do Not Allow is selected, the account will be excluded from fax activities distributed in marketing campaigns.
        /// </summary>
		[AttributeLogicalName("donotfax")]
		public bool? DonotallowFaxes
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotfax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotfax"))
				    value = (bool?) backupAttributeCollection["donotfax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowFaxes");
					SetAttributeValue("donotfax", value);
				OnPropertyChanged("DonotallowFaxes");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPhone'.<br />
        /// Select whether the account allows phone calls. If Do Not Allow is selected, the account will be excluded from phone call activities distributed in marketing campaigns.
        /// </summary>
		[AttributeLogicalName("donotphone")]
		public bool? DonotallowPhoneCalls
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotphone"))
				    value = (bool?) backupAttributeCollection["donotphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPhoneCalls");
					SetAttributeValue("donotphone", value);
				OnPropertyChanged("DonotallowPhoneCalls");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPostalMail'.<br />
        /// Select whether the account allows direct mail. If Do Not Allow is selected, the account will be excluded from letter activities distributed in marketing campaigns.
        /// </summary>
		[AttributeLogicalName("donotpostalmail")]
		public bool? DonotallowMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotpostalmail"))
				    value = (bool?) backupAttributeCollection["donotpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowMails");
					SetAttributeValue("donotpostalmail", value);
				OnPropertyChanged("DonotallowMails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotSendMM'.<br />
        /// Select whether the account accepts marketing materials, such as brochures or catalogs.
        /// </summary>
		[AttributeLogicalName("donotsendmm")]
		public bool? SendMarketingMaterials
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotsendmm");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotsendmm"))
				    value = (bool?) backupAttributeCollection["donotsendmm"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SendMarketingMaterials");
					SetAttributeValue("donotsendmm", value);
				OnPropertyChanged("SendMarketingMaterials");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EMailAddress1'.<br />
        /// Type the primary email address for the account.
        /// </summary>
		[AttributeLogicalName("emailaddress1"), MaxLength(100)]
		public string Email
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress1"))
				    value = (string) backupAttributeCollection["emailaddress1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Email");
					SetAttributeValue("emailaddress1", value);
				OnPropertyChanged("Email");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EMailAddress2'.<br />
        /// Type the secondary email address for the account.
        /// </summary>
		[AttributeLogicalName("emailaddress2"), MaxLength(100)]
		public string EmailAddress2
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress2"))
				    value = (string) backupAttributeCollection["emailaddress2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddress2");
					SetAttributeValue("emailaddress2", value);
				OnPropertyChanged("EmailAddress2");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EMailAddress3'.<br />
        /// Type an alternate email address for the account.
        /// </summary>
		[AttributeLogicalName("emailaddress3"), MaxLength(100)]
		public string EmailAddress3
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress3"))
				    value = (string) backupAttributeCollection["emailaddress3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddress3");
					SetAttributeValue("emailaddress3", value);
				OnPropertyChanged("EmailAddress3");
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Fax'.<br />
        /// Type the fax number for the account.
        /// </summary>
		[AttributeLogicalName("fax"), MaxLength(50)]
		public string Fax
		{
			get
			{
				var value = GetAttributeValue<string>("fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fax"))
				    value = (string) backupAttributeCollection["fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Fax");
					SetAttributeValue("fax", value);
				OnPropertyChanged("Fax");
			}
		}

        /// <summary>
        ///  
		/// 'FollowEmail'.<br />
        /// Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the account.
        /// </summary>
		[AttributeLogicalName("followemail")]
		public bool? FollowEmailActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("followemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("followemail"))
				    value = (bool?) backupAttributeCollection["followemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FollowEmailActivity");
					SetAttributeValue("followemail", value);
				OnPropertyChanged("FollowEmailActivity");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'FtpSiteURL'.<br />
        /// Type the URL for the account's FTP site to enable users to access data and share documents.
        /// </summary>
		[AttributeLogicalName("ftpsiteurl"), MaxLength(200)]
		public string FTPSite
		{
			get
			{
				var value = GetAttributeValue<string>("ftpsiteurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ftpsiteurl"))
				    value = (string) backupAttributeCollection["ftpsiteurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FTPSite");
					SetAttributeValue("ftpsiteurl", value);
				OnPropertyChanged("FTPSite");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IndustryCode'.<br />
        /// Select the account's primary industry for use in marketing segmentation and demographic analysis.
        /// </summary>
		[AttributeLogicalName("industrycode")]
		public IndustryEnum? Industry
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("industrycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("industrycode"))
				    value = (OptionSetValue) backupAttributeCollection["industrycode"];
                return value == null ? (IndustryEnum?) null : (IndustryEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Industry");
                if (value != null)
				    SetAttributeValue("industrycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("industrycode", value);
				OnPropertyChanged("Industry");
			}
		}

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date and time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

        /// <summary>
        ///  
		/// 'LastUsedInCampaign'.<br />
        /// Shows the date when the account was last included in a marketing campaign or quick campaign.
        /// </summary>
		[AttributeLogicalName("lastusedincampaign")]
		public DateTime? LastDateIncludedinCampaign
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastusedincampaign");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastusedincampaign"))
				    value = (DateTime?) backupAttributeCollection["lastusedincampaign"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastDateIncludedinCampaign");
					SetAttributeValue("lastusedincampaign", value);
				OnPropertyChanged("LastDateIncludedinCampaign");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'MarketCap'.<br />
        /// Type the market capitalization of the account to identify the company's equity, used as an indicator in financial performance analysis.
        /// </summary>
		[AttributeLogicalName("marketcap"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? MarketCapitalization
		{
			get
			{
				var value = GetAttributeValue<Money>("marketcap");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("marketcap"))
				    value = (Money) backupAttributeCollection["marketcap"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("MarketCapitalization");
                if (value != null)
				    SetAttributeValue("marketcap", new Money(value.Value));
                else
					SetAttributeValue("marketcap", value);
				OnPropertyChanged("MarketCapitalization");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'MarketCap_Base'.<br />
        /// Shows the market capitalization converted to the system's default base currency.
        /// </summary>
		[AttributeLogicalName("marketcap_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? MarketCapitalizationBase
		{
			get
			{
				var value = GetAttributeValue<Money>("marketcap_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("marketcap_base"))
				    value = (Money) backupAttributeCollection["marketcap_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("MarketCapitalizationBase");
                if (value != null)
				    SetAttributeValue("marketcap_base", new Money(value.Value));
                else
					SetAttributeValue("marketcap_base", value);
				OnPropertyChanged("MarketCapitalizationBase");
			}
		}

        /// <summary>
        ///  
		/// 'MarketingOnly'.<br />
        /// Whether is only for marketing
        /// </summary>
		[AttributeLogicalName("marketingonly")]
		public bool? MarketingOnly
		{
			get
			{
				var value = GetAttributeValue<bool?>("marketingonly");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("marketingonly"))
				    value = (bool?) backupAttributeCollection["marketingonly"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MarketingOnly");
					SetAttributeValue("marketingonly", value);
				OnPropertyChanged("MarketingOnly");
			}
		}

        /// <summary>
        ///  
		/// 'MasterId'.<br />
        /// Shows the master account that the account was merged with.
        /// </summary>
		[AttributeLogicalName("masterid")]
		public Guid? MasterID
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("masterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("masterid"))
				    value = (EntityReference) backupAttributeCollection["masterid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("MasterID");
                if (value != null)
				    SetAttributeValue("masterid", new EntityReference("account", value.Value));
                else
					SetAttributeValue("masterid", value);
				OnPropertyChanged("MasterID");
			}
		}

        public string MasterIDName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("masterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("masterid"))
				    value = (EntityReference) backupAttributeCollection["masterid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Merged'.<br />
        /// Shows whether the account has been merged with another account.
        /// </summary>
		[AttributeLogicalName("merged")]
		public bool? Merged
		{
			get
			{
				var value = GetAttributeValue<bool?>("merged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("merged"))
				    value = (bool?) backupAttributeCollection["merged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Merged");
					SetAttributeValue("merged", value);
				OnPropertyChanged("Merged");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Shows who last updated the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedByExternalParty'.<br />
        /// Shows the external party who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedbyexternalparty")]
		public Guid? ModifiedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["modifiedbyexternalparty"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByExternalParty");
                if (value != null)
				    SetAttributeValue("modifiedbyexternalparty", new EntityReference("externalparty", value.Value));
                else
					SetAttributeValue("modifiedbyexternalparty", value);
				OnPropertyChanged("ModifiedByExternalParty");
			}
		}

        public string ModifiedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["modifiedbyexternalparty"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Required][MaximumLength=160] 
		/// 'Name'.<br />
        /// Type the company or business name.
        /// </summary>
		[AttributeLogicalName("name"), Required, MaxLength(160)]
		public string AccountName
		{
			get
			{
				var value = GetAttributeValue<string>("name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("name"))
				    value = (string) backupAttributeCollection["name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AccountName");
					SetAttributeValue("name", value);
				OnPropertyChanged("AccountName");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'NumberOfEmployees'.<br />
        /// Type the number of employees that work at the account for use in marketing segmentation and demographic analysis.
        /// </summary>
		[AttributeLogicalName("numberofemployees"), InRange("0", "1000000000", typeof(int))]
		public int? NoofEmployees
		{
			get
			{
				var value = GetAttributeValue<int?>("numberofemployees");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numberofemployees"))
				    value = (int?) backupAttributeCollection["numberofemployees"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NoofEmployees");
					SetAttributeValue("numberofemployees", value);
				OnPropertyChanged("NoofEmployees");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows how long, in minutes, that the record was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTimeMinutes
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTimeMinutes");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTimeMinutes");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OpenDeals'.<br />
        /// Number of open opportunities against an account and its child accounts.
        /// </summary>
		[AttributeLogicalName("opendeals"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OpenDeals
		{
			get
			{
				var value = GetAttributeValue<int?>("opendeals");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("opendeals"))
				    value = (int?) backupAttributeCollection["opendeals"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OpenDeals");
					SetAttributeValue("opendeals", value);
				OnPropertyChanged("OpenDeals");
			}
		}

        /// <summary>
        ///  
		/// 'OpenDeals_Date'.<br />
        /// The date time for Open Deals.
        /// </summary>
		[AttributeLogicalName("opendeals_date")]
		public DateTime? OpenDealsLastUpdatedTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("opendeals_date");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("opendeals_date"))
				    value = (DateTime?) backupAttributeCollection["opendeals_date"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OpenDealsLastUpdatedTime");
					SetAttributeValue("opendeals_date", value);
				OnPropertyChanged("OpenDealsLastUpdatedTime");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OpenDeals_State'.<br />
        /// State of Open Deals.
        /// </summary>
		[AttributeLogicalName("opendeals_state"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OpenDealsState
		{
			get
			{
				var value = GetAttributeValue<int?>("opendeals_state");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("opendeals_state"))
				    value = (int?) backupAttributeCollection["opendeals_state"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OpenDealsState");
					SetAttributeValue("opendeals_state", value);
				OnPropertyChanged("OpenDealsState");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'OpenRevenue'.<br />
        /// Sum of open revenue against an account and its child accounts.
        /// </summary>
		[AttributeLogicalName("openrevenue"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? OpenRevenue
		{
			get
			{
				var value = GetAttributeValue<Money>("openrevenue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("openrevenue"))
				    value = (Money) backupAttributeCollection["openrevenue"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("OpenRevenue");
                if (value != null)
				    SetAttributeValue("openrevenue", new Money(value.Value));
                else
					SetAttributeValue("openrevenue", value);
				OnPropertyChanged("OpenRevenue");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'OpenRevenue_Base'.<br />
        /// Sum of open revenue against an account and its child accounts.
        /// </summary>
		[AttributeLogicalName("openrevenue_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? OpenRevenueBase
		{
			get
			{
				var value = GetAttributeValue<Money>("openrevenue_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("openrevenue_base"))
				    value = (Money) backupAttributeCollection["openrevenue_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("OpenRevenueBase");
                if (value != null)
				    SetAttributeValue("openrevenue_base", new Money(value.Value));
                else
					SetAttributeValue("openrevenue_base", value);
				OnPropertyChanged("OpenRevenueBase");
			}
		}

        /// <summary>
        ///  
		/// 'OpenRevenue_Date'.<br />
        /// The date time for Open Revenue.
        /// </summary>
		[AttributeLogicalName("openrevenue_date")]
		public DateTime? OpenRevenueLastUpdatedTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("openrevenue_date");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("openrevenue_date"))
				    value = (DateTime?) backupAttributeCollection["openrevenue_date"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OpenRevenueLastUpdatedTime");
					SetAttributeValue("openrevenue_date", value);
				OnPropertyChanged("OpenRevenueLastUpdatedTime");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OpenRevenue_State'.<br />
        /// State of Open Revenue.
        /// </summary>
		[AttributeLogicalName("openrevenue_state"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OpenRevenueState
		{
			get
			{
				var value = GetAttributeValue<int?>("openrevenue_state");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("openrevenue_state"))
				    value = (int?) backupAttributeCollection["openrevenue_state"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OpenRevenueState");
					SetAttributeValue("openrevenue_state", value);
				OnPropertyChanged("OpenRevenueState");
			}
		}

        /// <summary>
        ///  
		/// 'OriginatingLeadId'.<br />
        /// Shows the lead that the account was created from if the account was created by converting a lead in Microsoft Dynamics 365. This is used to relate the account to data on the originating lead for use in reporting and analytics.
        /// </summary>
		[AttributeLogicalName("originatingleadid")]
		public Guid? OriginatingLead
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("originatingleadid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("originatingleadid"))
				    value = (EntityReference) backupAttributeCollection["originatingleadid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OriginatingLead");
                if (value != null)
				    SetAttributeValue("originatingleadid", new EntityReference("lead", value.Value));
                else
					SetAttributeValue("originatingleadid", value);
				OnPropertyChanged("OriginatingLead");
			}
		}

        public string OriginatingLeadName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("originatingleadid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("originatingleadid"))
				    value = (EntityReference) backupAttributeCollection["originatingleadid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwnershipCode'.<br />
        /// Select the account's ownership structure, such as public or private.
        /// </summary>
		[AttributeLogicalName("ownershipcode")]
		public OwnershipEnum? Ownership
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ownershipcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownershipcode"))
				    value = (OptionSetValue) backupAttributeCollection["ownershipcode"];
                return value == null ? (OwnershipEnum?) null : (OwnershipEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Ownership");
                if (value != null)
				    SetAttributeValue("ownershipcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ownershipcode", value);
				OnPropertyChanged("Ownership");
			}
		}

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Shows the business unit that the record owner belongs to.
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier of the team who owns the account.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier of the user who owns the account.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParentAccountId'.<br />
        /// Choose the parent account associated with this account to show parent and child businesses in reporting and analytics.
        /// </summary>
		[AttributeLogicalName("parentaccountid")]
		public Guid? ParentAccount
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentaccountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentaccountid"))
				    value = (EntityReference) backupAttributeCollection["parentaccountid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ParentAccount");
                if (value != null)
				    SetAttributeValue("parentaccountid", new EntityReference("account", value.Value));
                else
					SetAttributeValue("parentaccountid", value);
				OnPropertyChanged("ParentAccount");
			}
		}

        public string ParentAccountName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentaccountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentaccountid"))
				    value = (EntityReference) backupAttributeCollection["parentaccountid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParticipatesInWorkflow'.<br />
        /// For system use only. Legacy Microsoft Dynamics CRM 3.0 workflow data.
        /// </summary>
		[AttributeLogicalName("participatesinworkflow")]
		public bool? ParticipatesinWorkflow
		{
			get
			{
				var value = GetAttributeValue<bool?>("participatesinworkflow");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("participatesinworkflow"))
				    value = (bool?) backupAttributeCollection["participatesinworkflow"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ParticipatesinWorkflow");
					SetAttributeValue("participatesinworkflow", value);
				OnPropertyChanged("ParticipatesinWorkflow");
			}
		}

        /// <summary>
        ///  
		/// 'PaymentTermsCode'.<br />
        /// Select the payment terms to indicate when the customer needs to pay the total amount.
        /// </summary>
		[AttributeLogicalName("paymenttermscode")]
		public PaymentTermsEnum? PaymentTerms
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("paymenttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("paymenttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["paymenttermscode"];
                return value == null ? (PaymentTermsEnum?) null : (PaymentTermsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PaymentTerms");
                if (value != null)
				    SetAttributeValue("paymenttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("paymenttermscode", value);
				OnPropertyChanged("PaymentTerms");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredAppointmentDayCode'.<br />
        /// Select the preferred day of the week for service appointments.
        /// </summary>
		[AttributeLogicalName("preferredappointmentdaycode")]
		public PreferredDayEnum? PreferredDay
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredappointmentdaycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredappointmentdaycode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredappointmentdaycode"];
                return value == null ? (PreferredDayEnum?) null : (PreferredDayEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredDay");
                if (value != null)
				    SetAttributeValue("preferredappointmentdaycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredappointmentdaycode", value);
				OnPropertyChanged("PreferredDay");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredAppointmentTimeCode'.<br />
        /// Select the preferred time of day for service appointments.
        /// </summary>
		[AttributeLogicalName("preferredappointmenttimecode")]
		public PreferredTimeEnum? PreferredTime
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredappointmenttimecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredappointmenttimecode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredappointmenttimecode"];
                return value == null ? (PreferredTimeEnum?) null : (PreferredTimeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredTime");
                if (value != null)
				    SetAttributeValue("preferredappointmenttimecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredappointmenttimecode", value);
				OnPropertyChanged("PreferredTime");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredContactMethodCode'.<br />
        /// Select the preferred method of contact.
        /// </summary>
		[AttributeLogicalName("preferredcontactmethodcode")]
		public PreferredMethodofContactEnum? PreferredMethodofContact
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredcontactmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredcontactmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredcontactmethodcode"];
                return value == null ? (PreferredMethodofContactEnum?) null : (PreferredMethodofContactEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredMethodofContact");
                if (value != null)
				    SetAttributeValue("preferredcontactmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredcontactmethodcode", value);
				OnPropertyChanged("PreferredMethodofContact");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredEquipmentId'.<br />
        /// Choose the account's preferred service facility or equipment to make sure services are scheduled correctly for the customer.
        /// </summary>
		[AttributeLogicalName("preferredequipmentid")]
		public Guid? PreferredFacilityEquipment
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("preferredequipmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredequipmentid"))
				    value = (EntityReference) backupAttributeCollection["preferredequipmentid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PreferredFacilityEquipment");
                if (value != null)
				    SetAttributeValue("preferredequipmentid", new EntityReference("equipment", value.Value));
                else
					SetAttributeValue("preferredequipmentid", value);
				OnPropertyChanged("PreferredFacilityEquipment");
			}
		}

        public string PreferredFacilityEquipmentName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("preferredequipmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredequipmentid"))
				    value = (EntityReference) backupAttributeCollection["preferredequipmentid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PreferredServiceId'.<br />
        /// Choose the account's preferred service for reference when you schedule service activities.
        /// </summary>
		[AttributeLogicalName("preferredserviceid")]
		public Guid? PreferredService
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("preferredserviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredserviceid"))
				    value = (EntityReference) backupAttributeCollection["preferredserviceid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PreferredService");
                if (value != null)
				    SetAttributeValue("preferredserviceid", new EntityReference("service", value.Value));
                else
					SetAttributeValue("preferredserviceid", value);
				OnPropertyChanged("PreferredService");
			}
		}

        public string PreferredServiceName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("preferredserviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredserviceid"))
				    value = (EntityReference) backupAttributeCollection["preferredserviceid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PreferredSystemUserId'.<br />
        /// Choose the preferred service representative for reference when you schedule service activities for the account.
        /// </summary>
		[AttributeLogicalName("preferredsystemuserid")]
		public Guid? PreferredUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("preferredsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["preferredsystemuserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PreferredUser");
                if (value != null)
				    SetAttributeValue("preferredsystemuserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("preferredsystemuserid", value);
				OnPropertyChanged("PreferredUser");
			}
		}

        public string PreferredUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("preferredsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["preferredsystemuserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PrimaryContactId'.<br />
        /// Choose the primary contact for the account to provide quick access to contact details.
        /// </summary>
		[AttributeLogicalName("primarycontactid")]
		public Guid? PrimaryContact
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("primarycontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primarycontactid"))
				    value = (EntityReference) backupAttributeCollection["primarycontactid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PrimaryContact");
                if (value != null)
				    SetAttributeValue("primarycontactid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("primarycontactid", value);
				OnPropertyChanged("PrimaryContact");
			}
		}

        public string PrimaryContactName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("primarycontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primarycontactid"))
				    value = (EntityReference) backupAttributeCollection["primarycontactid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=200] 
		/// 'PrimarySatoriId'.<br />
        /// Primary Satori ID for Account
        /// </summary>
		[AttributeLogicalName("primarysatoriid"), MaxLength(200)]
		public string PrimarySatoriID
		{
			get
			{
				var value = GetAttributeValue<string>("primarysatoriid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primarysatoriid"))
				    value = (string) backupAttributeCollection["primarysatoriid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrimarySatoriID");
					SetAttributeValue("primarysatoriid", value);
				OnPropertyChanged("PrimarySatoriID");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'PrimaryTwitterId'.<br />
        /// Primary Twitter ID for Account
        /// </summary>
		[AttributeLogicalName("primarytwitterid"), MaxLength(20)]
		public string PrimaryTwitterID
		{
			get
			{
				var value = GetAttributeValue<string>("primarytwitterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("primarytwitterid"))
				    value = (string) backupAttributeCollection["primarytwitterid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PrimaryTwitterID");
					SetAttributeValue("primarytwitterid", value);
				OnPropertyChanged("PrimaryTwitterID");
			}
		}

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'Revenue'.<br />
        /// Type the annual revenue for the account, used as an indicator in financial performance analysis.
        /// </summary>
		[AttributeLogicalName("revenue"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? AnnualRevenue
		{
			get
			{
				var value = GetAttributeValue<Money>("revenue");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("revenue"))
				    value = (Money) backupAttributeCollection["revenue"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("AnnualRevenue");
                if (value != null)
				    SetAttributeValue("revenue", new Money(value.Value));
                else
					SetAttributeValue("revenue", value);
				OnPropertyChanged("AnnualRevenue");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'Revenue_Base'.<br />
        /// Shows the annual revenue converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.
        /// </summary>
		[AttributeLogicalName("revenue_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? AnnualRevenueBase
		{
			get
			{
				var value = GetAttributeValue<Money>("revenue_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("revenue_base"))
				    value = (Money) backupAttributeCollection["revenue_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("AnnualRevenueBase");
                if (value != null)
				    SetAttributeValue("revenue_base", new Money(value.Value));
                else
					SetAttributeValue("revenue_base", value);
				OnPropertyChanged("AnnualRevenueBase");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'SharesOutstanding'.<br />
        /// Type the number of shares available to the public for the account. This number is used as an indicator in financial performance analysis.
        /// </summary>
		[AttributeLogicalName("sharesoutstanding"), InRange("0", "1000000000", typeof(int))]
		public int? SharesOutstanding
		{
			get
			{
				var value = GetAttributeValue<int?>("sharesoutstanding");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sharesoutstanding"))
				    value = (int?) backupAttributeCollection["sharesoutstanding"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SharesOutstanding");
					SetAttributeValue("sharesoutstanding", value);
				OnPropertyChanged("SharesOutstanding");
			}
		}

        /// <summary>
        ///  
		/// 'ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to the account's address to designate the preferred carrier or other delivery option.
        /// </summary>
		[AttributeLogicalName("shippingmethodcode")]
		public ShippingMethodEnum? ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["shippingmethodcode"];
                return value == null ? (ShippingMethodEnum?) null : (ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ShippingMethod");
                if (value != null)
				    SetAttributeValue("shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("shippingmethodcode", value);
				OnPropertyChanged("ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'SIC'.<br />
        /// Type the Standard Industrial Classification (SIC) code that indicates the account's primary industry of business, for use in marketing segmentation and demographic analysis.
        /// </summary>
		[AttributeLogicalName("sic"), MaxLength(20)]
		public string SICCode
		{
			get
			{
				var value = GetAttributeValue<string>("sic");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("sic"))
				    value = (string) backupAttributeCollection["sic"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SICCode");
					SetAttributeValue("sic", value);
				OnPropertyChanged("SICCode");
			}
		}

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the Account record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLA
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLA");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLA");
			}
		}

        public string SLAName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this case. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? LastSLAapplied
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LastSLAapplied");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("LastSLAapplied");
			}
		}

        public string LastSLAappliedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the account is active or inactive. Inactive accounts are read-only and can't be edited unless they are reactivated.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the account's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'StockExchange'.<br />
        /// Type the stock exchange at which the account is listed to track their stock and financial performance of the company.
        /// </summary>
		[AttributeLogicalName("stockexchange"), MaxLength(20)]
		public string StockExchange
		{
			get
			{
				var value = GetAttributeValue<string>("stockexchange");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stockexchange"))
				    value = (string) backupAttributeCollection["stockexchange"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StockExchange");
					SetAttributeValue("stockexchange", value);
				OnPropertyChanged("StockExchange");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Telephone1'.<br />
        /// Type the main phone number for this account.
        /// </summary>
		[AttributeLogicalName("telephone1"), MaxLength(50)]
		public string MainPhone
		{
			get
			{
				var value = GetAttributeValue<string>("telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("telephone1"))
				    value = (string) backupAttributeCollection["telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MainPhone");
					SetAttributeValue("telephone1", value);
				OnPropertyChanged("MainPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Telephone2'.<br />
        /// Type a second phone number for this account.
        /// </summary>
		[AttributeLogicalName("telephone2"), MaxLength(50)]
		public string OtherPhone
		{
			get
			{
				var value = GetAttributeValue<string>("telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("telephone2"))
				    value = (string) backupAttributeCollection["telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OtherPhone");
					SetAttributeValue("telephone2", value);
				OnPropertyChanged("OtherPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Telephone3'.<br />
        /// Type a third phone number for this account.
        /// </summary>
		[AttributeLogicalName("telephone3"), MaxLength(50)]
		public string Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("telephone3"))
				    value = (string) backupAttributeCollection["telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Telephone3");
					SetAttributeValue("telephone3", value);
				OnPropertyChanged("Telephone3");
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryCode'.<br />
        /// Select a region or territory for the account for use in segmentation and analysis.
        /// </summary>
		[AttributeLogicalName("territorycode")]
		public TerritoryCodeEnum? TerritoryCode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("territorycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territorycode"))
				    value = (OptionSetValue) backupAttributeCollection["territorycode"];
                return value == null ? (TerritoryCodeEnum?) null : (TerritoryCodeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("TerritoryCode");
                if (value != null)
				    SetAttributeValue("territorycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("territorycode", value);
				OnPropertyChanged("TerritoryCode");
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryId'.<br />
        /// Choose the sales region or territory for the account to make sure the account is assigned to the correct representative and for use in segmentation and analysis.
        /// </summary>
		[AttributeLogicalName("territoryid")]
		public Guid? Territory
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Territory");
                if (value != null)
				    SetAttributeValue("territoryid", new EntityReference("territory", value.Value));
                else
					SetAttributeValue("territoryid", value);
				OnPropertyChanged("Territory");
			}
		}

        public string TerritoryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("territoryid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territoryid"))
				    value = (EntityReference) backupAttributeCollection["territoryid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=10] 
		/// 'TickerSymbol'.<br />
        /// Type the stock exchange symbol for the account to track financial performance of the company. You can click the code entered in this field to access the latest trading information from MSN Money.
        /// </summary>
		[AttributeLogicalName("tickersymbol"), MaxLength(10)]
		public string TickerSymbol
		{
			get
			{
				var value = GetAttributeValue<string>("tickersymbol");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("tickersymbol"))
				    value = (string) backupAttributeCollection["tickersymbol"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TickerSymbol");
					SetAttributeValue("tickersymbol", value);
				OnPropertyChanged("TickerSymbol");
			}
		}

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TimeSpentByMeOnEmailAndMeetings'.<br />
        /// Total time spent for emails (read and write) and meetings by me in relation to account record.
        /// </summary>
		[AttributeLogicalName("timespentbymeonemailandmeetings"), MaxLength(1250)]
		public string TimeSpentbyme
		{
			get
			{
				var value = GetAttributeValue<string>("timespentbymeonemailandmeetings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timespentbymeonemailandmeetings"))
				    value = (string) backupAttributeCollection["timespentbymeonemailandmeetings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeSpentbyme");
					SetAttributeValue("timespentbymeonemailandmeetings", value);
				OnPropertyChanged("TimeSpentbyme");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Choose the local currency for the record to make sure budgets are reported in the correct currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the account.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'WebSiteURL'.<br />
        /// Type the account's website URL to get quick details about the company profile.
        /// </summary>
		[AttributeLogicalName("websiteurl"), MaxLength(200)]
		public string Website
		{
			get
			{
				var value = GetAttributeValue<string>("websiteurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("websiteurl"))
				    value = (string) backupAttributeCollection["websiteurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Website");
					SetAttributeValue("websiteurl", value);
				OnPropertyChanged("Website");
			}
		}

        /// <summary>
        /// [MaximumLength=160] 
		/// 'YomiName'.<br />
        /// Type the phonetic spelling of the company name, if specified in Japanese, to make sure the name is pronounced correctly in phone calls and other communications.
        /// </summary>
		[AttributeLogicalName("yominame"), MaxLength(160)]
		public string YomiAccountName
		{
			get
			{
				var value = GetAttributeValue<string>("yominame");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yominame"))
				    value = (string) backupAttributeCollection["yominame"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiAccountName");
					SetAttributeValue("yominame", value);
				OnPropertyChanged("YomiAccountName");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'account_activity_parties'
		/// </summary>
		[RelationshipSchemaName("account_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("account_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("account_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		/// <summary>
		/// 1:N, 'account_master_account'
		/// </summary>
		[RelationshipSchemaName("account_master_account", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Account[] AccountsOfMasterID
		{
			get
			{
				var enumerable = GetRelatedEntities<Account>("account_master_account", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("AccountsOfMasterID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Account>("account_master_account", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("AccountsOfMasterID");
			}
		}
		
		/// <summary>
		/// 1:N, 'account_parent_account'
		/// </summary>
		[RelationshipSchemaName("account_parent_account", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Account[] AccountsOfParentAccount
		{
			get
			{
				var enumerable = GetRelatedEntities<Account>("account_parent_account", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("AccountsOfParentAccount");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Account>("account_parent_account", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("AccountsOfParentAccount");
			}
		}
		
		/// <summary>
		/// 1:N, 'contact_customer_accounts'
		/// </summary>
		[RelationshipSchemaName("contact_customer_accounts")]
		public Contact[] ContactsOfCompanyName
		{
			get
			{
				var enumerable = GetRelatedEntities<Contact>("contact_customer_accounts", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ContactsOfCompanyName");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Contact>("contact_customer_accounts", null, value);
				OnPropertyChanged("ContactsOfCompanyName");
			}
		}
		
		/// <summary>
		/// N:1, 'account_master_account'
		/// </summary>
		[RelationshipSchemaName("account_master_account", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("masterid")]
		public Account AccountAsMasterID
		{
			get
			{
				return GetRelatedEntity<Account>("account_master_account", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("AccountAsMasterID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Account>("account_master_account", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("AccountAsMasterID");
			}
		}
		
		/// <summary>
		/// N:1, 'account_parent_account'
		/// </summary>
		[RelationshipSchemaName("account_parent_account", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentaccountid")]
		public Account AccountAsParentAccount
		{
			get
			{
				return GetRelatedEntity<Account>("account_parent_account", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("AccountAsParentAccount");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Account>("account_parent_account", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("AccountAsParentAccount");
			}
		}
		
		/// <summary>
		/// N:1, 'account_primary_contact'
		/// </summary>
		[RelationshipSchemaName("account_primary_contact"), AttributeLogicalName("primarycontactid")]
		public Contact ContactAsPrimaryContact
		{
			get
			{
				return GetRelatedEntity<Contact>("account_primary_contact", null);
			}
			set
			{
				OnPropertyChanging("ContactAsPrimaryContact");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Contact>("account_primary_contact", null, value);
				OnPropertyChanged("ContactAsPrimaryContact");
			}
		}
		
		public static class RelationNames {
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
			public static RelationName AccountsOfMasterID = new RelationName("AccountsOfMasterID");
			public static RelationName AccountsOfParentAccount = new RelationName("AccountsOfParentAccount");
			public static RelationName ContactsOfCompanyName = new RelationName("ContactsOfCompanyName");
			public static RelationName AccountAsMasterID = new RelationName("AccountAsMasterID");
			public static RelationName AccountAsParentAccount = new RelationName("AccountAsParentAccount");
			public static RelationName ContactAsPrimaryContact = new RelationName("ContactAsPrimaryContact");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "account", "partyid", "accountid", "accountid", "accountid", "account_activity_parties", typeof (ActivityParty[]) };
			relationProperties["AccountsOfMasterID"] = new object[] { "AccountsOfMasterID", "account", "account", "masterid", "accountid", "accountid", "accountid", "account_master_account", typeof (Account[]) };
			relationProperties["AccountsOfParentAccount"] = new object[] { "AccountsOfParentAccount", "account", "account", "parentaccountid", "accountid", "accountid", "accountid", "account_parent_account", typeof (Account[]) };
			relationProperties["ContactsOfCompanyName"] = new object[] { "ContactsOfCompanyName", "contact", "account", "parentcustomerid", "accountid", "accountid", "accountid", "contact_customer_accounts", typeof (Contact[]) };
			relationProperties["AccountAsMasterID"] = new object[] { "AccountAsMasterID", "account", "account", "accountid", "masterid", "accountid", "accountid", "account_master_account", typeof (Account) };
			relationProperties["AccountAsParentAccount"] = new object[] { "AccountAsParentAccount", "account", "account", "accountid", "parentaccountid", "accountid", "accountid", "account_parent_account", typeof (Account) };
			relationProperties["ContactAsPrimaryContact"] = new object[] { "ContactAsPrimaryContact", "contact", "account", "contactid", "primarycontactid", "accountid", "accountid", "account_primary_contact", typeof (Contact) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Account(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["accountid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region Category

		public enum CategoryEnum
		{
			[EnumMember]PreferredCustomer = 1,
			[EnumMember]Standard = 2,
		}

		#endregion
	
		#region Classification

		public enum ClassificationEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region AccountRating

		public enum AccountRatingEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address1AddressType

		public enum Address1AddressTypeEnum
		{
			[EnumMember]BillTo = 1,
			[EnumMember]ShipTo = 2,
			[EnumMember]Primary = 3,
			[EnumMember]Other = 4,
		}

		#endregion
	
		#region Address1FreightTerms

		public enum Address1FreightTermsEnum
		{
			[EnumMember]FOB = 1,
			[EnumMember]NoCharge = 2,
		}

		#endregion
	
		#region Address1ShippingMethod

		public enum Address1ShippingMethodEnum
		{
			[EnumMember]Airborne = 1,
			[EnumMember]DHL = 2,
			[EnumMember]FedEx = 3,
			[EnumMember]UPS = 4,
			[EnumMember]PostalMail = 5,
			[EnumMember]FullLoad = 6,
			[EnumMember]WillCall = 7,
		}

		#endregion
	
		#region Address2AddressType

		public enum Address2AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2FreightTerms

		public enum Address2FreightTermsEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2ShippingMethod

		public enum Address2ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region BusinessType

		public enum BusinessTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region CreditHold

		public enum CreditHoldEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CustomerSize

		public enum CustomerSizeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region RelationshipType

		public enum RelationshipTypeEnum
		{
			[EnumMember]Competitor = 1,
			[EnumMember]Consultant = 2,
			[EnumMember]Customer = 3,
			[EnumMember]Investor = 4,
			[EnumMember]Partner = 5,
			[EnumMember]Influencer = 6,
			[EnumMember]Press = 7,
			[EnumMember]Prospect = 8,
			[EnumMember]Reseller = 9,
			[EnumMember]Supplier = 10,
			[EnumMember]Vendor = 11,
			[EnumMember]Other = 12,
		}

		#endregion
	
		#region DonotallowBulkEmails

		public enum DonotallowBulkEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowBulkMails

		public enum DonotallowBulkMailsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowMails

		public enum DonotallowMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region SendMarketingMaterials

		public enum SendMarketingMaterialsEnum
		{
			[EnumMember]DoNotSend = 1,
			[EnumMember]Send = 0,
		}

		#endregion
	
		#region FollowEmailActivity

		public enum FollowEmailActivityEnum
		{
			[EnumMember]Allow = 1,
			[EnumMember]DoNotAllow = 0,
		}

		#endregion
	
		#region Industry

		public enum IndustryEnum
		{
			[EnumMember]Accounting = 1,
			[EnumMember]AgricultureandNonpetrolNaturalResourceExtraction = 2,
			[EnumMember]BroadcastingPrintingandPublishing = 3,
			[EnumMember]Brokers = 4,
			[EnumMember]BuildingSupplyRetail = 5,
			[EnumMember]BusinessServices = 6,
			[EnumMember]Consulting = 7,
			[EnumMember]ConsumerServices = 8,
			[EnumMember]DesignDirectionandCreativeManagement = 9,
			[EnumMember]DistributorsDispatchersandProcessors = 10,
			[EnumMember]DoctorsOfficesandClinics = 11,
			[EnumMember]DurableManufacturing = 12,
			[EnumMember]EatingandDrinkingPlaces = 13,
			[EnumMember]EntertainmentRetail = 14,
			[EnumMember]EquipmentRentalandLeasing = 15,
			[EnumMember]Financial = 16,
			[EnumMember]FoodandTobaccoProcessing = 17,
			[EnumMember]InboundCapitalIntensiveProcessing = 18,
			[EnumMember]InboundRepairandServices = 19,
			[EnumMember]Insurance = 20,
			[EnumMember]LegalServices = 21,
			[EnumMember]NonDurableMerchandiseRetail = 22,
			[EnumMember]OutboundConsumerService = 23,
			[EnumMember]PetrochemicalExtractionandDistribution = 24,
			[EnumMember]ServiceRetail = 25,
			[EnumMember]SIGAffiliations = 26,
			[EnumMember]SocialServices = 27,
			[EnumMember]SpecialOutboundTradeContractors = 28,
			[EnumMember]SpecialtyRealty = 29,
			[EnumMember]Transportation = 30,
			[EnumMember]UtilityCreationandDistribution = 31,
			[EnumMember]VehicleRetail = 32,
			[EnumMember]Wholesale = 33,
		}

		#endregion
	
		#region IsPrivate

		public enum IsPrivateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region MarketingOnly

		public enum MarketingOnlyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Merged

		public enum MergedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Ownership

		public enum OwnershipEnum
		{
			[EnumMember]Public = 1,
			[EnumMember]Private = 2,
			[EnumMember]Subsidiary = 3,
			[EnumMember]Other = 4,
		}

		#endregion
	
		#region ParticipatesinWorkflow

		public enum ParticipatesinWorkflowEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PaymentTerms

		public enum PaymentTermsEnum
		{
			[EnumMember]Net30 = 1,
			[EnumMember]_210Net30 = 2,
			[EnumMember]Net45 = 3,
			[EnumMember]Net60 = 4,
		}

		#endregion
	
		#region PreferredDay

		public enum PreferredDayEnum
		{
			[EnumMember]Sunday = 0,
			[EnumMember]Monday = 1,
			[EnumMember]Tuesday = 2,
			[EnumMember]Wednesday = 3,
			[EnumMember]Thursday = 4,
			[EnumMember]Friday = 5,
			[EnumMember]Saturday = 6,
		}

		#endregion
	
		#region PreferredTime

		public enum PreferredTimeEnum
		{
			[EnumMember]Morning = 1,
			[EnumMember]Afternoon = 2,
			[EnumMember]Evening = 3,
		}

		#endregion
	
		#region PreferredMethodofContact

		public enum PreferredMethodofContactEnum
		{
			[EnumMember]Any = 1,
			[EnumMember]Email = 2,
			[EnumMember]Phone = 3,
			[EnumMember]Fax = 4,
			[EnumMember]Mail = 5,
		}

		#endregion
	
		#region ShippingMethod

		public enum ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#region TerritoryCode

		public enum TerritoryCodeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region ActivityParty

	/// <summary>
	/// 'ActivityParty'.<br />
	/// Person or group associated with an activity. An activity can have multiple activity parties.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("activityparty")]
	public partial class ActivityParty : GeneratedEntity<ActivityParty.RelationName>
	{
		
		public ActivityParty() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Activity Party";
		public const string SchemaName = "ActivityParty";
		public const string EntityLogicalName = "activityparty";
		public const int EntityTypeCode = 135;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Metadata


		#endregion
	}

	#endregion

	#region Contact

	/// <summary>
	/// 'Contact'.<br />
	/// Person with whom a business unit has a relationship, such as customer, supplier, and colleague.
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("contact")]
	public partial class Contact : GeneratedEntity<Contact.RelationName>
	{
		
		public Contact() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Contact";
		public const string SchemaName = "Contact";
		public const string EntityLogicalName = "contact";
		public const int EntityTypeCode = 2;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("contactid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ContactId == null || ContactId == Guid.Empty) ? base.Id : ContactId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("contactid");
                    base.Id = value;
                } else {
				    ContactId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'AccountId'.<br />
        /// Unique identifier of the account with which the contact is associated.
        /// </summary>
		[AttributeLogicalName("accountid")]
		public Guid? Account
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("accountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountid"))
				    value = (EntityReference) backupAttributeCollection["accountid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Account");
                if (value != null)
				    SetAttributeValue("accountid", new EntityReference("account", value.Value));
                else
					SetAttributeValue("accountid", value);
				OnPropertyChanged("Account");
			}
		}

        public string AccountName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("accountid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountid"))
				    value = (EntityReference) backupAttributeCollection["accountid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'AccountRoleCode'.<br />
        /// Select the contact's role within the company or sales process, such as decision maker, employee, or influencer.
        /// </summary>
		[AttributeLogicalName("accountrolecode")]
		public RoleEnum? Role
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("accountrolecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("accountrolecode"))
				    value = (OptionSetValue) backupAttributeCollection["accountrolecode"];
                return value == null ? (RoleEnum?) null : (RoleEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Role");
                if (value != null)
				    SetAttributeValue("accountrolecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("accountrolecode", value);
				OnPropertyChanged("Role");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressId'.<br />
        /// Unique identifier for address 1.
        /// </summary>
		[AttributeLogicalName("address1_addressid")]
		public Guid? Address1ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address1_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addressid"))
				    value = (Guid?) backupAttributeCollection["address1_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1ID");
					SetAttributeValue("address1_addressid", value);
				OnPropertyChanged("Address1ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_AddressTypeCode'.<br />
        /// Select the primary address type.
        /// </summary>
		[AttributeLogicalName("address1_addresstypecode")]
		public Address1AddressTypeEnum? Address1AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_addresstypecode"];
                return value == null ? (Address1AddressTypeEnum?) null : (Address1AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1AddressType");
                if (value != null)
				    SetAttributeValue("address1_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_addresstypecode", value);
				OnPropertyChanged("Address1AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address1_City'.<br />
        /// Type the city for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_city"), MaxLength(80)]
		public string Address1City
		{
			get
			{
				var value = GetAttributeValue<string>("address1_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_city"))
				    value = (string) backupAttributeCollection["address1_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1City");
					SetAttributeValue("address1_city", value);
				OnPropertyChanged("Address1City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address1_Composite'.<br />
        /// Shows the complete primary address.
        /// </summary>
		[AttributeLogicalName("address1_composite"), MaxLength(1000)]
		public string Address1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_composite"))
				    value = (string) backupAttributeCollection["address1_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1");
					SetAttributeValue("address1_composite", value);
				OnPropertyChanged("Address1");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address1_Country'.<br />
        /// Type the country or region for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_country"), MaxLength(80)]
		public string Address1CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address1_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_country"))
				    value = (string) backupAttributeCollection["address1_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1CountryRegion");
					SetAttributeValue("address1_country", value);
				OnPropertyChanged("Address1CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_County'.<br />
        /// Type the county for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_county"), MaxLength(50)]
		public string Address1County
		{
			get
			{
				var value = GetAttributeValue<string>("address1_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_county"))
				    value = (string) backupAttributeCollection["address1_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1County");
					SetAttributeValue("address1_county", value);
				OnPropertyChanged("Address1County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Fax'.<br />
        /// Type the fax number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_fax"), MaxLength(50)]
		public string Address1Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address1_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_fax"))
				    value = (string) backupAttributeCollection["address1_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Fax");
					SetAttributeValue("address1_fax", value);
				OnPropertyChanged("Address1Fax");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_FreightTermsCode'.<br />
        /// Select the freight terms for the primary address to make sure shipping orders are processed correctly.
        /// </summary>
		[AttributeLogicalName("address1_freighttermscode")]
		public Address1FreightTermsEnum? Address1FreightTerms
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_freighttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_freighttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_freighttermscode"];
                return value == null ? (Address1FreightTermsEnum?) null : (Address1FreightTermsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1FreightTerms");
                if (value != null)
				    SetAttributeValue("address1_freighttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_freighttermscode", value);
				OnPropertyChanged("Address1FreightTerms");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address1_Latitude'.<br />
        /// Type the latitude value for the primary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address1_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address1Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_latitude"))
				    value = (double?) backupAttributeCollection["address1_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Latitude");
					SetAttributeValue("address1_latitude", value);
				OnPropertyChanged("Address1Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address1_Line1'.<br />
        /// Type the first line of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_line1"), MaxLength(250)]
		public string Address1Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line1"))
				    value = (string) backupAttributeCollection["address1_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Street1");
					SetAttributeValue("address1_line1", value);
				OnPropertyChanged("Address1Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address1_Line2'.<br />
        /// Type the second line of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_line2"), MaxLength(250)]
		public string Address1Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line2"))
				    value = (string) backupAttributeCollection["address1_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Street2");
					SetAttributeValue("address1_line2", value);
				OnPropertyChanged("Address1Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address1_Line3'.<br />
        /// Type the third line of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_line3"), MaxLength(250)]
		public string Address1Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_line3"))
				    value = (string) backupAttributeCollection["address1_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Street3");
					SetAttributeValue("address1_line3", value);
				OnPropertyChanged("Address1Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address1_Longitude'.<br />
        /// Type the longitude value for the primary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address1_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address1Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address1_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_longitude"))
				    value = (double?) backupAttributeCollection["address1_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Longitude");
					SetAttributeValue("address1_longitude", value);
				OnPropertyChanged("Address1Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'Address1_Name'.<br />
        /// Type a descriptive name for the primary address, such as Corporate Headquarters.
        /// </summary>
		[AttributeLogicalName("address1_name"), MaxLength(200)]
		public string Address1Name
		{
			get
			{
				var value = GetAttributeValue<string>("address1_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_name"))
				    value = (string) backupAttributeCollection["address1_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Name");
					SetAttributeValue("address1_name", value);
				OnPropertyChanged("Address1Name");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address1_PostalCode'.<br />
        /// Type the ZIP Code or postal code for the primary address.
        /// </summary>
		[AttributeLogicalName("address1_postalcode"), MaxLength(20)]
		public string Address1ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postalcode"))
				    value = (string) backupAttributeCollection["address1_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1ZIPPostalCode");
					SetAttributeValue("address1_postalcode", value);
				OnPropertyChanged("Address1ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address1_PostOfficeBox'.<br />
        /// Type the post office box number of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_postofficebox"), MaxLength(20)]
		public string Address1PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address1_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_postofficebox"))
				    value = (string) backupAttributeCollection["address1_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1PostOfficeBox");
					SetAttributeValue("address1_postofficebox", value);
				OnPropertyChanged("Address1PostOfficeBox");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address1_PrimaryContactName'.<br />
        /// Type the name of the main contact at the account's primary address.
        /// </summary>
		[AttributeLogicalName("address1_primarycontactname"), MaxLength(100)]
		public string Address1PrimaryContactName
		{
			get
			{
				var value = GetAttributeValue<string>("address1_primarycontactname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_primarycontactname"))
				    value = (string) backupAttributeCollection["address1_primarycontactname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1PrimaryContactName");
					SetAttributeValue("address1_primarycontactname", value);
				OnPropertyChanged("Address1PrimaryContactName");
			}
		}

        /// <summary>
        ///  
		/// 'Address1_ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to this address.
        /// </summary>
		[AttributeLogicalName("address1_shippingmethodcode")]
		public Address1ShippingMethodEnum? Address1ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address1_shippingmethodcode"];
                return value == null ? (Address1ShippingMethodEnum?) null : (Address1ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address1ShippingMethod");
                if (value != null)
				    SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address1_shippingmethodcode", value);
				OnPropertyChanged("Address1ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_StateOrProvince'.<br />
        /// Type the state or province of the primary address.
        /// </summary>
		[AttributeLogicalName("address1_stateorprovince"), MaxLength(50)]
		public string Address1StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address1_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_stateorprovince"))
				    value = (string) backupAttributeCollection["address1_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1StateProvince");
					SetAttributeValue("address1_stateorprovince", value);
				OnPropertyChanged("Address1StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone1'.<br />
        /// Type the main phone number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_telephone1"), MaxLength(50)]
		public string Address1Phone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone1"))
				    value = (string) backupAttributeCollection["address1_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Phone");
					SetAttributeValue("address1_telephone1", value);
				OnPropertyChanged("Address1Phone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone2'.<br />
        /// Type a second phone number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_telephone2"), MaxLength(50)]
		public string Address1Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone2"))
				    value = (string) backupAttributeCollection["address1_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Telephone2");
					SetAttributeValue("address1_telephone2", value);
				OnPropertyChanged("Address1Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address1_Telephone3'.<br />
        /// Type a third phone number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address1_telephone3"), MaxLength(50)]
		public string Address1Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address1_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_telephone3"))
				    value = (string) backupAttributeCollection["address1_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1Telephone3");
					SetAttributeValue("address1_telephone3", value);
				OnPropertyChanged("Address1Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address1_UPSZone'.<br />
        /// Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
        /// </summary>
		[AttributeLogicalName("address1_upszone"), MaxLength(4)]
		public string Address1UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address1_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_upszone"))
				    value = (string) backupAttributeCollection["address1_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UPSZone");
					SetAttributeValue("address1_upszone", value);
				OnPropertyChanged("Address1UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address1_UTCOffset'.<br />
        /// Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
        /// </summary>
		[AttributeLogicalName("address1_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address1UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address1_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address1_utcoffset"))
				    value = (int?) backupAttributeCollection["address1_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address1UTCOffset");
					SetAttributeValue("address1_utcoffset", value);
				OnPropertyChanged("Address1UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressId'.<br />
        /// Unique identifier for address 2.
        /// </summary>
		[AttributeLogicalName("address2_addressid")]
		public Guid? Address2ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address2_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addressid"))
				    value = (Guid?) backupAttributeCollection["address2_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2ID");
					SetAttributeValue("address2_addressid", value);
				OnPropertyChanged("Address2ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_AddressTypeCode'.<br />
        /// Select the secondary address type.
        /// </summary>
		[AttributeLogicalName("address2_addresstypecode")]
		public Address2AddressTypeEnum? Address2AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_addresstypecode"];
                return value == null ? (Address2AddressTypeEnum?) null : (Address2AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2AddressType");
                if (value != null)
				    SetAttributeValue("address2_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_addresstypecode", value);
				OnPropertyChanged("Address2AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address2_City'.<br />
        /// Type the city for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_city"), MaxLength(80)]
		public string Address2City
		{
			get
			{
				var value = GetAttributeValue<string>("address2_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_city"))
				    value = (string) backupAttributeCollection["address2_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2City");
					SetAttributeValue("address2_city", value);
				OnPropertyChanged("Address2City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address2_Composite'.<br />
        /// Shows the complete secondary address.
        /// </summary>
		[AttributeLogicalName("address2_composite"), MaxLength(1000)]
		public string Address2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_composite"))
				    value = (string) backupAttributeCollection["address2_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2");
					SetAttributeValue("address2_composite", value);
				OnPropertyChanged("Address2");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address2_Country'.<br />
        /// Type the country or region for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_country"), MaxLength(80)]
		public string Address2CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address2_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_country"))
				    value = (string) backupAttributeCollection["address2_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2CountryRegion");
					SetAttributeValue("address2_country", value);
				OnPropertyChanged("Address2CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_County'.<br />
        /// Type the county for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_county"), MaxLength(50)]
		public string Address2County
		{
			get
			{
				var value = GetAttributeValue<string>("address2_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_county"))
				    value = (string) backupAttributeCollection["address2_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2County");
					SetAttributeValue("address2_county", value);
				OnPropertyChanged("Address2County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Fax'.<br />
        /// Type the fax number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_fax"), MaxLength(50)]
		public string Address2Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address2_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_fax"))
				    value = (string) backupAttributeCollection["address2_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Fax");
					SetAttributeValue("address2_fax", value);
				OnPropertyChanged("Address2Fax");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_FreightTermsCode'.<br />
        /// Select the freight terms for the secondary address to make sure shipping orders are processed correctly.
        /// </summary>
		[AttributeLogicalName("address2_freighttermscode")]
		public Address2FreightTermsEnum? Address2FreightTerms
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_freighttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_freighttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_freighttermscode"];
                return value == null ? (Address2FreightTermsEnum?) null : (Address2FreightTermsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2FreightTerms");
                if (value != null)
				    SetAttributeValue("address2_freighttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_freighttermscode", value);
				OnPropertyChanged("Address2FreightTerms");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address2_Latitude'.<br />
        /// Type the latitude value for the secondary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address2_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address2Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_latitude"))
				    value = (double?) backupAttributeCollection["address2_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Latitude");
					SetAttributeValue("address2_latitude", value);
				OnPropertyChanged("Address2Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address2_Line1'.<br />
        /// Type the first line of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_line1"), MaxLength(250)]
		public string Address2Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line1"))
				    value = (string) backupAttributeCollection["address2_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Street1");
					SetAttributeValue("address2_line1", value);
				OnPropertyChanged("Address2Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address2_Line2'.<br />
        /// Type the second line of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_line2"), MaxLength(250)]
		public string Address2Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line2"))
				    value = (string) backupAttributeCollection["address2_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Street2");
					SetAttributeValue("address2_line2", value);
				OnPropertyChanged("Address2Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address2_Line3'.<br />
        /// Type the third line of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_line3"), MaxLength(250)]
		public string Address2Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_line3"))
				    value = (string) backupAttributeCollection["address2_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Street3");
					SetAttributeValue("address2_line3", value);
				OnPropertyChanged("Address2Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address2_Longitude'.<br />
        /// Type the longitude value for the secondary address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address2_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address2Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address2_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_longitude"))
				    value = (double?) backupAttributeCollection["address2_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Longitude");
					SetAttributeValue("address2_longitude", value);
				OnPropertyChanged("Address2Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address2_Name'.<br />
        /// Type a descriptive name for the secondary address, such as Corporate Headquarters.
        /// </summary>
		[AttributeLogicalName("address2_name"), MaxLength(100)]
		public string Address2Name
		{
			get
			{
				var value = GetAttributeValue<string>("address2_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_name"))
				    value = (string) backupAttributeCollection["address2_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Name");
					SetAttributeValue("address2_name", value);
				OnPropertyChanged("Address2Name");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address2_PostalCode'.<br />
        /// Type the ZIP Code or postal code for the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_postalcode"), MaxLength(20)]
		public string Address2ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postalcode"))
				    value = (string) backupAttributeCollection["address2_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2ZIPPostalCode");
					SetAttributeValue("address2_postalcode", value);
				OnPropertyChanged("Address2ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address2_PostOfficeBox'.<br />
        /// Type the post office box number of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_postofficebox"), MaxLength(20)]
		public string Address2PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address2_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_postofficebox"))
				    value = (string) backupAttributeCollection["address2_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2PostOfficeBox");
					SetAttributeValue("address2_postofficebox", value);
				OnPropertyChanged("Address2PostOfficeBox");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address2_PrimaryContactName'.<br />
        /// Type the name of the main contact at the account's secondary address.
        /// </summary>
		[AttributeLogicalName("address2_primarycontactname"), MaxLength(100)]
		public string Address2PrimaryContactName
		{
			get
			{
				var value = GetAttributeValue<string>("address2_primarycontactname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_primarycontactname"))
				    value = (string) backupAttributeCollection["address2_primarycontactname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2PrimaryContactName");
					SetAttributeValue("address2_primarycontactname", value);
				OnPropertyChanged("Address2PrimaryContactName");
			}
		}

        /// <summary>
        ///  
		/// 'Address2_ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to this address.
        /// </summary>
		[AttributeLogicalName("address2_shippingmethodcode")]
		public Address2ShippingMethodEnum? Address2ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address2_shippingmethodcode"];
                return value == null ? (Address2ShippingMethodEnum?) null : (Address2ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address2ShippingMethod");
                if (value != null)
				    SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address2_shippingmethodcode", value);
				OnPropertyChanged("Address2ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_StateOrProvince'.<br />
        /// Type the state or province of the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_stateorprovince"), MaxLength(50)]
		public string Address2StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address2_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_stateorprovince"))
				    value = (string) backupAttributeCollection["address2_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2StateProvince");
					SetAttributeValue("address2_stateorprovince", value);
				OnPropertyChanged("Address2StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone1'.<br />
        /// Type the main phone number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_telephone1"), MaxLength(50)]
		public string Address2Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone1"))
				    value = (string) backupAttributeCollection["address2_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone1");
					SetAttributeValue("address2_telephone1", value);
				OnPropertyChanged("Address2Telephone1");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone2'.<br />
        /// Type a second phone number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_telephone2"), MaxLength(50)]
		public string Address2Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone2"))
				    value = (string) backupAttributeCollection["address2_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone2");
					SetAttributeValue("address2_telephone2", value);
				OnPropertyChanged("Address2Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address2_Telephone3'.<br />
        /// Type a third phone number associated with the secondary address.
        /// </summary>
		[AttributeLogicalName("address2_telephone3"), MaxLength(50)]
		public string Address2Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address2_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_telephone3"))
				    value = (string) backupAttributeCollection["address2_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2Telephone3");
					SetAttributeValue("address2_telephone3", value);
				OnPropertyChanged("Address2Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address2_UPSZone'.<br />
        /// Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
        /// </summary>
		[AttributeLogicalName("address2_upszone"), MaxLength(4)]
		public string Address2UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address2_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_upszone"))
				    value = (string) backupAttributeCollection["address2_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UPSZone");
					SetAttributeValue("address2_upszone", value);
				OnPropertyChanged("Address2UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address2_UTCOffset'.<br />
        /// Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
        /// </summary>
		[AttributeLogicalName("address2_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address2UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address2_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address2_utcoffset"))
				    value = (int?) backupAttributeCollection["address2_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address2UTCOffset");
					SetAttributeValue("address2_utcoffset", value);
				OnPropertyChanged("Address2UTCOffset");
			}
		}

        /// <summary>
        ///  
		/// 'Address3_AddressId'.<br />
        /// Unique identifier for address 3.
        /// </summary>
		[AttributeLogicalName("address3_addressid")]
		public Guid? Address3ID
		{
			get
			{
				var value = GetAttributeValue<Guid?>("address3_addressid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_addressid"))
				    value = (Guid?) backupAttributeCollection["address3_addressid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3ID");
					SetAttributeValue("address3_addressid", value);
				OnPropertyChanged("Address3ID");
			}
		}

        /// <summary>
        ///  
		/// 'Address3_AddressTypeCode'.<br />
        /// Select the third address type.
        /// </summary>
		[AttributeLogicalName("address3_addresstypecode")]
		public Address3AddressTypeEnum? Address3AddressType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address3_addresstypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_addresstypecode"))
				    value = (OptionSetValue) backupAttributeCollection["address3_addresstypecode"];
                return value == null ? (Address3AddressTypeEnum?) null : (Address3AddressTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address3AddressType");
                if (value != null)
				    SetAttributeValue("address3_addresstypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address3_addresstypecode", value);
				OnPropertyChanged("Address3AddressType");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address3_City'.<br />
        /// Type the city for the 3rd address.
        /// </summary>
		[AttributeLogicalName("address3_city"), MaxLength(80)]
		public string Address3City
		{
			get
			{
				var value = GetAttributeValue<string>("address3_city");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_city"))
				    value = (string) backupAttributeCollection["address3_city"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3City");
					SetAttributeValue("address3_city", value);
				OnPropertyChanged("Address3City");
			}
		}

        /// <summary>
        /// [MaximumLength=1000] 
		/// 'Address3_Composite'.<br />
        /// Shows the complete third address.
        /// </summary>
		[AttributeLogicalName("address3_composite"), MaxLength(1000)]
		public string Address3
		{
			get
			{
				var value = GetAttributeValue<string>("address3_composite");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_composite"))
				    value = (string) backupAttributeCollection["address3_composite"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3");
					SetAttributeValue("address3_composite", value);
				OnPropertyChanged("Address3");
			}
		}

        /// <summary>
        /// [MaximumLength=80] 
		/// 'Address3_Country'.<br />
        /// the country or region for the 3rd address.
        /// </summary>
		[AttributeLogicalName("address3_country"), MaxLength(80)]
		public string Address3CountryRegion
		{
			get
			{
				var value = GetAttributeValue<string>("address3_country");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_country"))
				    value = (string) backupAttributeCollection["address3_country"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3CountryRegion");
					SetAttributeValue("address3_country", value);
				OnPropertyChanged("Address3CountryRegion");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address3_County'.<br />
        /// Type the county for the third address.
        /// </summary>
		[AttributeLogicalName("address3_county"), MaxLength(50)]
		public string Address3County
		{
			get
			{
				var value = GetAttributeValue<string>("address3_county");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_county"))
				    value = (string) backupAttributeCollection["address3_county"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3County");
					SetAttributeValue("address3_county", value);
				OnPropertyChanged("Address3County");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address3_Fax'.<br />
        /// Type the fax number associated with the third address.
        /// </summary>
		[AttributeLogicalName("address3_fax"), MaxLength(50)]
		public string Address3Fax
		{
			get
			{
				var value = GetAttributeValue<string>("address3_fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_fax"))
				    value = (string) backupAttributeCollection["address3_fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Fax");
					SetAttributeValue("address3_fax", value);
				OnPropertyChanged("Address3Fax");
			}
		}

        /// <summary>
        ///  
		/// 'Address3_FreightTermsCode'.<br />
        /// Select the freight terms for the third address to make sure shipping orders are processed correctly.
        /// </summary>
		[AttributeLogicalName("address3_freighttermscode")]
		public Address3FreightTermsEnum? Address3FreightTerms
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address3_freighttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_freighttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["address3_freighttermscode"];
                return value == null ? (Address3FreightTermsEnum?) null : (Address3FreightTermsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address3FreightTerms");
                if (value != null)
				    SetAttributeValue("address3_freighttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address3_freighttermscode", value);
				OnPropertyChanged("Address3FreightTerms");
			}
		}

        /// <summary>
        /// [Range(-90, 90)] 
		/// 'Address3_Latitude'.<br />
        /// Type the latitude value for the third address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address3_latitude"), InRange("-90", "90", typeof(double))]
		public double? Address3Latitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address3_latitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_latitude"))
				    value = (double?) backupAttributeCollection["address3_latitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Latitude");
					SetAttributeValue("address3_latitude", value);
				OnPropertyChanged("Address3Latitude");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address3_Line1'.<br />
        /// the first line of the 3rd address.
        /// </summary>
		[AttributeLogicalName("address3_line1"), MaxLength(250)]
		public string Address3Street1
		{
			get
			{
				var value = GetAttributeValue<string>("address3_line1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_line1"))
				    value = (string) backupAttributeCollection["address3_line1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Street1");
					SetAttributeValue("address3_line1", value);
				OnPropertyChanged("Address3Street1");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address3_Line2'.<br />
        /// the second line of the 3rd address.
        /// </summary>
		[AttributeLogicalName("address3_line2"), MaxLength(250)]
		public string Address3Street2
		{
			get
			{
				var value = GetAttributeValue<string>("address3_line2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_line2"))
				    value = (string) backupAttributeCollection["address3_line2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Street2");
					SetAttributeValue("address3_line2", value);
				OnPropertyChanged("Address3Street2");
			}
		}

        /// <summary>
        /// [MaximumLength=250] 
		/// 'Address3_Line3'.<br />
        /// the third line of the 3rd address.
        /// </summary>
		[AttributeLogicalName("address3_line3"), MaxLength(250)]
		public string Address3Street3
		{
			get
			{
				var value = GetAttributeValue<string>("address3_line3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_line3"))
				    value = (string) backupAttributeCollection["address3_line3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Street3");
					SetAttributeValue("address3_line3", value);
				OnPropertyChanged("Address3Street3");
			}
		}

        /// <summary>
        /// [Range(-180, 180)] 
		/// 'Address3_Longitude'.<br />
        /// Type the longitude value for the third address for use in mapping and other applications.
        /// </summary>
		[AttributeLogicalName("address3_longitude"), InRange("-180", "180", typeof(double))]
		public double? Address3Longitude
		{
			get
			{
				var value = GetAttributeValue<double?>("address3_longitude");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_longitude"))
				    value = (double?) backupAttributeCollection["address3_longitude"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Longitude");
					SetAttributeValue("address3_longitude", value);
				OnPropertyChanged("Address3Longitude");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'Address3_Name'.<br />
        /// Type a descriptive name for the third address, such as Corporate Headquarters.
        /// </summary>
		[AttributeLogicalName("address3_name"), MaxLength(200)]
		public string Address3Name
		{
			get
			{
				var value = GetAttributeValue<string>("address3_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_name"))
				    value = (string) backupAttributeCollection["address3_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Name");
					SetAttributeValue("address3_name", value);
				OnPropertyChanged("Address3Name");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address3_PostalCode'.<br />
        /// the ZIP Code or postal code for the 3rd address.
        /// </summary>
		[AttributeLogicalName("address3_postalcode"), MaxLength(20)]
		public string Address3ZIPPostalCode
		{
			get
			{
				var value = GetAttributeValue<string>("address3_postalcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_postalcode"))
				    value = (string) backupAttributeCollection["address3_postalcode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3ZIPPostalCode");
					SetAttributeValue("address3_postalcode", value);
				OnPropertyChanged("Address3ZIPPostalCode");
			}
		}

        /// <summary>
        /// [MaximumLength=20] 
		/// 'Address3_PostOfficeBox'.<br />
        /// the post office box number of the 3rd address.
        /// </summary>
		[AttributeLogicalName("address3_postofficebox"), MaxLength(20)]
		public string Address3PostOfficeBox
		{
			get
			{
				var value = GetAttributeValue<string>("address3_postofficebox");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_postofficebox"))
				    value = (string) backupAttributeCollection["address3_postofficebox"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3PostOfficeBox");
					SetAttributeValue("address3_postofficebox", value);
				OnPropertyChanged("Address3PostOfficeBox");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Address3_PrimaryContactName'.<br />
        /// Type the name of the main contact at the account's third address.
        /// </summary>
		[AttributeLogicalName("address3_primarycontactname"), MaxLength(100)]
		public string Address3PrimaryContactName
		{
			get
			{
				var value = GetAttributeValue<string>("address3_primarycontactname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_primarycontactname"))
				    value = (string) backupAttributeCollection["address3_primarycontactname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3PrimaryContactName");
					SetAttributeValue("address3_primarycontactname", value);
				OnPropertyChanged("Address3PrimaryContactName");
			}
		}

        /// <summary>
        ///  
		/// 'Address3_ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to this address.
        /// </summary>
		[AttributeLogicalName("address3_shippingmethodcode")]
		public Address3ShippingMethodEnum? Address3ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("address3_shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["address3_shippingmethodcode"];
                return value == null ? (Address3ShippingMethodEnum?) null : (Address3ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Address3ShippingMethod");
                if (value != null)
				    SetAttributeValue("address3_shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("address3_shippingmethodcode", value);
				OnPropertyChanged("Address3ShippingMethod");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address3_StateOrProvince'.<br />
        /// the state or province of the third address.
        /// </summary>
		[AttributeLogicalName("address3_stateorprovince"), MaxLength(50)]
		public string Address3StateProvince
		{
			get
			{
				var value = GetAttributeValue<string>("address3_stateorprovince");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_stateorprovince"))
				    value = (string) backupAttributeCollection["address3_stateorprovince"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3StateProvince");
					SetAttributeValue("address3_stateorprovince", value);
				OnPropertyChanged("Address3StateProvince");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address3_Telephone1'.<br />
        /// Type the main phone number associated with the third address.
        /// </summary>
		[AttributeLogicalName("address3_telephone1"), MaxLength(50)]
		public string Address3Telephone1
		{
			get
			{
				var value = GetAttributeValue<string>("address3_telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_telephone1"))
				    value = (string) backupAttributeCollection["address3_telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Telephone1");
					SetAttributeValue("address3_telephone1", value);
				OnPropertyChanged("Address3Telephone1");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address3_Telephone2'.<br />
        /// Type a second phone number associated with the third address.
        /// </summary>
		[AttributeLogicalName("address3_telephone2"), MaxLength(50)]
		public string Address3Telephone2
		{
			get
			{
				var value = GetAttributeValue<string>("address3_telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_telephone2"))
				    value = (string) backupAttributeCollection["address3_telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Telephone2");
					SetAttributeValue("address3_telephone2", value);
				OnPropertyChanged("Address3Telephone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Address3_Telephone3'.<br />
        /// Type a third phone number associated with the primary address.
        /// </summary>
		[AttributeLogicalName("address3_telephone3"), MaxLength(50)]
		public string Address3Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("address3_telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_telephone3"))
				    value = (string) backupAttributeCollection["address3_telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3Telephone3");
					SetAttributeValue("address3_telephone3", value);
				OnPropertyChanged("Address3Telephone3");
			}
		}

        /// <summary>
        /// [MaximumLength=4] 
		/// 'Address3_UPSZone'.<br />
        /// Type the UPS zone of the third address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
        /// </summary>
		[AttributeLogicalName("address3_upszone"), MaxLength(4)]
		public string Address3UPSZone
		{
			get
			{
				var value = GetAttributeValue<string>("address3_upszone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_upszone"))
				    value = (string) backupAttributeCollection["address3_upszone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3UPSZone");
					SetAttributeValue("address3_upszone", value);
				OnPropertyChanged("Address3UPSZone");
			}
		}

        /// <summary>
        /// [Range(-1500, 1500)] 
		/// 'Address3_UTCOffset'.<br />
        /// Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
        /// </summary>
		[AttributeLogicalName("address3_utcoffset"), InRange("-1500", "1500", typeof(int))]
		public int? Address3UTCOffset
		{
			get
			{
				var value = GetAttributeValue<int?>("address3_utcoffset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("address3_utcoffset"))
				    value = (int?) backupAttributeCollection["address3_utcoffset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Address3UTCOffset");
					SetAttributeValue("address3_utcoffset", value);
				OnPropertyChanged("Address3UTCOffset");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'Aging30'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("aging30"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? Aging30
		{
			get
			{
				var value = GetAttributeValue<Money>("aging30");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging30"))
				    value = (Money) backupAttributeCollection["aging30"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging30");
                if (value != null)
				    SetAttributeValue("aging30", new Money(value.Value));
                else
					SetAttributeValue("aging30", value);
				OnPropertyChanged("Aging30");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'Aging30_Base'.<br />
        /// Shows the Aging 30 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.
        /// </summary>
		[AttributeLogicalName("aging30_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? Aging30Base
		{
			get
			{
				var value = GetAttributeValue<Money>("aging30_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging30_base"))
				    value = (Money) backupAttributeCollection["aging30_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging30Base");
                if (value != null)
				    SetAttributeValue("aging30_base", new Money(value.Value));
                else
					SetAttributeValue("aging30_base", value);
				OnPropertyChanged("Aging30Base");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'Aging60'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("aging60"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? Aging60
		{
			get
			{
				var value = GetAttributeValue<Money>("aging60");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging60"))
				    value = (Money) backupAttributeCollection["aging60"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging60");
                if (value != null)
				    SetAttributeValue("aging60", new Money(value.Value));
                else
					SetAttributeValue("aging60", value);
				OnPropertyChanged("Aging60");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'Aging60_Base'.<br />
        /// Shows the Aging 60 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.
        /// </summary>
		[AttributeLogicalName("aging60_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? Aging60Base
		{
			get
			{
				var value = GetAttributeValue<Money>("aging60_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging60_base"))
				    value = (Money) backupAttributeCollection["aging60_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging60Base");
                if (value != null)
				    SetAttributeValue("aging60_base", new Money(value.Value));
                else
					SetAttributeValue("aging60_base", value);
				OnPropertyChanged("Aging60Base");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'Aging90'.<br />
        /// For system use only.
        /// </summary>
		[AttributeLogicalName("aging90"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? Aging90
		{
			get
			{
				var value = GetAttributeValue<Money>("aging90");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging90"))
				    value = (Money) backupAttributeCollection["aging90"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging90");
                if (value != null)
				    SetAttributeValue("aging90", new Money(value.Value));
                else
					SetAttributeValue("aging90", value);
				OnPropertyChanged("Aging90");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'Aging90_Base'.<br />
        /// Shows the Aging 90 field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.
        /// </summary>
		[AttributeLogicalName("aging90_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? Aging90Base
		{
			get
			{
				var value = GetAttributeValue<Money>("aging90_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("aging90_base"))
				    value = (Money) backupAttributeCollection["aging90_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("Aging90Base");
                if (value != null)
				    SetAttributeValue("aging90_base", new Money(value.Value));
                else
					SetAttributeValue("aging90_base", value);
				OnPropertyChanged("Aging90Base");
			}
		}

        /// <summary>
        ///  
		/// 'Anniversary'.<br />
        /// Enter the date of the contact's wedding or service anniversary for use in customer gift programs or other communications.
        /// </summary>
		[AttributeLogicalName("anniversary")]
		public DateTime? Anniversary
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("anniversary");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("anniversary"))
				    value = (DateTime?) backupAttributeCollection["anniversary"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Anniversary");
					SetAttributeValue("anniversary", value);
				OnPropertyChanged("Anniversary");
			}
		}

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'AnnualIncome'.<br />
        /// Type the contact's annual income for use in profiling and financial analysis.
        /// </summary>
		[AttributeLogicalName("annualincome"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? AnnualIncome
		{
			get
			{
				var value = GetAttributeValue<Money>("annualincome");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("annualincome"))
				    value = (Money) backupAttributeCollection["annualincome"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("AnnualIncome");
                if (value != null)
				    SetAttributeValue("annualincome", new Money(value.Value));
                else
					SetAttributeValue("annualincome", value);
				OnPropertyChanged("AnnualIncome");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'AnnualIncome_Base'.<br />
        /// Shows the Annual Income field converted to the system's default base currency. The calculations use the exchange rate specified in the Currencies area.
        /// </summary>
		[AttributeLogicalName("annualincome_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? AnnualIncomeBase
		{
			get
			{
				var value = GetAttributeValue<Money>("annualincome_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("annualincome_base"))
				    value = (Money) backupAttributeCollection["annualincome_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("AnnualIncomeBase");
                if (value != null)
				    SetAttributeValue("annualincome_base", new Money(value.Value));
                else
					SetAttributeValue("annualincome_base", value);
				OnPropertyChanged("AnnualIncomeBase");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'AssistantName'.<br />
        /// Type the name of the contact's assistant.
        /// </summary>
		[AttributeLogicalName("assistantname"), MaxLength(100)]
		public string Assistant
		{
			get
			{
				var value = GetAttributeValue<string>("assistantname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("assistantname"))
				    value = (string) backupAttributeCollection["assistantname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Assistant");
					SetAttributeValue("assistantname", value);
				OnPropertyChanged("Assistant");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'AssistantPhone'.<br />
        /// Type the phone number for the contact's assistant.
        /// </summary>
		[AttributeLogicalName("assistantphone"), MaxLength(50)]
		public string AssistantPhone
		{
			get
			{
				var value = GetAttributeValue<string>("assistantphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("assistantphone"))
				    value = (string) backupAttributeCollection["assistantphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("AssistantPhone");
					SetAttributeValue("assistantphone", value);
				OnPropertyChanged("AssistantPhone");
			}
		}

        /// <summary>
        ///  
		/// 'BirthDate'.<br />
        /// Enter the contact's birthday for use in customer gift programs or other communications.
        /// </summary>
		[AttributeLogicalName("birthdate")]
		public DateTime? Birthday
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("birthdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("birthdate"))
				    value = (DateTime?) backupAttributeCollection["birthdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Birthday");
					SetAttributeValue("birthdate", value);
				OnPropertyChanged("Birthday");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Business2'.<br />
        /// Type a second business phone number for this contact.
        /// </summary>
		[AttributeLogicalName("business2"), MaxLength(50)]
		public string BusinessPhone2
		{
			get
			{
				var value = GetAttributeValue<string>("business2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("business2"))
				    value = (string) backupAttributeCollection["business2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BusinessPhone2");
					SetAttributeValue("business2", value);
				OnPropertyChanged("BusinessPhone2");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Callback'.<br />
        /// Type a callback phone number for this contact.
        /// </summary>
		[AttributeLogicalName("callback"), MaxLength(50)]
		public string CallbackNumber
		{
			get
			{
				var value = GetAttributeValue<string>("callback");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("callback"))
				    value = (string) backupAttributeCollection["callback"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CallbackNumber");
					SetAttributeValue("callback", value);
				OnPropertyChanged("CallbackNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=255] 
		/// 'ChildrensNames'.<br />
        /// Type the names of the contact's children for reference in communications and client programs.
        /// </summary>
		[AttributeLogicalName("childrensnames"), MaxLength(255)]
		public string ChildrensNames
		{
			get
			{
				var value = GetAttributeValue<string>("childrensnames");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("childrensnames"))
				    value = (string) backupAttributeCollection["childrensnames"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ChildrensNames");
					SetAttributeValue("childrensnames", value);
				OnPropertyChanged("ChildrensNames");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Company'.<br />
        /// Type the company phone of the contact.
        /// </summary>
		[AttributeLogicalName("company"), MaxLength(50)]
		public string CompanyPhone
		{
			get
			{
				var value = GetAttributeValue<string>("company");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("company"))
				    value = (string) backupAttributeCollection["company"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CompanyPhone");
					SetAttributeValue("company", value);
				OnPropertyChanged("CompanyPhone");
			}
		}

        /// <summary>
        ///  
		/// 'ContactId'.<br />
        /// Unique identifier of the contact.
        /// </summary>
		[AttributeLogicalName("contactid")]
		public Guid? ContactId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("contactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("contactid"))
				    value = (Guid?) backupAttributeCollection["contactid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ContactId");
                if (value != null)
					SetAttributeValue("contactid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ContactId");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Shows who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedByExternalParty'.<br />
        /// Shows the external party who created the record.
        /// </summary>
		[AttributeLogicalName("createdbyexternalparty")]
		public Guid? CreatedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["createdbyexternalparty"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByExternalParty");
                if (value != null)
				    SetAttributeValue("createdbyexternalparty", new EntityReference("externalparty", value.Value));
                else
					SetAttributeValue("createdbyexternalparty", value);
				OnPropertyChanged("CreatedByExternalParty");
			}
		}

        public string CreatedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["createdbyexternalparty"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Shows who created the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(0, 100000000000000)] 
		/// 'CreditLimit'.<br />
        /// Type the credit limit of the contact for reference when you address invoice and accounting issues with the customer.
        /// </summary>
		[AttributeLogicalName("creditlimit"), InRange("0", "100000000000000", typeof(decimal))]
		public decimal? CreditLimit
		{
			get
			{
				var value = GetAttributeValue<Money>("creditlimit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("creditlimit"))
				    value = (Money) backupAttributeCollection["creditlimit"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("CreditLimit");
                if (value != null)
				    SetAttributeValue("creditlimit", new Money(value.Value));
                else
					SetAttributeValue("creditlimit", value);
				OnPropertyChanged("CreditLimit");
			}
		}

        /// <summary>
        /// [Range(-922337203685477, 922337203685477)] 
		/// 'CreditLimit_Base'.<br />
        /// Shows the Credit Limit field converted to the system's default base currency for reporting purposes. The calculations use the exchange rate specified in the Currencies area.
        /// </summary>
		[AttributeLogicalName("creditlimit_base"), InRange("-922337203685477", "922337203685477", typeof(decimal))]
		public decimal? CreditLimitBase
		{
			get
			{
				var value = GetAttributeValue<Money>("creditlimit_base");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("creditlimit_base"))
				    value = (Money) backupAttributeCollection["creditlimit_base"];
                return value == null ? (decimal?) null : value.Value;
			}
			set
			{
				OnPropertyChanging("CreditLimitBase");
                if (value != null)
				    SetAttributeValue("creditlimit_base", new Money(value.Value));
                else
					SetAttributeValue("creditlimit_base", value);
				OnPropertyChanged("CreditLimitBase");
			}
		}

        /// <summary>
        ///  
		/// 'CreditOnHold'.<br />
        /// Select whether the contact is on a credit hold, for reference when addressing invoice and accounting issues.
        /// </summary>
		[AttributeLogicalName("creditonhold")]
		public bool? CreditHold
		{
			get
			{
				var value = GetAttributeValue<bool?>("creditonhold");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("creditonhold"))
				    value = (bool?) backupAttributeCollection["creditonhold"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreditHold");
					SetAttributeValue("creditonhold", value);
				OnPropertyChanged("CreditHold");
			}
		}

        /// <summary>
        ///  
		/// 'CustomerSizeCode'.<br />
        /// Select the size of the contact's company for segmentation and reporting purposes.
        /// </summary>
		[AttributeLogicalName("customersizecode")]
		public CustomerSizeEnum? CustomerSize
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("customersizecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customersizecode"))
				    value = (OptionSetValue) backupAttributeCollection["customersizecode"];
                return value == null ? (CustomerSizeEnum?) null : (CustomerSizeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("CustomerSize");
                if (value != null)
				    SetAttributeValue("customersizecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("customersizecode", value);
				OnPropertyChanged("CustomerSize");
			}
		}

        /// <summary>
        ///  
		/// 'CustomerTypeCode'.<br />
        /// Select the category that best describes the relationship between the contact and your organization.
        /// </summary>
		[AttributeLogicalName("customertypecode")]
		public RelationshipTypeEnum? RelationshipType
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("customertypecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("customertypecode"))
				    value = (OptionSetValue) backupAttributeCollection["customertypecode"];
                return value == null ? (RelationshipTypeEnum?) null : (RelationshipTypeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("RelationshipType");
                if (value != null)
				    SetAttributeValue("customertypecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("customertypecode", value);
				OnPropertyChanged("RelationshipType");
			}
		}

        /// <summary>
        ///  
		/// 'DefaultPriceLevelId'.<br />
        /// Choose the default price list associated with the contact to make sure the correct product prices for this customer are applied in sales opportunities, quotes, and orders.
        /// </summary>
		[AttributeLogicalName("defaultpricelevelid")]
		public Guid? PriceList
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("defaultpricelevelid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultpricelevelid"))
				    value = (EntityReference) backupAttributeCollection["defaultpricelevelid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PriceList");
                if (value != null)
				    SetAttributeValue("defaultpricelevelid", new EntityReference("pricelevel", value.Value));
                else
					SetAttributeValue("defaultpricelevelid", value);
				OnPropertyChanged("PriceList");
			}
		}

        public string PriceListName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("defaultpricelevelid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("defaultpricelevelid"))
				    value = (EntityReference) backupAttributeCollection["defaultpricelevelid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Department'.<br />
        /// Type the department or business unit where the contact works in the parent company or business.
        /// </summary>
		[AttributeLogicalName("department"), MaxLength(100)]
		public string Department
		{
			get
			{
				var value = GetAttributeValue<string>("department");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("department"))
				    value = (string) backupAttributeCollection["department"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Department");
					SetAttributeValue("department", value);
				OnPropertyChanged("Department");
			}
		}

        /// <summary>
        /// [MaximumLength=2000] 
		/// 'Description'.<br />
        /// Type additional information to describe the contact, such as an excerpt from the company's website.
        /// </summary>
		[AttributeLogicalName("description"), MaxLength(2000)]
		public string Description
		{
			get
			{
				var value = GetAttributeValue<string>("description");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("description"))
				    value = (string) backupAttributeCollection["description"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Description");
					SetAttributeValue("description", value);
				OnPropertyChanged("Description");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotBulkEMail'.<br />
        /// Select whether the contact accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the email.
        /// </summary>
		[AttributeLogicalName("donotbulkemail")]
		public bool? DonotallowBulkEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotbulkemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotbulkemail"))
				    value = (bool?) backupAttributeCollection["donotbulkemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowBulkEmails");
					SetAttributeValue("donotbulkemail", value);
				OnPropertyChanged("DonotallowBulkEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotBulkPostalMail'.<br />
        /// Select whether the contact accepts bulk postal mail sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the contact can be added to marketing lists, but will be excluded from the letters.
        /// </summary>
		[AttributeLogicalName("donotbulkpostalmail")]
		public bool? DonotallowBulkMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotbulkpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotbulkpostalmail"))
				    value = (bool?) backupAttributeCollection["donotbulkpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowBulkMails");
					SetAttributeValue("donotbulkpostalmail", value);
				OnPropertyChanged("DonotallowBulkMails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotEMail'.<br />
        /// Select whether the contact allows direct email sent from Microsoft Dynamics 365. If Do Not Allow is selected, Microsoft Dynamics 365 will not send the email.
        /// </summary>
		[AttributeLogicalName("donotemail")]
		public bool? DonotallowEmails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotemail"))
				    value = (bool?) backupAttributeCollection["donotemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowEmails");
					SetAttributeValue("donotemail", value);
				OnPropertyChanged("DonotallowEmails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotFax'.<br />
        /// Select whether the contact allows faxes. If Do Not Allow is selected, the contact will be excluded from any fax activities distributed in marketing campaigns.
        /// </summary>
		[AttributeLogicalName("donotfax")]
		public bool? DonotallowFaxes
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotfax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotfax"))
				    value = (bool?) backupAttributeCollection["donotfax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowFaxes");
					SetAttributeValue("donotfax", value);
				OnPropertyChanged("DonotallowFaxes");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPhone'.<br />
        /// Select whether the contact accepts phone calls. If Do Not Allow is selected, the contact will be excluded from any phone call activities distributed in marketing campaigns.
        /// </summary>
		[AttributeLogicalName("donotphone")]
		public bool? DonotallowPhoneCalls
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotphone"))
				    value = (bool?) backupAttributeCollection["donotphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowPhoneCalls");
					SetAttributeValue("donotphone", value);
				OnPropertyChanged("DonotallowPhoneCalls");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotPostalMail'.<br />
        /// Select whether the contact allows direct mail. If Do Not Allow is selected, the contact will be excluded from letter activities distributed in marketing campaigns.
        /// </summary>
		[AttributeLogicalName("donotpostalmail")]
		public bool? DonotallowMails
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotpostalmail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotpostalmail"))
				    value = (bool?) backupAttributeCollection["donotpostalmail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DonotallowMails");
					SetAttributeValue("donotpostalmail", value);
				OnPropertyChanged("DonotallowMails");
			}
		}

        /// <summary>
        ///  
		/// 'DoNotSendMM'.<br />
        /// Select whether the contact accepts marketing materials, such as brochures or catalogs. Contacts that opt out can be excluded from marketing initiatives.
        /// </summary>
		[AttributeLogicalName("donotsendmm")]
		public bool? SendMarketingMaterials
		{
			get
			{
				var value = GetAttributeValue<bool?>("donotsendmm");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("donotsendmm"))
				    value = (bool?) backupAttributeCollection["donotsendmm"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SendMarketingMaterials");
					SetAttributeValue("donotsendmm", value);
				OnPropertyChanged("SendMarketingMaterials");
			}
		}

        /// <summary>
        ///  
		/// 'EducationCode'.<br />
        /// Select the contact's highest level of education for use in segmentation and analysis.
        /// </summary>
		[AttributeLogicalName("educationcode")]
		public EducationEnum? Education
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("educationcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("educationcode"))
				    value = (OptionSetValue) backupAttributeCollection["educationcode"];
                return value == null ? (EducationEnum?) null : (EducationEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Education");
                if (value != null)
				    SetAttributeValue("educationcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("educationcode", value);
				OnPropertyChanged("Education");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EMailAddress1'.<br />
        /// Type the primary email address for the contact.
        /// </summary>
		[AttributeLogicalName("emailaddress1"), MaxLength(100)]
		public string Email
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress1"))
				    value = (string) backupAttributeCollection["emailaddress1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Email");
					SetAttributeValue("emailaddress1", value);
				OnPropertyChanged("Email");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EMailAddress2'.<br />
        /// Type the secondary email address for the contact.
        /// </summary>
		[AttributeLogicalName("emailaddress2"), MaxLength(100)]
		public string EmailAddress2
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress2"))
				    value = (string) backupAttributeCollection["emailaddress2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddress2");
					SetAttributeValue("emailaddress2", value);
				OnPropertyChanged("EmailAddress2");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'EMailAddress3'.<br />
        /// Type an alternate email address for the contact.
        /// </summary>
		[AttributeLogicalName("emailaddress3"), MaxLength(100)]
		public string EmailAddress3
		{
			get
			{
				var value = GetAttributeValue<string>("emailaddress3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("emailaddress3"))
				    value = (string) backupAttributeCollection["emailaddress3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EmailAddress3");
					SetAttributeValue("emailaddress3", value);
				OnPropertyChanged("EmailAddress3");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'EmployeeId'.<br />
        /// Type the employee ID or number for the contact for reference in orders, service cases, or other communications with the contact's organization.
        /// </summary>
		[AttributeLogicalName("employeeid"), MaxLength(50)]
		public string Employee
		{
			get
			{
				var value = GetAttributeValue<string>("employeeid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("employeeid"))
				    value = (string) backupAttributeCollection["employeeid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Employee");
					SetAttributeValue("employeeid", value);
				OnPropertyChanged("Employee");
			}
		}

        /// <summary>
        ///  
		/// 'EntityImageId'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("entityimageid")]
		public Guid? EntityImageId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("entityimageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("entityimageid"))
				    value = (Guid?) backupAttributeCollection["entityimageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntityImageId");
					SetAttributeValue("entityimageid", value);
				OnPropertyChanged("EntityImageId");
			}
		}

        /// <summary>
        /// [Range(0.0000000001, 100000000000)] 
		/// 'ExchangeRate'.<br />
        /// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
        /// </summary>
		[AttributeLogicalName("exchangerate"), InRange("0.0000000001", "100000000000", typeof(decimal))]
		public decimal? ExchangeRate
		{
			get
			{
				var value = GetAttributeValue<decimal?>("exchangerate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("exchangerate"))
				    value = (decimal?) backupAttributeCollection["exchangerate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExchangeRate");
					SetAttributeValue("exchangerate", value);
				OnPropertyChanged("ExchangeRate");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'ExternalUserIdentifier'.<br />
        /// Identifier for an external user.
        /// </summary>
		[AttributeLogicalName("externaluseridentifier"), MaxLength(50)]
		public string ExternalUserIdentifier
		{
			get
			{
				var value = GetAttributeValue<string>("externaluseridentifier");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("externaluseridentifier"))
				    value = (string) backupAttributeCollection["externaluseridentifier"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExternalUserIdentifier");
					SetAttributeValue("externaluseridentifier", value);
				OnPropertyChanged("ExternalUserIdentifier");
			}
		}

        /// <summary>
        ///  
		/// 'FamilyStatusCode'.<br />
        /// Select the marital status of the contact for reference in follow-up phone calls and other communications.
        /// </summary>
		[AttributeLogicalName("familystatuscode")]
		public MaritalStatusEnum? MaritalStatus
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("familystatuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("familystatuscode"))
				    value = (OptionSetValue) backupAttributeCollection["familystatuscode"];
                return value == null ? (MaritalStatusEnum?) null : (MaritalStatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MaritalStatus");
                if (value != null)
				    SetAttributeValue("familystatuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("familystatuscode", value);
				OnPropertyChanged("MaritalStatus");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Fax'.<br />
        /// Type the fax number for the contact.
        /// </summary>
		[AttributeLogicalName("fax"), MaxLength(50)]
		public string Fax
		{
			get
			{
				var value = GetAttributeValue<string>("fax");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fax"))
				    value = (string) backupAttributeCollection["fax"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Fax");
					SetAttributeValue("fax", value);
				OnPropertyChanged("Fax");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'FirstName'.<br />
        /// Type the contact's first name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.
        /// </summary>
		[AttributeLogicalName("firstname"), MaxLength(50)]
		public string FirstName
		{
			get
			{
				var value = GetAttributeValue<string>("firstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("firstname"))
				    value = (string) backupAttributeCollection["firstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FirstName");
					SetAttributeValue("firstname", value);
				OnPropertyChanged("FirstName");
			}
		}

        /// <summary>
        ///  
		/// 'FollowEmail'.<br />
        /// Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the contact.
        /// </summary>
		[AttributeLogicalName("followemail")]
		public bool? FollowEmailActivity
		{
			get
			{
				var value = GetAttributeValue<bool?>("followemail");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("followemail"))
				    value = (bool?) backupAttributeCollection["followemail"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FollowEmailActivity");
					SetAttributeValue("followemail", value);
				OnPropertyChanged("FollowEmailActivity");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'FtpSiteUrl'.<br />
        /// Type the URL for the contact's FTP site to enable users to access data and share documents.
        /// </summary>
		[AttributeLogicalName("ftpsiteurl"), MaxLength(200)]
		public string FTPSite
		{
			get
			{
				var value = GetAttributeValue<string>("ftpsiteurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ftpsiteurl"))
				    value = (string) backupAttributeCollection["ftpsiteurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FTPSite");
					SetAttributeValue("ftpsiteurl", value);
				OnPropertyChanged("FTPSite");
			}
		}

        /// <summary>
        /// [MaximumLength=160] 
		/// 'FullName'.<br />
        /// Combines and shows the contact's first and last names so that the full name can be displayed in views and reports.
        /// </summary>
		[AttributeLogicalName("fullname"), MaxLength(160)]
		public string FullName
		{
			get
			{
				var value = GetAttributeValue<string>("fullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("fullname"))
				    value = (string) backupAttributeCollection["fullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FullName");
					SetAttributeValue("fullname", value);
				OnPropertyChanged("FullName");
			}
		}

        /// <summary>
        ///  
		/// 'GenderCode'.<br />
        /// Select the contact's gender to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.
        /// </summary>
		[AttributeLogicalName("gendercode")]
		public GenderEnum? Gender
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("gendercode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("gendercode"))
				    value = (OptionSetValue) backupAttributeCollection["gendercode"];
                return value == null ? (GenderEnum?) null : (GenderEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Gender");
                if (value != null)
				    SetAttributeValue("gendercode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("gendercode", value);
				OnPropertyChanged("Gender");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'GovernmentId'.<br />
        /// Type the passport number or other government ID for the contact for use in documents or reports.
        /// </summary>
		[AttributeLogicalName("governmentid"), MaxLength(50)]
		public string Government
		{
			get
			{
				var value = GetAttributeValue<string>("governmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("governmentid"))
				    value = (string) backupAttributeCollection["governmentid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Government");
					SetAttributeValue("governmentid", value);
				OnPropertyChanged("Government");
			}
		}

        /// <summary>
        ///  
		/// 'HasChildrenCode'.<br />
        /// Select whether the contact has any children for reference in follow-up phone calls and other communications.
        /// </summary>
		[AttributeLogicalName("haschildrencode")]
		public HasChildrenEnum? HasChildren
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("haschildrencode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("haschildrencode"))
				    value = (OptionSetValue) backupAttributeCollection["haschildrencode"];
                return value == null ? (HasChildrenEnum?) null : (HasChildrenEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("HasChildren");
                if (value != null)
				    SetAttributeValue("haschildrencode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("haschildrencode", value);
				OnPropertyChanged("HasChildren");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Home2'.<br />
        /// Type a second home phone number for this contact.
        /// </summary>
		[AttributeLogicalName("home2"), MaxLength(50)]
		public string HomePhone2
		{
			get
			{
				var value = GetAttributeValue<string>("home2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("home2"))
				    value = (string) backupAttributeCollection["home2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomePhone2");
					SetAttributeValue("home2", value);
				OnPropertyChanged("HomePhone2");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Unique identifier of the data import or data migration that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        ///  
		/// 'IsBackofficeCustomer'.<br />
        /// Select whether the contact exists in a separate accounting or other system, such as Microsoft Dynamics GP or another ERP database, for use in integration processes.
        /// </summary>
		[AttributeLogicalName("isbackofficecustomer")]
		public bool? BackOfficeCustomer
		{
			get
			{
				var value = GetAttributeValue<bool?>("isbackofficecustomer");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("isbackofficecustomer"))
				    value = (bool?) backupAttributeCollection["isbackofficecustomer"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BackOfficeCustomer");
					SetAttributeValue("isbackofficecustomer", value);
				OnPropertyChanged("BackOfficeCustomer");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'JobTitle'.<br />
        /// Type the job title of the contact to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.
        /// </summary>
		[AttributeLogicalName("jobtitle"), MaxLength(100)]
		public string JobTitle
		{
			get
			{
				var value = GetAttributeValue<string>("jobtitle");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("jobtitle"))
				    value = (string) backupAttributeCollection["jobtitle"];
			    return value;
			}
			set
			{
				OnPropertyChanging("JobTitle");
					SetAttributeValue("jobtitle", value);
				OnPropertyChanged("JobTitle");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=50] 
		/// 'LastName'.<br />
        /// Type the contact's last name to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.
        /// </summary>
		[AttributeLogicalName("lastname"), Required, MaxLength(50)]
		public string LastName
		{
			get
			{
				var value = GetAttributeValue<string>("lastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastname"))
				    value = (string) backupAttributeCollection["lastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastName");
					SetAttributeValue("lastname", value);
				OnPropertyChanged("LastName");
			}
		}

        /// <summary>
        ///  
		/// 'LastOnHoldTime'.<br />
        /// Contains the date and time stamp of the last on hold time.
        /// </summary>
		[AttributeLogicalName("lastonholdtime")]
		public DateTime? LastOnHoldTime
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastonholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastonholdtime"))
				    value = (DateTime?) backupAttributeCollection["lastonholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastOnHoldTime");
					SetAttributeValue("lastonholdtime", value);
				OnPropertyChanged("LastOnHoldTime");
			}
		}

        /// <summary>
        ///  
		/// 'LastUsedInCampaign'.<br />
        /// Shows the date when the contact was last included in a marketing campaign or quick campaign.
        /// </summary>
		[AttributeLogicalName("lastusedincampaign")]
		public DateTime? LastDateIncludedinCampaign
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("lastusedincampaign");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("lastusedincampaign"))
				    value = (DateTime?) backupAttributeCollection["lastusedincampaign"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LastDateIncludedinCampaign");
					SetAttributeValue("lastusedincampaign", value);
				OnPropertyChanged("LastDateIncludedinCampaign");
			}
		}

        /// <summary>
        ///  
		/// 'LeadSourceCode'.<br />
        /// Select the primary marketing source that directed the contact to your organization.
        /// </summary>
		[AttributeLogicalName("leadsourcecode")]
		public LeadSourceEnum? LeadSource
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("leadsourcecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("leadsourcecode"))
				    value = (OptionSetValue) backupAttributeCollection["leadsourcecode"];
                return value == null ? (LeadSourceEnum?) null : (LeadSourceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LeadSource");
                if (value != null)
				    SetAttributeValue("leadsourcecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("leadsourcecode", value);
				OnPropertyChanged("LeadSource");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ManagerName'.<br />
        /// Type the name of the contact's manager for use in escalating issues or other follow-up communications with the contact.
        /// </summary>
		[AttributeLogicalName("managername"), MaxLength(100)]
		public string Manager
		{
			get
			{
				var value = GetAttributeValue<string>("managername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("managername"))
				    value = (string) backupAttributeCollection["managername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Manager");
					SetAttributeValue("managername", value);
				OnPropertyChanged("Manager");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'ManagerPhone'.<br />
        /// Type the phone number for the contact's manager.
        /// </summary>
		[AttributeLogicalName("managerphone"), MaxLength(50)]
		public string ManagerPhone
		{
			get
			{
				var value = GetAttributeValue<string>("managerphone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("managerphone"))
				    value = (string) backupAttributeCollection["managerphone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ManagerPhone");
					SetAttributeValue("managerphone", value);
				OnPropertyChanged("ManagerPhone");
			}
		}

        /// <summary>
        ///  
		/// 'MarketingOnly'.<br />
        /// Whether is only for marketing
        /// </summary>
		[AttributeLogicalName("marketingonly")]
		public bool? MarketingOnly
		{
			get
			{
				var value = GetAttributeValue<bool?>("marketingonly");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("marketingonly"))
				    value = (bool?) backupAttributeCollection["marketingonly"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MarketingOnly");
					SetAttributeValue("marketingonly", value);
				OnPropertyChanged("MarketingOnly");
			}
		}

        /// <summary>
        ///  
		/// 'MasterId'.<br />
        /// Unique identifier of the master contact for merge.
        /// </summary>
		[AttributeLogicalName("masterid")]
		public Guid? MasterID
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("masterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("masterid"))
				    value = (EntityReference) backupAttributeCollection["masterid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("MasterID");
                if (value != null)
				    SetAttributeValue("masterid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("masterid", value);
				OnPropertyChanged("MasterID");
			}
		}

        public string MasterIDName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("masterid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("masterid"))
				    value = (EntityReference) backupAttributeCollection["masterid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'Merged'.<br />
        /// Shows whether the account has been merged with a master contact.
        /// </summary>
		[AttributeLogicalName("merged")]
		public bool? Merged
		{
			get
			{
				var value = GetAttributeValue<bool?>("merged");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("merged"))
				    value = (bool?) backupAttributeCollection["merged"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Merged");
					SetAttributeValue("merged", value);
				OnPropertyChanged("Merged");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'MiddleName'.<br />
        /// Type the contact's middle name or initial to make sure the contact is addressed correctly.
        /// </summary>
		[AttributeLogicalName("middlename"), MaxLength(50)]
		public string MiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("middlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("middlename"))
				    value = (string) backupAttributeCollection["middlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MiddleName");
					SetAttributeValue("middlename", value);
				OnPropertyChanged("MiddleName");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'MobilePhone'.<br />
        /// Type the mobile phone number for the contact.
        /// </summary>
		[AttributeLogicalName("mobilephone"), MaxLength(50)]
		public string MobilePhone
		{
			get
			{
				var value = GetAttributeValue<string>("mobilephone");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("mobilephone"))
				    value = (string) backupAttributeCollection["mobilephone"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MobilePhone");
					SetAttributeValue("mobilephone", value);
				OnPropertyChanged("MobilePhone");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Shows who last updated the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedByExternalParty'.<br />
        /// Shows the external party who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedbyexternalparty")]
		public Guid? ModifiedByExternalParty
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["modifiedbyexternalparty"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByExternalParty");
                if (value != null)
				    SetAttributeValue("modifiedbyexternalparty", new EntityReference("externalparty", value.Value));
                else
					SetAttributeValue("modifiedbyexternalparty", value);
				OnPropertyChanged("ModifiedByExternalParty");
			}
		}

        public string ModifiedByExternalPartyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedbyexternalparty");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedbyexternalparty"))
				    value = (EntityReference) backupAttributeCollection["modifiedbyexternalparty"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Shows who last updated the record on behalf of another user.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=50] 
		/// 'NickName'.<br />
        /// Type the contact's nickname.
        /// </summary>
		[AttributeLogicalName("nickname"), MaxLength(50)]
		public string Nickname
		{
			get
			{
				var value = GetAttributeValue<string>("nickname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("nickname"))
				    value = (string) backupAttributeCollection["nickname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Nickname");
					SetAttributeValue("nickname", value);
				OnPropertyChanged("Nickname");
			}
		}

        /// <summary>
        /// [Range(0, 1000000000)] 
		/// 'NumberOfChildren'.<br />
        /// Type the number of children the contact has for reference in follow-up phone calls and other communications.
        /// </summary>
		[AttributeLogicalName("numberofchildren"), InRange("0", "1000000000", typeof(int))]
		public int? NoofChildren
		{
			get
			{
				var value = GetAttributeValue<int?>("numberofchildren");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("numberofchildren"))
				    value = (int?) backupAttributeCollection["numberofchildren"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NoofChildren");
					SetAttributeValue("numberofchildren", value);
				OnPropertyChanged("NoofChildren");
			}
		}

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'OnHoldTime'.<br />
        /// Shows how long, in minutes, that the record was on hold.
        /// </summary>
		[AttributeLogicalName("onholdtime"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? OnHoldTimeMinutes
		{
			get
			{
				var value = GetAttributeValue<int?>("onholdtime");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("onholdtime"))
				    value = (int?) backupAttributeCollection["onholdtime"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnHoldTimeMinutes");
					SetAttributeValue("onholdtime", value);
				OnPropertyChanged("OnHoldTimeMinutes");
			}
		}

        /// <summary>
        ///  
		/// 'OriginatingLeadId'.<br />
        /// Shows the lead that the contact was created if the contact was created by converting a lead in Microsoft Dynamics 365. This is used to relate the contact to the data on the originating lead for use in reporting and analytics.
        /// </summary>
		[AttributeLogicalName("originatingleadid")]
		public Guid? OriginatingLead
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("originatingleadid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("originatingleadid"))
				    value = (EntityReference) backupAttributeCollection["originatingleadid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OriginatingLead");
                if (value != null)
				    SetAttributeValue("originatingleadid", new EntityReference("lead", value.Value));
                else
					SetAttributeValue("originatingleadid", value);
				OnPropertyChanged("OriginatingLead");
			}
		}

        public string OriginatingLeadName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("originatingleadid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("originatingleadid"))
				    value = (EntityReference) backupAttributeCollection["originatingleadid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier of the business unit that owns the contact.
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier of the team who owns the contact.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier of the user who owns the contact.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Pager'.<br />
        /// Type the pager number for the contact.
        /// </summary>
		[AttributeLogicalName("pager"), MaxLength(50)]
		public string Pager
		{
			get
			{
				var value = GetAttributeValue<string>("pager");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("pager"))
				    value = (string) backupAttributeCollection["pager"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Pager");
					SetAttributeValue("pager", value);
				OnPropertyChanged("Pager");
			}
		}

        /// <summary>
        ///  
		/// 'ParentContactId'.<br />
        /// Unique identifier of the parent contact.
        /// </summary>
		[AttributeLogicalName("parentcontactid")]
		public Guid? ParentContact
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentcontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentcontactid"))
				    value = (EntityReference) backupAttributeCollection["parentcontactid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ParentContact");
                if (value != null)
				    SetAttributeValue("parentcontactid", new EntityReference("contact", value.Value));
                else
					SetAttributeValue("parentcontactid", value);
				OnPropertyChanged("ParentContact");
			}
		}

        public string ParentContactName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentcontactid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentcontactid"))
				    value = (EntityReference) backupAttributeCollection["parentcontactid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParentCustomerId'.<br />
        /// Select the parent account or parent contact for the contact to provide a quick link to additional details, such as financial information, activities, and opportunities.
        /// </summary>
		[AttributeLogicalName("parentcustomerid")]
		public EntityReference CompanyName
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("parentcustomerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentcustomerid"))
				    value = (EntityReference) backupAttributeCollection["parentcustomerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CompanyName");
					SetAttributeValue("parentcustomerid", value);
				OnPropertyChanged("CompanyName");
			}
		}

        public string CompanyNameName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("parentcustomerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("parentcustomerid"))
				    value = (EntityReference) backupAttributeCollection["parentcustomerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ParticipatesInWorkflow'.<br />
        /// Shows whether the contact participates in workflow rules.
        /// </summary>
		[AttributeLogicalName("participatesinworkflow")]
		public bool? ParticipatesinWorkflow
		{
			get
			{
				var value = GetAttributeValue<bool?>("participatesinworkflow");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("participatesinworkflow"))
				    value = (bool?) backupAttributeCollection["participatesinworkflow"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ParticipatesinWorkflow");
					SetAttributeValue("participatesinworkflow", value);
				OnPropertyChanged("ParticipatesinWorkflow");
			}
		}

        /// <summary>
        ///  
		/// 'PaymentTermsCode'.<br />
        /// Select the payment terms to indicate when the customer needs to pay the total amount.
        /// </summary>
		[AttributeLogicalName("paymenttermscode")]
		public PaymentTermsEnum? PaymentTerms
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("paymenttermscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("paymenttermscode"))
				    value = (OptionSetValue) backupAttributeCollection["paymenttermscode"];
                return value == null ? (PaymentTermsEnum?) null : (PaymentTermsEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PaymentTerms");
                if (value != null)
				    SetAttributeValue("paymenttermscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("paymenttermscode", value);
				OnPropertyChanged("PaymentTerms");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredAppointmentDayCode'.<br />
        /// Select the preferred day of the week for service appointments.
        /// </summary>
		[AttributeLogicalName("preferredappointmentdaycode")]
		public PreferredDayEnum? PreferredDay
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredappointmentdaycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredappointmentdaycode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredappointmentdaycode"];
                return value == null ? (PreferredDayEnum?) null : (PreferredDayEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredDay");
                if (value != null)
				    SetAttributeValue("preferredappointmentdaycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredappointmentdaycode", value);
				OnPropertyChanged("PreferredDay");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredAppointmentTimeCode'.<br />
        /// Select the preferred time of day for service appointments.
        /// </summary>
		[AttributeLogicalName("preferredappointmenttimecode")]
		public PreferredTimeEnum? PreferredTime
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredappointmenttimecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredappointmenttimecode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredappointmenttimecode"];
                return value == null ? (PreferredTimeEnum?) null : (PreferredTimeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredTime");
                if (value != null)
				    SetAttributeValue("preferredappointmenttimecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredappointmenttimecode", value);
				OnPropertyChanged("PreferredTime");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredContactMethodCode'.<br />
        /// Select the preferred method of contact.
        /// </summary>
		[AttributeLogicalName("preferredcontactmethodcode")]
		public PreferredMethodofContactEnum? PreferredMethodofContact
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("preferredcontactmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredcontactmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["preferredcontactmethodcode"];
                return value == null ? (PreferredMethodofContactEnum?) null : (PreferredMethodofContactEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("PreferredMethodofContact");
                if (value != null)
				    SetAttributeValue("preferredcontactmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("preferredcontactmethodcode", value);
				OnPropertyChanged("PreferredMethodofContact");
			}
		}

        /// <summary>
        ///  
		/// 'PreferredEquipmentId'.<br />
        /// Choose the contact's preferred service facility or equipment to make sure services are scheduled correctly for the customer.
        /// </summary>
		[AttributeLogicalName("preferredequipmentid")]
		public Guid? PreferredFacilityEquipment
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("preferredequipmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredequipmentid"))
				    value = (EntityReference) backupAttributeCollection["preferredequipmentid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PreferredFacilityEquipment");
                if (value != null)
				    SetAttributeValue("preferredequipmentid", new EntityReference("equipment", value.Value));
                else
					SetAttributeValue("preferredequipmentid", value);
				OnPropertyChanged("PreferredFacilityEquipment");
			}
		}

        public string PreferredFacilityEquipmentName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("preferredequipmentid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredequipmentid"))
				    value = (EntityReference) backupAttributeCollection["preferredequipmentid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PreferredServiceId'.<br />
        /// Choose the contact's preferred service to make sure services are scheduled correctly for the customer.
        /// </summary>
		[AttributeLogicalName("preferredserviceid")]
		public Guid? PreferredService
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("preferredserviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredserviceid"))
				    value = (EntityReference) backupAttributeCollection["preferredserviceid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PreferredService");
                if (value != null)
				    SetAttributeValue("preferredserviceid", new EntityReference("service", value.Value));
                else
					SetAttributeValue("preferredserviceid", value);
				OnPropertyChanged("PreferredService");
			}
		}

        public string PreferredServiceName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("preferredserviceid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredserviceid"))
				    value = (EntityReference) backupAttributeCollection["preferredserviceid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'PreferredSystemUserId'.<br />
        /// Choose the regular or preferred customer service representative for reference when scheduling service activities for the contact.
        /// </summary>
		[AttributeLogicalName("preferredsystemuserid")]
		public Guid? PreferredUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("preferredsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["preferredsystemuserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("PreferredUser");
                if (value != null)
				    SetAttributeValue("preferredsystemuserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("preferredsystemuserid", value);
				OnPropertyChanged("PreferredUser");
			}
		}

        public string PreferredUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("preferredsystemuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("preferredsystemuserid"))
				    value = (EntityReference) backupAttributeCollection["preferredsystemuserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ProcessId'.<br />
        /// Shows the ID of the process.
        /// </summary>
		[AttributeLogicalName("processid")]
		public Guid? Process
		{
			get
			{
				var value = GetAttributeValue<Guid?>("processid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("processid"))
				    value = (Guid?) backupAttributeCollection["processid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Process");
					SetAttributeValue("processid", value);
				OnPropertyChanged("Process");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'Salutation'.<br />
        /// Type the salutation of the contact to make sure the contact is addressed correctly in sales calls, email messages, and marketing campaigns.
        /// </summary>
		[AttributeLogicalName("salutation"), MaxLength(100)]
		public string Salutation
		{
			get
			{
				var value = GetAttributeValue<string>("salutation");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("salutation"))
				    value = (string) backupAttributeCollection["salutation"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Salutation");
					SetAttributeValue("salutation", value);
				OnPropertyChanged("Salutation");
			}
		}

        /// <summary>
        ///  
		/// 'ShippingMethodCode'.<br />
        /// Select a shipping method for deliveries sent to this address.
        /// </summary>
		[AttributeLogicalName("shippingmethodcode")]
		public ShippingMethodEnum? ShippingMethod
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("shippingmethodcode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("shippingmethodcode"))
				    value = (OptionSetValue) backupAttributeCollection["shippingmethodcode"];
                return value == null ? (ShippingMethodEnum?) null : (ShippingMethodEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ShippingMethod");
                if (value != null)
				    SetAttributeValue("shippingmethodcode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("shippingmethodcode", value);
				OnPropertyChanged("ShippingMethod");
			}
		}

        /// <summary>
        ///  
		/// 'SLAId'.<br />
        /// Choose the service level agreement (SLA) that you want to apply to the Contact record.
        /// </summary>
		[AttributeLogicalName("slaid")]
		public Guid? SLA
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SLA");
                if (value != null)
				    SetAttributeValue("slaid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slaid", value);
				OnPropertyChanged("SLA");
			}
		}

        public string SLAName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slaid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slaid"))
				    value = (EntityReference) backupAttributeCollection["slaid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'SLAInvokedId'.<br />
        /// Last SLA that was applied to this case. This field is for internal use only.
        /// </summary>
		[AttributeLogicalName("slainvokedid")]
		public Guid? LastSLAapplied
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LastSLAapplied");
                if (value != null)
				    SetAttributeValue("slainvokedid", new EntityReference("sla", value.Value));
                else
					SetAttributeValue("slainvokedid", value);
				OnPropertyChanged("LastSLAapplied");
			}
		}

        public string LastSLAappliedName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("slainvokedid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("slainvokedid"))
				    value = (EntityReference) backupAttributeCollection["slainvokedid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=100] 
		/// 'SpousesName'.<br />
        /// Type the name of the contact's spouse or partner for reference during calls, events, or other communications with the contact.
        /// </summary>
		[AttributeLogicalName("spousesname"), MaxLength(100)]
		public string SpousePartnerName
		{
			get
			{
				var value = GetAttributeValue<string>("spousesname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("spousesname"))
				    value = (string) backupAttributeCollection["spousesname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SpousePartnerName");
					SetAttributeValue("spousesname", value);
				OnPropertyChanged("SpousePartnerName");
			}
		}

        /// <summary>
        ///  
		/// 'StageId'.<br />
        /// Shows the ID of the stage.
        /// </summary>
		[AttributeLogicalName("stageid")]
		public Guid? ProcessStage
		{
			get
			{
				var value = GetAttributeValue<Guid?>("stageid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("stageid"))
				    value = (Guid?) backupAttributeCollection["stageid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ProcessStage");
					SetAttributeValue("stageid", value);
				OnPropertyChanged("ProcessStage");
			}
		}

        /// <summary>
        ///  
		/// 'StateCode'.<br />
        /// Shows whether the contact is active or inactive. Inactive contacts are read-only and can't be edited unless they are reactivated.
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'StatusCode'.<br />
        /// Select the contact's status.
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [MaximumLength=10] 
		/// 'Suffix'.<br />
        /// Type the suffix used in the contact's name, such as Jr. or Sr. to make sure the contact is addressed correctly in sales calls, email, and marketing campaigns.
        /// </summary>
		[AttributeLogicalName("suffix"), MaxLength(10)]
		public string Suffix
		{
			get
			{
				var value = GetAttributeValue<string>("suffix");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("suffix"))
				    value = (string) backupAttributeCollection["suffix"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Suffix");
					SetAttributeValue("suffix", value);
				OnPropertyChanged("Suffix");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Telephone1'.<br />
        /// Type the main phone number for this contact.
        /// </summary>
		[AttributeLogicalName("telephone1"), MaxLength(50)]
		public string BusinessPhone
		{
			get
			{
				var value = GetAttributeValue<string>("telephone1");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("telephone1"))
				    value = (string) backupAttributeCollection["telephone1"];
			    return value;
			}
			set
			{
				OnPropertyChanging("BusinessPhone");
					SetAttributeValue("telephone1", value);
				OnPropertyChanged("BusinessPhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Telephone2'.<br />
        /// Type a second phone number for this contact.
        /// </summary>
		[AttributeLogicalName("telephone2"), MaxLength(50)]
		public string HomePhone
		{
			get
			{
				var value = GetAttributeValue<string>("telephone2");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("telephone2"))
				    value = (string) backupAttributeCollection["telephone2"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HomePhone");
					SetAttributeValue("telephone2", value);
				OnPropertyChanged("HomePhone");
			}
		}

        /// <summary>
        /// [MaximumLength=50] 
		/// 'Telephone3'.<br />
        /// Type a third phone number for this contact.
        /// </summary>
		[AttributeLogicalName("telephone3"), MaxLength(50)]
		public string Telephone3
		{
			get
			{
				var value = GetAttributeValue<string>("telephone3");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("telephone3"))
				    value = (string) backupAttributeCollection["telephone3"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Telephone3");
					SetAttributeValue("telephone3", value);
				OnPropertyChanged("Telephone3");
			}
		}

        /// <summary>
        ///  
		/// 'TerritoryCode'.<br />
        /// Select a region or territory for the contact for use in segmentation and analysis.
        /// </summary>
		[AttributeLogicalName("territorycode")]
		public TerritoryEnum? Territory
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("territorycode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("territorycode"))
				    value = (OptionSetValue) backupAttributeCollection["territorycode"];
                return value == null ? (TerritoryEnum?) null : (TerritoryEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Territory");
                if (value != null)
				    SetAttributeValue("territorycode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("territorycode", value);
				OnPropertyChanged("Territory");
			}
		}

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TimeSpentByMeOnEmailAndMeetings'.<br />
        /// Total time spent for emails (read and write) and meetings by me in relation to the contact record.
        /// </summary>
		[AttributeLogicalName("timespentbymeonemailandmeetings"), MaxLength(1250)]
		public string TimeSpentbyme
		{
			get
			{
				var value = GetAttributeValue<string>("timespentbymeonemailandmeetings");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timespentbymeonemailandmeetings"))
				    value = (string) backupAttributeCollection["timespentbymeonemailandmeetings"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeSpentbyme");
					SetAttributeValue("timespentbymeonemailandmeetings", value);
				OnPropertyChanged("TimeSpentbyme");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        ///  
		/// 'TransactionCurrencyId'.<br />
        /// Choose the local currency for the record to make sure budgets are reported in the correct currency.
        /// </summary>
		[AttributeLogicalName("transactioncurrencyid")]
		public Guid? Currency
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Currency");
                if (value != null)
				    SetAttributeValue("transactioncurrencyid", new EntityReference("transactioncurrency", value.Value));
                else
					SetAttributeValue("transactioncurrencyid", value);
				OnPropertyChanged("Currency");
			}
		}

        public string CurrencyName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("transactioncurrencyid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("transactioncurrencyid"))
				    value = (EntityReference) backupAttributeCollection["transactioncurrencyid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [MaximumLength=1250] 
		/// 'TraversedPath'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("traversedpath"), MaxLength(1250)]
		public string TraversedPath
		{
			get
			{
				var value = GetAttributeValue<string>("traversedpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("traversedpath"))
				    value = (string) backupAttributeCollection["traversedpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TraversedPath");
					SetAttributeValue("traversedpath", value);
				OnPropertyChanged("TraversedPath");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version number of the contact.
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

        /// <summary>
        /// [MaximumLength=200] 
		/// 'WebSiteUrl'.<br />
        /// Type the contact's professional or personal website or blog URL.
        /// </summary>
		[AttributeLogicalName("websiteurl"), MaxLength(200)]
		public string Website
		{
			get
			{
				var value = GetAttributeValue<string>("websiteurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("websiteurl"))
				    value = (string) backupAttributeCollection["websiteurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Website");
					SetAttributeValue("websiteurl", value);
				OnPropertyChanged("Website");
			}
		}

        /// <summary>
        /// [MaximumLength=150] 
		/// 'YomiFirstName'.<br />
        /// Type the phonetic spelling of the contact's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.
        /// </summary>
		[AttributeLogicalName("yomifirstname"), MaxLength(150)]
		public string YomiFirstName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifirstname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifirstname"))
				    value = (string) backupAttributeCollection["yomifirstname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFirstName");
					SetAttributeValue("yomifirstname", value);
				OnPropertyChanged("YomiFirstName");
			}
		}

        /// <summary>
        /// [MaximumLength=450] 
		/// 'YomiFullName'.<br />
        /// Shows the combined Yomi first and last names of the contact so that the full phonetic name can be displayed in views and reports.
        /// </summary>
		[AttributeLogicalName("yomifullname"), MaxLength(450)]
		public string YomiFullName
		{
			get
			{
				var value = GetAttributeValue<string>("yomifullname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomifullname"))
				    value = (string) backupAttributeCollection["yomifullname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiFullName");
					SetAttributeValue("yomifullname", value);
				OnPropertyChanged("YomiFullName");
			}
		}

        /// <summary>
        /// [MaximumLength=150] 
		/// 'YomiLastName'.<br />
        /// Type the phonetic spelling of the contact's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.
        /// </summary>
		[AttributeLogicalName("yomilastname"), MaxLength(150)]
		public string YomiLastName
		{
			get
			{
				var value = GetAttributeValue<string>("yomilastname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomilastname"))
				    value = (string) backupAttributeCollection["yomilastname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiLastName");
					SetAttributeValue("yomilastname", value);
				OnPropertyChanged("YomiLastName");
			}
		}

        /// <summary>
        /// [MaximumLength=150] 
		/// 'YomiMiddleName'.<br />
        /// Type the phonetic spelling of the contact's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the contact.
        /// </summary>
		[AttributeLogicalName("yomimiddlename"), MaxLength(150)]
		public string YomiMiddleName
		{
			get
			{
				var value = GetAttributeValue<string>("yomimiddlename");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("yomimiddlename"))
				    value = (string) backupAttributeCollection["yomimiddlename"];
			    return value;
			}
			set
			{
				OnPropertyChanging("YomiMiddleName");
					SetAttributeValue("yomimiddlename", value);
				OnPropertyChanged("YomiMiddleName");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'account_primary_contact'
		/// </summary>
		[RelationshipSchemaName("account_primary_contact")]
		public Account[] AccountsOfPrimaryContact
		{
			get
			{
				var enumerable = GetRelatedEntities<Account>("account_primary_contact", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("AccountsOfPrimaryContact");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Account>("account_primary_contact", null, value);
				OnPropertyChanged("AccountsOfPrimaryContact");
			}
		}
		
		/// <summary>
		/// 1:N, 'contact_activity_parties'
		/// </summary>
		[RelationshipSchemaName("contact_activity_parties")]
		public ActivityParty[] ActivityPartysOfParty
		{
			get
			{
				var enumerable = GetRelatedEntities<ActivityParty>("contact_activity_parties", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ActivityPartysOfParty");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<ActivityParty>("contact_activity_parties", null, value);
				OnPropertyChanged("ActivityPartysOfParty");
			}
		}
		
		/// <summary>
		/// 1:N, 'contact_customer_contacts'
		/// </summary>
		[RelationshipSchemaName("contact_customer_contacts", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Contact[] ContactsOfCompanyName
		{
			get
			{
				var enumerable = GetRelatedEntities<Contact>("contact_customer_contacts", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ContactsOfCompanyName");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Contact>("contact_customer_contacts", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("ContactsOfCompanyName");
			}
		}
		
		/// <summary>
		/// 1:N, 'contact_master_contact'
		/// </summary>
		[RelationshipSchemaName("contact_master_contact", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public Contact[] ContactsOfMasterID
		{
			get
			{
				var enumerable = GetRelatedEntities<Contact>("contact_master_contact", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("ContactsOfMasterID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<Contact>("contact_master_contact", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("ContactsOfMasterID");
			}
		}
		
		/// <summary>
		/// N:1, 'contact_customer_accounts'
		/// </summary>
		[RelationshipSchemaName("contact_customer_accounts"), AttributeLogicalName("parentcustomerid")]
		public Account AccountAsCompanyName
		{
			get
			{
				return GetRelatedEntity<Account>("contact_customer_accounts", null);
			}
			set
			{
				OnPropertyChanging("AccountAsCompanyName");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Account>("contact_customer_accounts", null, value);
				OnPropertyChanged("AccountAsCompanyName");
			}
		}
		
		/// <summary>
		/// N:1, 'contact_customer_contacts'
		/// </summary>
		[RelationshipSchemaName("contact_customer_contacts", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("parentcustomerid")]
		public Contact ContactAsCompanyName
		{
			get
			{
				return GetRelatedEntity<Contact>("contact_customer_contacts", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("ContactAsCompanyName");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Contact>("contact_customer_contacts", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("ContactAsCompanyName");
			}
		}
		
		/// <summary>
		/// N:1, 'contact_master_contact'
		/// </summary>
		[RelationshipSchemaName("contact_master_contact", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("masterid")]
		public Contact ContactAsMasterID
		{
			get
			{
				return GetRelatedEntity<Contact>("contact_master_contact", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("ContactAsMasterID");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<Contact>("contact_master_contact", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("ContactAsMasterID");
			}
		}
		
		public static class RelationNames {
			public static RelationName AccountsOfPrimaryContact = new RelationName("AccountsOfPrimaryContact");
			public static RelationName ActivityPartysOfParty = new RelationName("ActivityPartysOfParty");
			public static RelationName ContactsOfCompanyName = new RelationName("ContactsOfCompanyName");
			public static RelationName ContactsOfMasterID = new RelationName("ContactsOfMasterID");
			public static RelationName AccountAsCompanyName = new RelationName("AccountAsCompanyName");
			public static RelationName ContactAsCompanyName = new RelationName("ContactAsCompanyName");
			public static RelationName ContactAsMasterID = new RelationName("ContactAsMasterID");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["AccountsOfPrimaryContact"] = new object[] { "AccountsOfPrimaryContact", "account", "contact", "primarycontactid", "contactid", "contactid", "contactid", "account_primary_contact", typeof (Account[]) };
			relationProperties["ActivityPartysOfParty"] = new object[] { "ActivityPartysOfParty", "activityparty", "contact", "partyid", "contactid", "contactid", "contactid", "contact_activity_parties", typeof (ActivityParty[]) };
			relationProperties["ContactsOfCompanyName"] = new object[] { "ContactsOfCompanyName", "contact", "contact", "parentcustomerid", "contactid", "contactid", "contactid", "contact_customer_contacts", typeof (Contact[]) };
			relationProperties["ContactsOfMasterID"] = new object[] { "ContactsOfMasterID", "contact", "contact", "masterid", "contactid", "contactid", "contactid", "contact_master_contact", typeof (Contact[]) };
			relationProperties["AccountAsCompanyName"] = new object[] { "AccountAsCompanyName", "account", "contact", "accountid", "parentcustomerid", "contactid", "contactid", "contact_customer_accounts", typeof (Account) };
			relationProperties["ContactAsCompanyName"] = new object[] { "ContactAsCompanyName", "contact", "contact", "contactid", "parentcustomerid", "contactid", "contactid", "contact_customer_contacts", typeof (Contact) };
			relationProperties["ContactAsMasterID"] = new object[] { "ContactAsMasterID", "contact", "contact", "contactid", "masterid", "contactid", "contactid", "contact_master_contact", typeof (Contact) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Contact(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["contactid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region Role

		public enum RoleEnum
		{
			[EnumMember]DecisionMaker = 1,
			[EnumMember]Employee = 2,
			[EnumMember]Influencer = 3,
		}

		#endregion
	
		#region Address1AddressType

		public enum Address1AddressTypeEnum
		{
			[EnumMember]BillTo = 1,
			[EnumMember]ShipTo = 2,
			[EnumMember]Primary = 3,
			[EnumMember]Other = 4,
		}

		#endregion
	
		#region Address1FreightTerms

		public enum Address1FreightTermsEnum
		{
			[EnumMember]FOB = 1,
			[EnumMember]NoCharge = 2,
		}

		#endregion
	
		#region Address1ShippingMethod

		public enum Address1ShippingMethodEnum
		{
			[EnumMember]Airborne = 1,
			[EnumMember]DHL = 2,
			[EnumMember]FedEx = 3,
			[EnumMember]UPS = 4,
			[EnumMember]PostalMail = 5,
			[EnumMember]FullLoad = 6,
			[EnumMember]WillCall = 7,
		}

		#endregion
	
		#region Address2AddressType

		public enum Address2AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2FreightTerms

		public enum Address2FreightTermsEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address2ShippingMethod

		public enum Address2ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address3AddressType

		public enum Address3AddressTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address3FreightTerms

		public enum Address3FreightTermsEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Address3ShippingMethod

		public enum Address3ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region CreditHold

		public enum CreditHoldEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region CustomerSize

		public enum CustomerSizeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region RelationshipType

		public enum RelationshipTypeEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region DonotallowBulkEmails

		public enum DonotallowBulkEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowBulkMails

		public enum DonotallowBulkMailsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DonotallowEmails

		public enum DonotallowEmailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowFaxes

		public enum DonotallowFaxesEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowPhoneCalls

		public enum DonotallowPhoneCallsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region DonotallowMails

		public enum DonotallowMailsEnum
		{
			[EnumMember]DoNotAllow = 1,
			[EnumMember]Allow = 0,
		}

		#endregion
	
		#region SendMarketingMaterials

		public enum SendMarketingMaterialsEnum
		{
			[EnumMember]DoNotSend = 1,
			[EnumMember]Send = 0,
		}

		#endregion
	
		#region Education

		public enum EducationEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region MaritalStatus

		public enum MaritalStatusEnum
		{
			[EnumMember]Single = 1,
			[EnumMember]Married = 2,
			[EnumMember]Divorced = 3,
			[EnumMember]Widowed = 4,
		}

		#endregion
	
		#region FollowEmailActivity

		public enum FollowEmailActivityEnum
		{
			[EnumMember]Allow = 1,
			[EnumMember]DoNotAllow = 0,
		}

		#endregion
	
		#region Gender

		public enum GenderEnum
		{
			[EnumMember]Male = 1,
			[EnumMember]Female = 2,
		}

		#endregion
	
		#region HasChildren

		public enum HasChildrenEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Autocreated

		public enum AutocreatedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region BackOfficeCustomer

		public enum BackOfficeCustomerEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IsPrivate

		public enum IsPrivateEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region LeadSource

		public enum LeadSourceEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region MarketingOnly

		public enum MarketingOnlyEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Merged

		public enum MergedEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ParticipatesinWorkflow

		public enum ParticipatesinWorkflowEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region PaymentTerms

		public enum PaymentTermsEnum
		{
			[EnumMember]Net30 = 1,
			[EnumMember]_210Net30 = 2,
			[EnumMember]Net45 = 3,
			[EnumMember]Net60 = 4,
		}

		#endregion
	
		#region PreferredDay

		public enum PreferredDayEnum
		{
			[EnumMember]Sunday = 0,
			[EnumMember]Monday = 1,
			[EnumMember]Tuesday = 2,
			[EnumMember]Wednesday = 3,
			[EnumMember]Thursday = 4,
			[EnumMember]Friday = 5,
			[EnumMember]Saturday = 6,
		}

		#endregion
	
		#region PreferredTime

		public enum PreferredTimeEnum
		{
			[EnumMember]Morning = 1,
			[EnumMember]Afternoon = 2,
			[EnumMember]Evening = 3,
		}

		#endregion
	
		#region PreferredMethodofContact

		public enum PreferredMethodofContactEnum
		{
			[EnumMember]Any = 1,
			[EnumMember]Email = 2,
			[EnumMember]Phone = 3,
			[EnumMember]Fax = 4,
			[EnumMember]Mail = 5,
		}

		#endregion
	
		#region ShippingMethod

		public enum ShippingMethodEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#region Territory

		public enum TerritoryEnum
		{
			[EnumMember]DefaultValue = 1,
		}

		#endregion
	
		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region CustomJob

	/// <summary>
	/// 'ldv_customjob'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_customjob")]
	public partial class CustomJob : GeneratedEntity<CustomJob.RelationName>
	{
		
		public CustomJob() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Custom Job";
		public const string SchemaName = "ldv_customjob";
		public const string EntityLogicalName = "ldv_customjob";
		public const int EntityTypeCode = 10006;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_customjobid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (CustomJobId == null || CustomJobId == Guid.Empty) ? base.Id : CustomJobId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_customjobid");
                    base.Id = value;
                } else {
				    CustomJobId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdby")]
        public IDictionary<int, string> CreatedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "createdonbehalfby")]
        public IDictionary<int, string> CreatedByDelegateLabels { get; set; }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_actionname"), MaxLength(4000)]
		public string ActionName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_actionname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_actionname"))
				    value = (string) backupAttributeCollection["ldv_actionname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ActionName");
					SetAttributeValue("ldv_actionname", value);
				OnPropertyChanged("ActionName");
			}
		}

		[AttributeLogicalName("ldv_contextuser")]
		public Guid? ContextUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_contextuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_contextuser"))
				    value = (EntityReference) backupAttributeCollection["ldv_contextuser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ContextUser");
                if (value != null)
				    SetAttributeValue("ldv_contextuser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_contextuser", value);
				OnPropertyChanged("ContextUser");
			}
		}

        public string ContextUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_contextuser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_contextuser"))
				    value = (EntityReference) backupAttributeCollection["ldv_contextuser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "ldv_contextuser")]
        public IDictionary<int, string> ContextUserLabels { get; set; }

		[AttributeLogicalName("ldv_currentretryrun"), InRange("0", "2147483647", typeof(int))]
		public int? CurrentRetryRun
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_currentretryrun");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_currentretryrun"))
				    value = (int?) backupAttributeCollection["ldv_currentretryrun"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CurrentRetryRun");
					SetAttributeValue("ldv_currentretryrun", value);
				OnPropertyChanged("CurrentRetryRun");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_customjobId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_customjobid")]
		public Guid? CustomJobId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_customjobid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjobid"))
				    value = (Guid?) backupAttributeCollection["ldv_customjobid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomJobId");
                if (value != null)
					SetAttributeValue("ldv_customjobid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("CustomJobId");
			}
		}

		[AttributeLogicalName("ldv_failureaction")]
		public Guid? FailureAction
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_failureaction");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_failureaction"))
				    value = (EntityReference) backupAttributeCollection["ldv_failureaction"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("FailureAction");
                if (value != null)
				    SetAttributeValue("ldv_failureaction", new EntityReference("workflow", value.Value));
                else
					SetAttributeValue("ldv_failureaction", value);
				OnPropertyChanged("FailureAction");
			}
		}

        public string FailureActionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_failureaction");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_failureaction"))
				    value = (EntityReference) backupAttributeCollection["ldv_failureaction"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "workflow", "workflowid", "ldv_failureaction")]
        public IDictionary<int, string> FailureActionLabels { get; set; }

		[AttributeLogicalName("ldv_iscontinueonerror")]
		public bool? ContinueOnError
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_iscontinueonerror");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_iscontinueonerror"))
				    value = (bool?) backupAttributeCollection["ldv_iscontinueonerror"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ContinueOnError");
					SetAttributeValue("ldv_iscontinueonerror", value);
				OnPropertyChanged("ContinueOnError");
			}
		}

		[AttributeLogicalName("ldv_isdeleteonsuccess")]
		public bool? DeleteOnSuccess
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isdeleteonsuccess");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isdeleteonsuccess"))
				    value = (bool?) backupAttributeCollection["ldv_isdeleteonsuccess"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DeleteOnSuccess");
					SetAttributeValue("ldv_isdeleteonsuccess", value);
				OnPropertyChanged("DeleteOnSuccess");
			}
		}

		[AttributeLogicalName("ldv_isdeletesubjobsonsuccess")]
		public bool? DeleteSubJobsOnSuccess
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isdeletesubjobsonsuccess");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isdeletesubjobsonsuccess"))
				    value = (bool?) backupAttributeCollection["ldv_isdeletesubjobsonsuccess"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DeleteSubJobsOnSuccess");
					SetAttributeValue("ldv_isdeletesubjobsonsuccess", value);
				OnPropertyChanged("DeleteSubJobsOnSuccess");
			}
		}

		[AttributeLogicalName("ldv_isgeneratelogs")]
		public bool? GenerateLogs
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isgeneratelogs");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isgeneratelogs"))
				    value = (bool?) backupAttributeCollection["ldv_isgeneratelogs"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GenerateLogs");
					SetAttributeValue("ldv_isgeneratelogs", value);
				OnPropertyChanged("GenerateLogs");
			}
		}

		[AttributeLogicalName("ldv_isignorefailure")]
		public bool? IgnoreFailure
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isignorefailure");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isignorefailure"))
				    value = (bool?) backupAttributeCollection["ldv_isignorefailure"];
			    return value;
			}
			set
			{
				OnPropertyChanging("IgnoreFailure");
					SetAttributeValue("ldv_isignorefailure", value);
				OnPropertyChanged("IgnoreFailure");
			}
		}

		[AttributeLogicalName("ldv_ismarkforwaiting")]
		public bool? MarkForWaiting
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_ismarkforwaiting");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ismarkforwaiting"))
				    value = (bool?) backupAttributeCollection["ldv_ismarkforwaiting"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MarkForWaiting");
					SetAttributeValue("ldv_ismarkforwaiting", value);
				OnPropertyChanged("MarkForWaiting");
			}
		}

		[AttributeLogicalName("ldv_isonlyworkinghours")]
		public bool? OnlyWorkingHours
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isonlyworkinghours");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isonlyworkinghours"))
				    value = (bool?) backupAttributeCollection["ldv_isonlyworkinghours"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OnlyWorkingHours");
					SetAttributeValue("ldv_isonlyworkinghours", value);
				OnPropertyChanged("OnlyWorkingHours");
			}
		}

		[AttributeLogicalName("ldv_isparentrecurrent")]
		public bool? ParentRecurrent
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isparentrecurrent");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isparentrecurrent"))
				    value = (bool?) backupAttributeCollection["ldv_isparentrecurrent"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ParentRecurrent");
					SetAttributeValue("ldv_isparentrecurrent", value);
				OnPropertyChanged("ParentRecurrent");
			}
		}

		[AttributeLogicalName("ldv_isrecurrentjob")]
		public bool? RecurrentJob
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isrecurrentjob");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isrecurrentjob"))
				    value = (bool?) backupAttributeCollection["ldv_isrecurrentjob"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrentJob");
					SetAttributeValue("ldv_isrecurrentjob", value);
				OnPropertyChanged("RecurrentJob");
			}
		}

		[AttributeLogicalName("ldv_latestrunmessage"), MaxLength(1048576)]
		public string LatestRunMessage
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_latestrunmessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_latestrunmessage"))
				    value = (string) backupAttributeCollection["ldv_latestrunmessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LatestRunMessage");
					SetAttributeValue("ldv_latestrunmessage", value);
				OnPropertyChanged("LatestRunMessage");
			}
		}

		[AttributeLogicalName("ldv_maxretrycount"), InRange("0", "2147483647", typeof(int))]
		public int? MaxRetryCount
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_maxretrycount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_maxretrycount"))
				    value = (int?) backupAttributeCollection["ldv_maxretrycount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxRetryCount");
					SetAttributeValue("ldv_maxretrycount", value);
				OnPropertyChanged("MaxRetryCount");
			}
		}

        /// <summary>
        /// [MaximumLength=400] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(400)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_pagenumber"), InRange("1", "2147483647", typeof(int))]
		public int? PageNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_pagenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_pagenumber"))
				    value = (int?) backupAttributeCollection["ldv_pagenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PageNumber");
					SetAttributeValue("ldv_pagenumber", value);
				OnPropertyChanged("PageNumber");
			}
		}

		[AttributeLogicalName("ldv_pagingcookie"), MaxLength(1048576)]
		public string PagingCookie
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_pagingcookie");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_pagingcookie"))
				    value = (string) backupAttributeCollection["ldv_pagingcookie"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PagingCookie");
					SetAttributeValue("ldv_pagingcookie", value);
				OnPropertyChanged("PagingCookie");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_ParentJobId'.<br />
        /// Unique identifier for Custom Job associated with Custom Job.
        /// </summary>
		[AttributeLogicalName("ldv_parentjobid")]
		public Guid? ParentJob
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_parentjobid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_parentjobid"))
				    value = (EntityReference) backupAttributeCollection["ldv_parentjobid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ParentJob");
                if (value != null)
				    SetAttributeValue("ldv_parentjobid", new EntityReference("ldv_customjob", value.Value));
                else
					SetAttributeValue("ldv_parentjobid", value);
				OnPropertyChanged("ParentJob");
			}
		}

        public string ParentJobName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_parentjobid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_parentjobid"))
				    value = (EntityReference) backupAttributeCollection["ldv_parentjobid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_ldv_name", "ldv_customjob", "ldv_customjobid", "ldv_parentjobid")]
        public IDictionary<int, string> ParentJobLabels { get; set; }

		[AttributeLogicalName("ldv_previoustargetdate")]
		public DateTime? PreviousTargetDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_previoustargetdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_previoustargetdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_previoustargetdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("PreviousTargetDate");
					SetAttributeValue("ldv_previoustargetdate", value);
				OnPropertyChanged("PreviousTargetDate");
			}
		}

		[AttributeLogicalName("ldv_recordsperpage"), InRange("1", "2147483647", typeof(int))]
		public int? RecordsPerPage
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_recordsperpage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recordsperpage"))
				    value = (int?) backupAttributeCollection["ldv_recordsperpage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordsPerPage");
					SetAttributeValue("ldv_recordsperpage", value);
				OnPropertyChanged("RecordsPerPage");
			}
		}

		[AttributeLogicalName("ldv_recurrenceupdatedtrigger"), MaxLength(4000)]
		public string RecurrenceUpdatedTrigger
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_recurrenceupdatedtrigger");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceupdatedtrigger"))
				    value = (string) backupAttributeCollection["ldv_recurrenceupdatedtrigger"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceUpdatedTrigger");
					SetAttributeValue("ldv_recurrenceupdatedtrigger", value);
				OnPropertyChanged("RecurrenceUpdatedTrigger");
			}
		}

		[AttributeLogicalName("ldv_resetfield"), MaxLength(100)]
		public string ResetField
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_resetfield");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_resetfield"))
				    value = (string) backupAttributeCollection["ldv_resetfield"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ResetField");
					SetAttributeValue("ldv_resetfield", value);
				OnPropertyChanged("ResetField");
			}
		}

		[AttributeLogicalName("ldv_retryexpiryaction")]
		public Guid? RetryExpiryAction
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_retryexpiryaction");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_retryexpiryaction"))
				    value = (EntityReference) backupAttributeCollection["ldv_retryexpiryaction"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("RetryExpiryAction");
                if (value != null)
				    SetAttributeValue("ldv_retryexpiryaction", new EntityReference("workflow", value.Value));
                else
					SetAttributeValue("ldv_retryexpiryaction", value);
				OnPropertyChanged("RetryExpiryAction");
			}
		}

        public string RetryExpiryActionName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_retryexpiryaction");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_retryexpiryaction"))
				    value = (EntityReference) backupAttributeCollection["ldv_retryexpiryaction"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "workflow", "workflowid", "ldv_retryexpiryaction")]
        public IDictionary<int, string> RetryExpiryActionLabels { get; set; }

		[AttributeLogicalName("ldv_retryschedule")]
		public Guid? RetrySchedule
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_retryschedule");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_retryschedule"))
				    value = (EntityReference) backupAttributeCollection["ldv_retryschedule"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("RetrySchedule");
                if (value != null)
				    SetAttributeValue("ldv_retryschedule", new EntityReference("ldv_recurrencerule", value.Value));
                else
					SetAttributeValue("ldv_retryschedule", value);
				OnPropertyChanged("RetrySchedule");
			}
		}

        public string RetryScheduleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_retryschedule");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_retryschedule"))
				    value = (EntityReference) backupAttributeCollection["ldv_retryschedule"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_ldv_name", "ldv_recurrencerule", "ldv_recurrenceruleid", "ldv_retryschedule")]
        public IDictionary<int, string> RetryScheduleLabels { get; set; }

		[AttributeLogicalName("ldv_runtrigger"), MaxLength(4000)]
		public string RunTrigger
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_runtrigger");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_runtrigger"))
				    value = (string) backupAttributeCollection["ldv_runtrigger"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RunTrigger");
					SetAttributeValue("ldv_runtrigger", value);
				OnPropertyChanged("RunTrigger");
			}
		}

		[AttributeLogicalName("ldv_serialisedinputparams"), MaxLength(1048576)]
		public string SerialisedInputParams
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_serialisedinputparams");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_serialisedinputparams"))
				    value = (string) backupAttributeCollection["ldv_serialisedinputparams"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SerialisedInputParams");
					SetAttributeValue("ldv_serialisedinputparams", value);
				OnPropertyChanged("SerialisedInputParams");
			}
		}

		[AttributeLogicalName("ldv_subjobsretryscheduleid")]
		public Guid? SubJobsRetrySchedule
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_subjobsretryscheduleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_subjobsretryscheduleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_subjobsretryscheduleid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("SubJobsRetrySchedule");
                if (value != null)
				    SetAttributeValue("ldv_subjobsretryscheduleid", new EntityReference("ldv_recurrencerule", value.Value));
                else
					SetAttributeValue("ldv_subjobsretryscheduleid", value);
				OnPropertyChanged("SubJobsRetrySchedule");
			}
		}

        public string SubJobsRetryScheduleName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_subjobsretryscheduleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_subjobsretryscheduleid"))
				    value = (EntityReference) backupAttributeCollection["ldv_subjobsretryscheduleid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_ldv_name", "ldv_recurrencerule", "ldv_recurrenceruleid", "ldv_subjobsretryscheduleid")]
        public IDictionary<int, string> SubJobsRetryScheduleLabels { get; set; }

		[AttributeLogicalName("ldv_targetdate")]
		public DateTime? TargetDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_targetdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_targetdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_targetdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TargetDate");
					SetAttributeValue("ldv_targetdate", value);
				OnPropertyChanged("TargetDate");
			}
		}

		[AttributeLogicalName("ldv_targetid"), MaxLength(36)]
		public string TargetID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_targetid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_targetid"))
				    value = (string) backupAttributeCollection["ldv_targetid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TargetID");
					SetAttributeValue("ldv_targetid", value);
				OnPropertyChanged("TargetID");
			}
		}

		[AttributeLogicalName("ldv_targetlogicalname"), MaxLength(4000)]
		public string TargetLogicalName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_targetlogicalname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_targetlogicalname"))
				    value = (string) backupAttributeCollection["ldv_targetlogicalname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TargetLogicalName");
					SetAttributeValue("ldv_targetlogicalname", value);
				OnPropertyChanged("TargetLogicalName");
			}
		}

		[AttributeLogicalName("ldv_targetxml"), MaxLength(1048576)]
		public string TargetXML
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_targetxml");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_targetxml"))
				    value = (string) backupAttributeCollection["ldv_targetxml"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TargetXML");
					SetAttributeValue("ldv_targetxml", value);
				OnPropertyChanged("TargetXML");
			}
		}

		[AttributeLogicalName("ldv_timer"), InRange("0", "2147483647", typeof(int))]
		public int? Timer
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_timer");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_timer"))
				    value = (int?) backupAttributeCollection["ldv_timer"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Timer");
					SetAttributeValue("ldv_timer", value);
				OnPropertyChanged("Timer");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_TimerBase'.<br />
        /// If empty, then the timer base is 'created on' field.
        /// </summary>
		[AttributeLogicalName("ldv_timerbase")]
		public DateTime? TimerBase
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_timerbase");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_timerbase"))
				    value = (DateTime?) backupAttributeCollection["ldv_timerbase"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimerBase");
					SetAttributeValue("ldv_timerbase", value);
				OnPropertyChanged("TimerBase");
			}
		}

		[AttributeLogicalName("ldv_workflow")]
		public Guid? Workflow
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_workflow");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_workflow"))
				    value = (EntityReference) backupAttributeCollection["ldv_workflow"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("Workflow");
                if (value != null)
				    SetAttributeValue("ldv_workflow", new EntityReference("workflow", value.Value));
                else
					SetAttributeValue("ldv_workflow", value);
				OnPropertyChanged("Workflow");
			}
		}

        public string WorkflowName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_workflow");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_workflow"))
				    value = (EntityReference) backupAttributeCollection["ldv_workflow"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "workflow", "workflowid", "ldv_workflow")]
        public IDictionary<int, string> WorkflowLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedby")]
        public IDictionary<int, string> ModifiedByLabels { get; set; }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "modifiedonbehalfby")]
        public IDictionary<int, string> ModifiedByDelegateLabels { get; set; }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        public IDictionary<int, string> OwnerLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "businessunit", "businessunitid", "owningbusinessunit")]
        public IDictionary<int, string> OwningBusinessUnitLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_name", "team", "teamid", "owningteam")]
        public IDictionary<int, string> OwningTeamLabels { get; set; }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[Label("1033_fullname", "systemuser", "systemuserid", "owninguser")]
        public IDictionary<int, string> OwningUserLabels { get; set; }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Custom Job
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Custom Job
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'ldv_ldv_customjob_ldv_customjob'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_customjob", Microsoft.Xrm.Sdk.EntityRole.Referenced)]
		public CustomJob[] CustomJobsOfParentJob
		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJob>("ldv_ldv_customjob_ldv_customjob", Microsoft.Xrm.Sdk.EntityRole.Referenced);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobsOfParentJob");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJob>("ldv_ldv_customjob_ldv_customjob", Microsoft.Xrm.Sdk.EntityRole.Referenced, value);
				OnPropertyChanged("CustomJobsOfParentJob");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob")]
		public CustomJobFailedTarget[] CustomJobFailedTargetsOfCustomJob
		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJobFailedTarget>("ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobFailedTargetsOfCustomJob");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJobFailedTarget>("ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob", null, value);
				OnPropertyChanged("CustomJobFailedTargetsOfCustomJob");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_ldv_customjob_ldv_customjoblog'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_customjoblog")]
		public CustomJobLog[] CustomJobLogsOfCustomJob
		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJobLog>("ldv_ldv_customjob_ldv_customjoblog", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobLogsOfCustomJob");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJobLog>("ldv_ldv_customjob_ldv_customjoblog", null, value);
				OnPropertyChanged("CustomJobLogsOfCustomJob");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_ldv_customjob_ldv_customjob'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_customjob", Microsoft.Xrm.Sdk.EntityRole.Referencing), AttributeLogicalName("ldv_parentjobid")]
		public CustomJob CustomJobAsParentJob
		{
			get
			{
				return GetRelatedEntity<CustomJob>("ldv_ldv_customjob_ldv_customjob", Microsoft.Xrm.Sdk.EntityRole.Referencing);
			}
			set
			{
				OnPropertyChanging("CustomJobAsParentJob");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<CustomJob>("ldv_ldv_customjob_ldv_customjob", Microsoft.Xrm.Sdk.EntityRole.Referencing, value);
				OnPropertyChanged("CustomJobAsParentJob");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule"), AttributeLogicalName("ldv_retryschedule")]
		public RecurrenceRule RecurrenceRuleAsRetrySchedule
		{
			get
			{
				return GetRelatedEntity<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule", null);
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleAsRetrySchedule");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule", null, value);
				OnPropertyChanged("RecurrenceRuleAsRetrySchedule");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_recurrencerule_customjob_SubJobsRetryScheduleId'
		/// </summary>
		[RelationshipSchemaName("ldv_recurrencerule_customjob_SubJobsRetryScheduleId"), AttributeLogicalName("ldv_subjobsretryscheduleid")]
		public RecurrenceRule RecurrenceRuleAsSubJobsRetrySchedule
		{
			get
			{
				return GetRelatedEntity<RecurrenceRule>("ldv_recurrencerule_customjob_SubJobsRetryScheduleId", null);
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleAsSubJobsRetrySchedule");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<RecurrenceRule>("ldv_recurrencerule_customjob_SubJobsRetryScheduleId", null, value);
				OnPropertyChanged("RecurrenceRuleAsSubJobsRetrySchedule");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_customjob_ldv_recurrencerule'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_recurrencerule")]
		public RecurrenceRule[] Recurrences

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_customjob_ldv_recurrencerule", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("Recurrences");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_customjob_ldv_recurrencerule", null, value);
				OnPropertyChanged("Recurrences");
			}
		}
		
		public static class RelationNames {
			public static RelationName CustomJobsOfParentJob = new RelationName("CustomJobsOfParentJob");
			public static RelationName CustomJobFailedTargetsOfCustomJob = new RelationName("CustomJobFailedTargetsOfCustomJob");
			public static RelationName CustomJobLogsOfCustomJob = new RelationName("CustomJobLogsOfCustomJob");
			public static RelationName CustomJobAsParentJob = new RelationName("CustomJobAsParentJob");
			public static RelationName RecurrenceRuleAsRetrySchedule = new RelationName("RecurrenceRuleAsRetrySchedule");
			public static RelationName RecurrenceRuleAsSubJobsRetrySchedule = new RelationName("RecurrenceRuleAsSubJobsRetrySchedule");
			public static RelationName Recurrences = new RelationName("Recurrences");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["CustomJobsOfParentJob"] = new object[] { "CustomJobsOfParentJob", "ldv_customjob", "ldv_customjob", "ldv_parentjobid", "ldv_customjobid", "ldv_customjobid", "ldv_customjobid", "ldv_ldv_customjob_ldv_customjob", typeof (CustomJob[]) };
			relationProperties["CustomJobFailedTargetsOfCustomJob"] = new object[] { "CustomJobFailedTargetsOfCustomJob", "ldv_customjobfailedtarget", "ldv_customjob", "ldv_customjob", "ldv_customjobid", "ldv_customjobid", "ldv_customjobid", "ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob", typeof (CustomJobFailedTarget[]) };
			relationProperties["CustomJobLogsOfCustomJob"] = new object[] { "CustomJobLogsOfCustomJob", "ldv_customjoblog", "ldv_customjob", "ldv_customjobid", "ldv_customjobid", "ldv_customjobid", "ldv_customjobid", "ldv_ldv_customjob_ldv_customjoblog", typeof (CustomJobLog[]) };
			relationProperties["CustomJobAsParentJob"] = new object[] { "CustomJobAsParentJob", "ldv_customjob", "ldv_customjob", "ldv_customjobid", "ldv_parentjobid", "ldv_customjobid", "ldv_customjobid", "ldv_ldv_customjob_ldv_customjob", typeof (CustomJob) };
			relationProperties["RecurrenceRuleAsRetrySchedule"] = new object[] { "RecurrenceRuleAsRetrySchedule", "ldv_recurrencerule", "ldv_customjob", "ldv_recurrenceruleid", "ldv_retryschedule", "ldv_customjobid", "ldv_customjobid", "ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule", typeof (RecurrenceRule) };
			relationProperties["RecurrenceRuleAsSubJobsRetrySchedule"] = new object[] { "RecurrenceRuleAsSubJobsRetrySchedule", "ldv_recurrencerule", "ldv_customjob", "ldv_recurrenceruleid", "ldv_subjobsretryscheduleid", "ldv_customjobid", "ldv_customjobid", "ldv_recurrencerule_customjob_SubJobsRetryScheduleId", typeof (RecurrenceRule) };
			relationProperties["Recurrences"] = new object[] { "Recurrences", "ldv_recurrencerule", "ldv_ldv_customjob_ldv_recurrencerule", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_customjobid", "ldv_customjobid", "ldv_ldv_customjob_ldv_recurrencerule", typeof (RecurrenceRule[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public CustomJob(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_customjobid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region ContinueOnError

		public enum ContinueOnErrorEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DeleteOnSuccess

		public enum DeleteOnSuccessEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region DeleteSubJobsOnSuccess

		public enum DeleteSubJobsOnSuccessEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region GenerateLogs

		public enum GenerateLogsEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region IgnoreFailure

		public enum IgnoreFailureEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region MarkForWaiting

		public enum MarkForWaitingEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region OnlyWorkingHours

		public enum OnlyWorkingHoursEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ParentRecurrent

		public enum ParentRecurrentEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region RecurrentJob

		public enum RecurrentJobEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Draft = 753240006,
			[EnumMember]Waiting = 753240005,
			[EnumMember]WaitingOnSubJobs = 753240009,
			[EnumMember]Queued = 1,
			[EnumMember]Running = 753240004,
			[EnumMember]Retry = 753240003,
			[EnumMember]Success = 2,
			[EnumMember]Failure = 753240002,
			[EnumMember]PartialFailure = 753240007,
			[EnumMember]Cancelled = 753240008,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ContinueOnError = "ldv_iscontinueonerror";
				public const string DeleteOnSuccess = "ldv_isdeleteonsuccess";
				public const string DeleteSubJobsOnSuccess = "ldv_isdeletesubjobsonsuccess";
				public const string GenerateLogs = "ldv_isgeneratelogs";
				public const string IgnoreFailure = "ldv_isignorefailure";
				public const string MarkForWaiting = "ldv_ismarkforwaiting";
				public const string OnlyWorkingHours = "ldv_isonlyworkinghours";
				public const string ParentRecurrent = "ldv_isparentrecurrent";
				public const string RecurrentJob = "ldv_isrecurrentjob";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ContinueOnError 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ContinueOnError), label, languageCode);
					}
				}

				public static class DeleteOnSuccess 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DeleteOnSuccess), label, languageCode);
					}
				}

				public static class DeleteSubJobsOnSuccess 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(DeleteSubJobsOnSuccess), label, languageCode);
					}
				}

				public static class GenerateLogs 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(GenerateLogs), label, languageCode);
					}
				}

				public static class IgnoreFailure 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(IgnoreFailure), label, languageCode);
					}
				}

				public static class MarkForWaiting 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(MarkForWaiting), label, languageCode);
					}
				}

				public static class OnlyWorkingHours 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(OnlyWorkingHours), label, languageCode);
					}
				}

				public static class ParentRecurrent 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ParentRecurrent), label, languageCode);
					}
				}

				public static class RecurrentJob 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(RecurrentJob), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Draft_1033 = "Draft";
					public const string Waiting_1033 = "Waiting";
					public const string WaitingOnSubJobs_1033 = "Waiting On Sub-Jobs";
					public const string Queued_1033 = "Queued";
					public const string Running_1033 = "Running";
					public const string Retry_1033 = "Retry";
					public const string Success_1033 = "Success";
					public const string Failure_1033 = "Failure";
					public const string PartialFailure_1033 = "Partial Failure";
					public const string Cancelled_1033 = "Cancelled";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string ActionName = "ldv_actionname";
			public const string ContextUser = "ldv_contextuser";
			public const string CurrentRetryRun = "ldv_currentretryrun";
			public const string CustomJobId = "ldv_customjobid";
			public const string FailureAction = "ldv_failureaction";
			public const string ContinueOnError = "ldv_iscontinueonerror";
			public const string DeleteOnSuccess = "ldv_isdeleteonsuccess";
			public const string DeleteSubJobsOnSuccess = "ldv_isdeletesubjobsonsuccess";
			public const string GenerateLogs = "ldv_isgeneratelogs";
			public const string IgnoreFailure = "ldv_isignorefailure";
			public const string MarkForWaiting = "ldv_ismarkforwaiting";
			public const string OnlyWorkingHours = "ldv_isonlyworkinghours";
			public const string ParentRecurrent = "ldv_isparentrecurrent";
			public const string RecurrentJob = "ldv_isrecurrentjob";
			public const string LatestRunMessage = "ldv_latestrunmessage";
			public const string MaxRetryCount = "ldv_maxretrycount";
			public const string Name = "ldv_name";
			public const string PageNumber = "ldv_pagenumber";
			public const string PagingCookie = "ldv_pagingcookie";
			public const string ParentJob = "ldv_parentjobid";
			public const string PreviousTargetDate = "ldv_previoustargetdate";
			public const string RecordsPerPage = "ldv_recordsperpage";
			public const string RecurrenceUpdatedTrigger = "ldv_recurrenceupdatedtrigger";
			public const string ResetField = "ldv_resetfield";
			public const string RetryExpiryAction = "ldv_retryexpiryaction";
			public const string RetrySchedule = "ldv_retryschedule";
			public const string RunTrigger = "ldv_runtrigger";
			public const string SerialisedInputParams = "ldv_serialisedinputparams";
			public const string SubJobsRetrySchedule = "ldv_subjobsretryscheduleid";
			public const string TargetDate = "ldv_targetdate";
			public const string TargetID = "ldv_targetid";
			public const string TargetLogicalName = "ldv_targetlogicalname";
			public const string TargetXML = "ldv_targetxml";
			public const string Timer = "ldv_timer";
			public const string TimerBase = "ldv_timerbase";
			public const string Workflow = "ldv_workflow";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string ActionName = "ldv_ActionName";
				public const string ContextUser = "ldv_ContextUser";
				public const string CurrentRetryRun = "ldv_CurrentRetryRun";
				public const string CustomJobId = "ldv_customjobId";
				public const string FailureAction = "ldv_FailureAction";
				public const string ContinueOnError = "ldv_IsContinueOnError";
				public const string DeleteOnSuccess = "ldv_IsDeleteOnSuccess";
				public const string DeleteSubJobsOnSuccess = "ldv_IsDeleteSubJobsOnSuccess";
				public const string GenerateLogs = "ldv_IsGenerateLogs";
				public const string IgnoreFailure = "ldv_IsIgnoreFailure";
				public const string MarkForWaiting = "ldv_IsMarkForWaiting";
				public const string OnlyWorkingHours = "ldv_IsOnlyWorkingHours";
				public const string ParentRecurrent = "ldv_IsParentRecurrent";
				public const string RecurrentJob = "ldv_IsRecurrentJob";
				public const string LatestRunMessage = "ldv_LatestRunMessage";
				public const string MaxRetryCount = "ldv_MaxRetryCount";
				public const string Name = "ldv_name";
				public const string PageNumber = "ldv_PageNumber";
				public const string PagingCookie = "ldv_PagingCookie";
				public const string ParentJob = "ldv_ParentJobId";
				public const string PreviousTargetDate = "ldv_PreviousTargetDate";
				public const string RecordsPerPage = "ldv_RecordsPerPage";
				public const string RecurrenceUpdatedTrigger = "ldv_RecurrenceUpdatedTrigger";
				public const string ResetField = "ldv_ResetField";
				public const string RetryExpiryAction = "ldv_RetryExpiryAction";
				public const string RetrySchedule = "ldv_RetrySchedule";
				public const string RunTrigger = "ldv_RunTrigger";
				public const string SerialisedInputParams = "ldv_SerialisedInputParams";
				public const string SubJobsRetrySchedule = "ldv_SubJobsRetryScheduleId";
				public const string TargetDate = "ldv_TargetDate";
				public const string TargetID = "ldv_TargetID";
				public const string TargetLogicalName = "ldv_TargetLogicalName";
				public const string TargetXML = "ldv_TargetXML";
				public const string Timer = "ldv_Timer";
				public const string TimerBase = "ldv_TimerBase";
				public const string Workflow = "ldv_Workflow";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class ActionName
				{
					public const string _1033 = "Action Name";
				}

				public static class ContextUser
				{
					public const string _1033 = "Context User";
				}

				public static class CurrentRetryRun
				{
					public const string _1033 = "Current Retry Run";
				}

				public static class CustomJobId
				{
					public const string _1033 = "Custom Job";
				}

				public static class FailureAction
				{
					public const string _1033 = "Failure Action";
				}

				public static class ContinueOnError
				{
					public const string _1033 = "Continue On Error";
				}

				public static class DeleteOnSuccess
				{
					public const string _1033 = "Delete On Success";
				}

				public static class DeleteSubJobsOnSuccess
				{
					public const string _1033 = "Delete Sub-Jobs On Success";
				}

				public static class GenerateLogs
				{
					public const string _1033 = "Generate Logs";
				}

				public static class IgnoreFailure
				{
					public const string _1033 = "Ignore Failure";
				}

				public static class MarkForWaiting
				{
					public const string _1033 = "Mark For Waiting";
				}

				public static class OnlyWorkingHours
				{
					public const string _1033 = "Only Working Hours";
				}

				public static class ParentRecurrent
				{
					public const string _1033 = "Parent Recurrent";
				}

				public static class RecurrentJob
				{
					public const string _1033 = "Recurrent Job";
				}

				public static class LatestRunMessage
				{
					public const string _1033 = "Latest Run Message";
				}

				public static class MaxRetryCount
				{
					public const string _1033 = "Max Retry Count";
				}

				public static class Name
				{
					public const string _1033 = "Name";
				}

				public static class PageNumber
				{
					public const string _1033 = "Page Number";
				}

				public static class PagingCookie
				{
					public const string _1033 = "Paging Cookie";
				}

				public static class ParentJob
				{
					public const string _1033 = "Parent Job";
				}

				public static class PreviousTargetDate
				{
					public const string _1033 = "Previous Target Date";
				}

				public static class RecordsPerPage
				{
					public const string _1033 = "Records Per Page";
				}

				public static class RecurrenceUpdatedTrigger
				{
					public const string _1033 = "Recurrence Updated Trigger";
				}

				public static class ResetField
				{
					public const string _1033 = "Reset Field";
				}

				public static class RetryExpiryAction
				{
					public const string _1033 = "Retry Expiry Action";
				}

				public static class RetrySchedule
				{
					public const string _1033 = "Retry Schedule";
				}

				public static class RunTrigger
				{
					public const string _1033 = "Run Trigger";
				}

				public static class SerialisedInputParams
				{
					public const string _1033 = "Serialised Input Params";
				}

				public static class SubJobsRetrySchedule
				{
					public const string _1033 = "Sub-Jobs Retry Schedule";
				}

				public static class TargetDate
				{
					public const string _1033 = "Target Date";
				}

				public static class TargetID
				{
					public const string _1033 = "Target ID";
				}

				public static class TargetLogicalName
				{
					public const string _1033 = "Target Logical Name";
				}

				public static class TargetXML
				{
					public const string _1033 = "Target XML";
				}

				public static class Timer
				{
					public const string _1033 = "Timer";
				}

				public static class TimerBase
				{
					public const string _1033 = "Timer Base";
				}

				public static class Workflow
				{
					public const string _1033 = "Workflow";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string CustomJobsOfParentJob = "ldv_ldv_customjob_ldv_customjob";
				public const string CustomJobFailedTargetsOfCustomJob = "ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob";
				public const string CustomJobLogsOfCustomJob = "ldv_ldv_customjob_ldv_customjoblog";
			}
			
			public static class NToOne
			{
				public const string CustomJobAsParentJob = "ldv_ldv_customjob_ldv_customjob";
				public const string RecurrenceRuleAsRetrySchedule = "ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule";
				public const string RecurrenceRuleAsSubJobsRetrySchedule = "ldv_recurrencerule_customjob_SubJobsRetryScheduleId";

				public static class Lookups
				{
					public const string CustomJobAsParentJob = "ldv_parentjobid";
					public const string RecurrenceRuleAsRetrySchedule = "ldv_retryschedule";
					public const string RecurrenceRuleAsSubJobsRetrySchedule = "ldv_subjobsretryscheduleid";
				}
			}

			public static class NToN
			{

				public const string Recurrences = "ldv_ldv_customjob_ldv_recurrencerule";
			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region CustomJobEngine

	/// <summary>
	/// 'ldv_customjobengine'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_customjobengine")]
	public partial class CustomJobEngine : GeneratedEntity<CustomJobEngine.RelationName>
	{
		
		public CustomJobEngine() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Custom Job Engine";
		public const string SchemaName = "ldv_customjobengine";
		public const string EntityLogicalName = "ldv_customjobengine";
		public const int EntityTypeCode = 10007;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_customjobengineid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (CustomJobEngineId == null || CustomJobEngineId == Guid.Empty) ? base.Id : CustomJobEngineId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_customjobengineid");
                    base.Id = value;
                } else {
				    CustomJobEngineId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_10minutewfreset"), MaxLength(100)]
		public string __10MinuteWFReset
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_10minutewfreset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_10minutewfreset"))
				    value = (string) backupAttributeCollection["ldv_10minutewfreset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("__10MinuteWFReset");
					SetAttributeValue("ldv_10minutewfreset", value);
				OnPropertyChanged("__10MinuteWFReset");
			}
		}

		[AttributeLogicalName("ldv_10minutewfrunid"), MaxLength(36)]
		public string __10MinuteWFRunID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_10minutewfrunid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_10minutewfrunid"))
				    value = (string) backupAttributeCollection["ldv_10minutewfrunid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("__10MinuteWFRunID");
					SetAttributeValue("ldv_10minutewfrunid", value);
				OnPropertyChanged("__10MinuteWFRunID");
			}
		}

		[AttributeLogicalName("ldv_1minutewfreset"), MaxLength(100)]
		public string __1MinuteWFReset
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_1minutewfreset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_1minutewfreset"))
				    value = (string) backupAttributeCollection["ldv_1minutewfreset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("__1MinuteWFReset");
					SetAttributeValue("ldv_1minutewfreset", value);
				OnPropertyChanged("__1MinuteWFReset");
			}
		}

		[AttributeLogicalName("ldv_1minutewfrunid"), MaxLength(36)]
		public string __1MinuteWFRunID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_1minutewfrunid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_1minutewfrunid"))
				    value = (string) backupAttributeCollection["ldv_1minutewfrunid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("__1MinuteWFRunID");
					SetAttributeValue("ldv_1minutewfrunid", value);
				OnPropertyChanged("__1MinuteWFRunID");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_customjobengineId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_customjobengineid")]
		public Guid? CustomJobEngineId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_customjobengineid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjobengineid"))
				    value = (Guid?) backupAttributeCollection["ldv_customjobengineid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomJobEngineId");
                if (value != null)
					SetAttributeValue("ldv_customjobengineid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("CustomJobEngineId");
			}
		}

		[AttributeLogicalName("ldv_hourlybasedate")]
		public DateTime? HourlyBaseDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_hourlybasedate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_hourlybasedate"))
				    value = (DateTime?) backupAttributeCollection["ldv_hourlybasedate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HourlyBaseDate");
					SetAttributeValue("ldv_hourlybasedate", value);
				OnPropertyChanged("HourlyBaseDate");
			}
		}

		[AttributeLogicalName("ldv_hourlywfreset"), MaxLength(100)]
		public string HourlyWFReset
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_hourlywfreset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_hourlywfreset"))
				    value = (string) backupAttributeCollection["ldv_hourlywfreset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HourlyWFReset");
					SetAttributeValue("ldv_hourlywfreset", value);
				OnPropertyChanged("HourlyWFReset");
			}
		}

		[AttributeLogicalName("ldv_hourlywfrunid"), MaxLength(36)]
		public string HourlyWFRunID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_hourlywfrunid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_hourlywfrunid"))
				    value = (string) backupAttributeCollection["ldv_hourlywfrunid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HourlyWFRunID");
					SetAttributeValue("ldv_hourlywfrunid", value);
				OnPropertyChanged("HourlyWFRunID");
			}
		}

		[AttributeLogicalName("ldv_ishourlytriggered")]
		public bool? HourlyTriggered
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_ishourlytriggered");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ishourlytriggered"))
				    value = (bool?) backupAttributeCollection["ldv_ishourlytriggered"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HourlyTriggered");
					SetAttributeValue("ldv_ishourlytriggered", value);
				OnPropertyChanged("HourlyTriggered");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'ldv_MaxJobsPerRun'.<br />
        /// If empty, all eligible jobs for running will be queued every minute.
        /// </summary>
		[AttributeLogicalName("ldv_maxjobsperrun"), InRange("1", "2147483647", typeof(int))]
		public int? MaxJobsPerRun
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_maxjobsperrun");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_maxjobsperrun"))
				    value = (int?) backupAttributeCollection["ldv_maxjobsperrun"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxJobsPerRun");
					SetAttributeValue("ldv_maxjobsperrun", value);
				OnPropertyChanged("MaxJobsPerRun");
			}
		}

		[AttributeLogicalName("ldv_monitor1wfrunid"), MaxLength(100)]
		public string MonitorWFRunID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_monitor1wfrunid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monitor1wfrunid"))
				    value = (string) backupAttributeCollection["ldv_monitor1wfrunid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MonitorWFRunID");
					SetAttributeValue("ldv_monitor1wfrunid", value);
				OnPropertyChanged("MonitorWFRunID");
			}
		}

		[AttributeLogicalName("ldv_monitorbasedate")]
		public DateTime? MonitorBaseDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_monitorbasedate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monitorbasedate"))
				    value = (DateTime?) backupAttributeCollection["ldv_monitorbasedate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MonitorBaseDate");
					SetAttributeValue("ldv_monitorbasedate", value);
				OnPropertyChanged("MonitorBaseDate");
			}
		}

		[AttributeLogicalName("ldv_monitorwfreset"), MaxLength(100)]
		public string MonitorWFReset
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_monitorwfreset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monitorwfreset"))
				    value = (string) backupAttributeCollection["ldv_monitorwfreset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MonitorWFReset");
					SetAttributeValue("ldv_monitorwfreset", value);
				OnPropertyChanged("MonitorWFReset");
			}
		}

		[AttributeLogicalName("ldv_monitorx2basedate")]
		public DateTime? Monitorx2BaseDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_monitorx2basedate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monitorx2basedate"))
				    value = (DateTime?) backupAttributeCollection["ldv_monitorx2basedate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Monitorx2BaseDate");
					SetAttributeValue("ldv_monitorx2basedate", value);
				OnPropertyChanged("Monitorx2BaseDate");
			}
		}

		[AttributeLogicalName("ldv_monitorx2wfreset"), MaxLength(100)]
		public string Monitorx2WFReset
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_monitorx2wfreset");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monitorx2wfreset"))
				    value = (string) backupAttributeCollection["ldv_monitorx2wfreset"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Monitorx2WFReset");
					SetAttributeValue("ldv_monitorx2wfreset", value);
				OnPropertyChanged("Monitorx2WFReset");
			}
		}

		[AttributeLogicalName("ldv_monitorx2wfrunid"), MaxLength(100)]
		public string Monitorx2WFRunID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_monitorx2wfrunid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monitorx2wfrunid"))
				    value = (string) backupAttributeCollection["ldv_monitorx2wfrunid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Monitorx2WFRunID");
					SetAttributeValue("ldv_monitorx2wfrunid", value);
				OnPropertyChanged("Monitorx2WFRunID");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Custom Job Engine
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Custom Job Engine
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public CustomJobEngine(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_customjobengineid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region HourlyTriggered

		public enum HourlyTriggeredEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Running = 1,
			[EnumMember]Stopped = 753240000,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region CustomJobFailedTarget

	/// <summary>
	/// 'ldv_customjobfailedtarget'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_customjobfailedtarget")]
	public partial class CustomJobFailedTarget : GeneratedEntity<CustomJobFailedTarget.RelationName>
	{
		
		public CustomJobFailedTarget() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Custom Job Failed Target";
		public const string SchemaName = "ldv_customjobfailedtarget";
		public const string EntityLogicalName = "ldv_customjobfailedtarget";
		public const int EntityTypeCode = 10008;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_customjobfailedtargetid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (CustomJobFailedTargetId == null || CustomJobFailedTargetId == Guid.Empty) ? base.Id : CustomJobFailedTargetId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_customjobfailedtargetid");
                    base.Id = value;
                } else {
				    CustomJobFailedTargetId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_customjob"), Required]
		public Guid? CustomJob
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_customjob");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjob"))
				    value = (EntityReference) backupAttributeCollection["ldv_customjob"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CustomJob");
                if (value != null)
				    SetAttributeValue("ldv_customjob", new EntityReference("ldv_customjob", value.Value));
                else
					SetAttributeValue("ldv_customjob", value);
				OnPropertyChanged("CustomJob");
			}
		}

        public string CustomJobName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_customjob");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjob"))
				    value = (EntityReference) backupAttributeCollection["ldv_customjob"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_customjobfailedtargetId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_customjobfailedtargetid")]
		public Guid? CustomJobFailedTargetId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_customjobfailedtargetid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjobfailedtargetid"))
				    value = (Guid?) backupAttributeCollection["ldv_customjobfailedtargetid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomJobFailedTargetId");
                if (value != null)
					SetAttributeValue("ldv_customjobfailedtargetid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("CustomJobFailedTargetId");
			}
		}

		[AttributeLogicalName("ldv_failuremessage"), MaxLength(1048576)]
		public string FailureMessage
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_failuremessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_failuremessage"))
				    value = (string) backupAttributeCollection["ldv_failuremessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FailureMessage");
					SetAttributeValue("ldv_failuremessage", value);
				OnPropertyChanged("FailureMessage");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_LogEntry'.<br />
        /// Unique identifier for Custom Job Log associated with Custom Job Failed Target.
        /// </summary>
		[AttributeLogicalName("ldv_logentry")]
		public Guid? LogEntry
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_logentry");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logentry"))
				    value = (EntityReference) backupAttributeCollection["ldv_logentry"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("LogEntry");
                if (value != null)
				    SetAttributeValue("ldv_logentry", new EntityReference("ldv_customjoblog", value.Value));
                else
					SetAttributeValue("ldv_logentry", value);
				OnPropertyChanged("LogEntry");
			}
		}

        public string LogEntryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_logentry");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logentry"))
				    value = (EntityReference) backupAttributeCollection["ldv_logentry"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Required][MaximumLength=36] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(36)]
		public string ID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ID");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("ID");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Custom Job Failed Target
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Custom Job Failed Target
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:1, 'ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob"), AttributeLogicalName("ldv_customjob")]
		public CustomJob CustomJobAsCustomJob
		{
			get
			{
				return GetRelatedEntity<CustomJob>("ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob", null);
			}
			set
			{
				OnPropertyChanging("CustomJobAsCustomJob");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<CustomJob>("ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob", null, value);
				OnPropertyChanged("CustomJobAsCustomJob");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry"), AttributeLogicalName("ldv_logentry")]
		public CustomJobLog CustomJobLogAsLogEntry
		{
			get
			{
				return GetRelatedEntity<CustomJobLog>("ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry", null);
			}
			set
			{
				OnPropertyChanging("CustomJobLogAsLogEntry");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<CustomJobLog>("ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry", null, value);
				OnPropertyChanged("CustomJobLogAsLogEntry");
			}
		}
		
		public static class RelationNames {
			public static RelationName CustomJobAsCustomJob = new RelationName("CustomJobAsCustomJob");
			public static RelationName CustomJobLogAsLogEntry = new RelationName("CustomJobLogAsLogEntry");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["CustomJobAsCustomJob"] = new object[] { "CustomJobAsCustomJob", "ldv_customjob", "ldv_customjobfailedtarget", "ldv_customjobid", "ldv_customjob", "ldv_customjobfailedtargetid", "ldv_customjobfailedtargetid", "ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob", typeof (CustomJob) };
			relationProperties["CustomJobLogAsLogEntry"] = new object[] { "CustomJobLogAsLogEntry", "ldv_customjoblog", "ldv_customjobfailedtarget", "ldv_customjoblogid", "ldv_logentry", "ldv_customjobfailedtargetid", "ldv_customjobfailedtargetid", "ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry", typeof (CustomJobLog) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public CustomJobFailedTarget(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_customjobfailedtargetid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string CustomJob = "ldv_customjob";
			public const string CustomJobFailedTargetId = "ldv_customjobfailedtargetid";
			public const string FailureMessage = "ldv_failuremessage";
			public const string LogEntry = "ldv_logentry";
			public const string ID = "ldv_name";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string CustomJob = "ldv_CustomJob";
				public const string CustomJobFailedTargetId = "ldv_customjobfailedtargetId";
				public const string FailureMessage = "ldv_FailureMessage";
				public const string LogEntry = "ldv_LogEntry";
				public const string ID = "ldv_name";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class CustomJob
				{
					public const string _1033 = "Custom Job";
				}

				public static class CustomJobFailedTargetId
				{
					public const string _1033 = "Custom Job Failed Target";
				}

				public static class FailureMessage
				{
					public const string _1033 = "Failure Message";
				}

				public static class LogEntry
				{
					public const string _1033 = "Log Entry";
				}

				public static class ID
				{
					public const string _1033 = "ID";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{
				public const string CustomJobAsCustomJob = "ldv_ldv_customjob_ldv_customjobfailedtarget_CustomJob";
				public const string CustomJobLogAsLogEntry = "ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry";

				public static class Lookups
				{
					public const string CustomJobAsCustomJob = "ldv_customjob";
					public const string CustomJobLogAsLogEntry = "ldv_logentry";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region CustomJobLog

	/// <summary>
	/// 'ldv_customjoblog'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_customjoblog")]
	public partial class CustomJobLog : GeneratedEntity<CustomJobLog.RelationName>
	{
		
		public CustomJobLog() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Custom Job Log";
		public const string SchemaName = "ldv_customjoblog";
		public const string EntityLogicalName = "ldv_customjoblog";
		public const int EntityTypeCode = 10009;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_customjoblogid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (CustomJobLogId == null || CustomJobLogId == Guid.Empty) ? base.Id : CustomJobLogId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_customjoblogid");
                    base.Id = value;
                } else {
				    CustomJobLogId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'ldv_CustomJobId'.<br />
        /// Unique identifier for Custom Job associated with Custom Job Log.
        /// </summary>
		[AttributeLogicalName("ldv_customjobid"), Required]
		public Guid? CustomJob
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_customjobid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjobid"))
				    value = (EntityReference) backupAttributeCollection["ldv_customjobid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CustomJob");
                if (value != null)
				    SetAttributeValue("ldv_customjobid", new EntityReference("ldv_customjob", value.Value));
                else
					SetAttributeValue("ldv_customjobid", value);
				OnPropertyChanged("CustomJob");
			}
		}

        public string CustomJobName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_customjobid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjobid"))
				    value = (EntityReference) backupAttributeCollection["ldv_customjobid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ldv_customjoblogId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_customjoblogid")]
		public Guid? CustomJobLogId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_customjoblogid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjoblogid"))
				    value = (Guid?) backupAttributeCollection["ldv_customjoblogid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CustomJobLogId");
                if (value != null)
					SetAttributeValue("ldv_customjoblogid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("CustomJobLogId");
			}
		}

		[AttributeLogicalName("ldv_executiondate"), Required]
		public DateTime? ExecutionDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_executiondate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_executiondate"))
				    value = (DateTime?) backupAttributeCollection["ldv_executiondate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExecutionDate");
					SetAttributeValue("ldv_executiondate", value);
				OnPropertyChanged("ExecutionDate");
			}
		}

		[AttributeLogicalName("ldv_executionfullmessage"), MaxLength(1048576)]
		public string ExecutionFullMessage
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_executionfullmessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_executionfullmessage"))
				    value = (string) backupAttributeCollection["ldv_executionfullmessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExecutionFullMessage");
					SetAttributeValue("ldv_executionfullmessage", value);
				OnPropertyChanged("ExecutionFullMessage");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=400] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(400)]
		public string Message
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Message");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Message");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Custom Job Log
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Custom Job Log
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry")]
		public CustomJobFailedTarget[] CustomJobFailedTargetsOfLogEntry
		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJobFailedTarget>("ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobFailedTargetsOfLogEntry");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJobFailedTarget>("ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry", null, value);
				OnPropertyChanged("CustomJobFailedTargetsOfLogEntry");
			}
		}
		
		/// <summary>
		/// N:1, 'ldv_ldv_customjob_ldv_customjoblog'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_customjoblog"), AttributeLogicalName("ldv_customjobid")]
		public CustomJob CustomJobAsCustomJob
		{
			get
			{
				return GetRelatedEntity<CustomJob>("ldv_ldv_customjob_ldv_customjoblog", null);
			}
			set
			{
				OnPropertyChanging("CustomJobAsCustomJob");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.LogicalName = (string) value.GetType().GetField("EntityLogicalName").GetRawConstantValue();
				SetRelatedEntity<CustomJob>("ldv_ldv_customjob_ldv_customjoblog", null, value);
				OnPropertyChanged("CustomJobAsCustomJob");
			}
		}
		
		public static class RelationNames {
			public static RelationName CustomJobFailedTargetsOfLogEntry = new RelationName("CustomJobFailedTargetsOfLogEntry");
			public static RelationName CustomJobAsCustomJob = new RelationName("CustomJobAsCustomJob");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["CustomJobFailedTargetsOfLogEntry"] = new object[] { "CustomJobFailedTargetsOfLogEntry", "ldv_customjobfailedtarget", "ldv_customjoblog", "ldv_logentry", "ldv_customjoblogid", "ldv_customjoblogid", "ldv_customjoblogid", "ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry", typeof (CustomJobFailedTarget[]) };
			relationProperties["CustomJobAsCustomJob"] = new object[] { "CustomJobAsCustomJob", "ldv_customjob", "ldv_customjoblog", "ldv_customjobid", "ldv_customjobid", "ldv_customjoblogid", "ldv_customjoblogid", "ldv_ldv_customjob_ldv_customjoblog", typeof (CustomJob) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public CustomJobLog(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_customjoblogid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Success = 1,
			[EnumMember]Failure = 753240000,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Success_1033 = "Success";
					public const string Failure_1033 = "Failure";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string CustomJob = "ldv_customjobid";
			public const string CustomJobLogId = "ldv_customjoblogid";
			public const string ExecutionDate = "ldv_executiondate";
			public const string ExecutionFullMessage = "ldv_executionfullmessage";
			public const string Message = "ldv_name";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string CustomJob = "ldv_CustomJobId";
				public const string CustomJobLogId = "ldv_customjoblogId";
				public const string ExecutionDate = "ldv_ExecutionDate";
				public const string ExecutionFullMessage = "ldv_ExecutionFullMessage";
				public const string Message = "ldv_name";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class CustomJob
				{
					public const string _1033 = "Custom Job";
				}

				public static class CustomJobLogId
				{
					public const string _1033 = "Custom Job Log";
				}

				public static class ExecutionDate
				{
					public const string _1033 = "Execution Date";
				}

				public static class ExecutionFullMessage
				{
					public const string _1033 = "Execution Full Message";
				}

				public static class Message
				{
					public const string _1033 = "Message";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
				public const string CustomJobFailedTargetsOfLogEntry = "ldv_ldv_customjoblog_ldv_customjobfailedtarget_LogEntry";
			}
			
			public static class NToOne
			{
				public const string CustomJobAsCustomJob = "ldv_ldv_customjob_ldv_customjoblog";

				public static class Lookups
				{
					public const string CustomJobAsCustomJob = "ldv_customjobid";
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region GenericConfiguration

	/// <summary>
	/// 'ldv_genericconfiguration'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_genericconfiguration")]
	public partial class GenericConfiguration : GeneratedEntity<GenericConfiguration.RelationName>
	{
		
		public GenericConfiguration() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Generic Configuration";
		public const string SchemaName = "ldv_genericconfiguration";
		public const string EntityLogicalName = "ldv_genericconfiguration";
		public const int EntityTypeCode = 10011;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_genericconfigurationid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (GenericConfigurationId == null || GenericConfigurationId == Guid.Empty) ? base.Id : GenericConfigurationId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_genericconfigurationid");
                    base.Id = value;
                } else {
				    GenericConfigurationId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [Required][Range(0, 2147483647)] 
		/// 'ldv_ConfigurationCacheDuration'.<br />
        /// The duration to keep configurations cached in memory.
        /// </summary>
		[AttributeLogicalName("ldv_configurationcacheduration"), Required, InRange("0", "2147483647", typeof(int))]
		public int? ConfigurationCacheDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_configurationcacheduration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_configurationcacheduration"))
				    value = (int?) backupAttributeCollection["ldv_configurationcacheduration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ConfigurationCacheDuration");
					SetAttributeValue("ldv_configurationcacheduration", value);
				OnPropertyChanged("ConfigurationCacheDuration");
			}
		}

		[AttributeLogicalName("ldv_defaultcalendar"), Required, MaxLength(36)]
		public string DefaultCalendar
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_defaultcalendar");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultcalendar"))
				    value = (string) backupAttributeCollection["ldv_defaultcalendar"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DefaultCalendar");
					SetAttributeValue("ldv_defaultcalendar", value);
				OnPropertyChanged("DefaultCalendar");
			}
		}

        /// <summary>
        /// [Required] 
		/// 'ldv_DefaultFromUserId'.<br />
        /// The default notification user; appears in the 'from' in emails.
        /// </summary>
		[AttributeLogicalName("ldv_defaultfromuserid"), Required]
		public Guid? DefaultFromUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_defaultfromuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultfromuserid"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultfromuserid"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultFromUser");
                if (value != null)
				    SetAttributeValue("ldv_defaultfromuserid", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_defaultfromuserid", value);
				OnPropertyChanged("DefaultFromUser");
			}
		}

        public string DefaultFromUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_defaultfromuserid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultfromuserid"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultfromuserid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_defaultroutinguser"), Required]
		public Guid? DefaultRoutingUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_defaultroutinguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultroutinguser"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultroutinguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("DefaultRoutingUser");
                if (value != null)
				    SetAttributeValue("ldv_defaultroutinguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_defaultroutinguser", value);
				OnPropertyChanged("DefaultRoutingUser");
			}
		}

        public string DefaultRoutingUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_defaultroutinguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_defaultroutinguser"))
				    value = (EntityReference) backupAttributeCollection["ldv_defaultroutinguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_foxitprintingpath"), Required, MaxLength(4000)]
		public string FoxitPrintingPath
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_foxitprintingpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_foxitprintingpath"))
				    value = (string) backupAttributeCollection["ldv_foxitprintingpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("FoxitPrintingPath");
					SetAttributeValue("ldv_foxitprintingpath", value);
				OnPropertyChanged("FoxitPrintingPath");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_genericconfigurationId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_genericconfigurationid")]
		public Guid? GenericConfigurationId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_genericconfigurationid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_genericconfigurationid"))
				    value = (Guid?) backupAttributeCollection["ldv_genericconfigurationid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("GenericConfigurationId");
                if (value != null)
					SetAttributeValue("ldv_genericconfigurationid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("GenericConfigurationId");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_IsCategoriseByType'.<br />
        /// Create a folder per assembly.
        /// </summary>
		[AttributeLogicalName("ldv_iscategorisebytype")]
		public bool? CategorisebyType
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_iscategorisebytype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_iscategorisebytype"))
				    value = (bool?) backupAttributeCollection["ldv_iscategorisebytype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CategorisebyType");
					SetAttributeValue("ldv_iscategorisebytype", value);
				OnPropertyChanged("CategorisebyType");
			}
		}

		[AttributeLogicalName("ldv_iscontinuenotifyonerror"), Required]
		public bool? ContinueNotifyOnError
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_iscontinuenotifyonerror");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_iscontinuenotifyonerror"))
				    value = (bool?) backupAttributeCollection["ldv_iscontinuenotifyonerror"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ContinueNotifyOnError");
					SetAttributeValue("ldv_iscontinuenotifyonerror", value);
				OnPropertyChanged("ContinueNotifyOnError");
			}
		}

		[AttributeLogicalName("ldv_isnotificationscentreenabled"), Required]
		public bool? NotificationsCentreEnabled
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isnotificationscentreenabled");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isnotificationscentreenabled"))
				    value = (bool?) backupAttributeCollection["ldv_isnotificationscentreenabled"];
			    return value;
			}
			set
			{
				OnPropertyChanging("NotificationsCentreEnabled");
					SetAttributeValue("ldv_isnotificationscentreenabled", value);
				OnPropertyChanged("NotificationsCentreEnabled");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_IsReuseLogFile'.<br />
        /// This will clear the log file and start over when the size limit is reached.
        /// </summary>
		[AttributeLogicalName("ldv_isreuselogfile")]
		public bool? ReuseLogFile
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_isreuselogfile");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_isreuselogfile"))
				    value = (bool?) backupAttributeCollection["ldv_isreuselogfile"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReuseLogFile");
					SetAttributeValue("ldv_isreuselogfile", value);
				OnPropertyChanged("ReuseLogFile");
			}
		}

		[AttributeLogicalName("ldv_logfiledateformat"), MaxLength(4000)]
		public string LogFileDateFormat
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_logfiledateformat");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfiledateformat"))
				    value = (string) backupAttributeCollection["ldv_logfiledateformat"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogFileDateFormat");
					SetAttributeValue("ldv_logfiledateformat", value);
				OnPropertyChanged("LogFileDateFormat");
			}
		}

		[AttributeLogicalName("ldv_logfilesplitdate")]
		public DateTime? LogFileSplitDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_logfilesplitdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfilesplitdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_logfilesplitdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogFileSplitDate");
					SetAttributeValue("ldv_logfilesplitdate", value);
				OnPropertyChanged("LogFileSplitDate");
			}
		}

		[AttributeLogicalName("ldv_logfilesplitfrequency")]
		public LogFileSplitFrequencyEnum? LogFileSplitFrequency
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_logfilesplitfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfilesplitfrequency"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_logfilesplitfrequency"];
                return value == null ? (LogFileSplitFrequencyEnum?) null : (LogFileSplitFrequencyEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogFileSplitFrequency");
                if (value != null)
				    SetAttributeValue("ldv_logfilesplitfrequency", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_logfilesplitfrequency", value);
				OnPropertyChanged("LogFileSplitFrequency");
			}
		}

		[AttributeLogicalName("ldv_logfilesplitmode")]
		public LogFileSplitModeEnum? LogFileSplitMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_logfilesplitmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logfilesplitmode"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_logfilesplitmode"];
                return value == null ? (LogFileSplitModeEnum?) null : (LogFileSplitModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogFileSplitMode");
                if (value != null)
				    SetAttributeValue("ldv_logfilesplitmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_logfilesplitmode", value);
				OnPropertyChanged("LogFileSplitMode");
			}
		}

		[AttributeLogicalName("ldv_loglevel"), Required]
		public LogLevelEnum? LogLevel
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_loglevel");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_loglevel"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_loglevel"];
                return value == null ? (LogLevelEnum?) null : (LogLevelEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogLevel");
                if (value != null)
				    SetAttributeValue("ldv_loglevel", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_loglevel", value);
				OnPropertyChanged("LogLevel");
			}
		}

		[AttributeLogicalName("ldv_logmode"), Required]
		public LogModeEnum? LogMode
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_logmode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logmode"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_logmode"];
                return value == null ? (LogModeEnum?) null : (LogModeEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("LogMode");
                if (value != null)
				    SetAttributeValue("ldv_logmode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_logmode", value);
				OnPropertyChanged("LogMode");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ldv_LogPath'.<br />
        /// The folder to contain all log files.
        /// </summary>
		[AttributeLogicalName("ldv_logpath"), MaxLength(4000)]
		public string LogPath
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_logpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logpath"))
				    value = (string) backupAttributeCollection["ldv_logpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogPath");
					SetAttributeValue("ldv_logpath", value);
				OnPropertyChanged("LogPath");
			}
		}

        /// <summary>
        /// [Range(1, 2147483647)] 
		/// 'ldv_MaxFileSize'.<br />
        /// In KB.
        /// </summary>
		[AttributeLogicalName("ldv_maxfilesize"), InRange("1", "2147483647", typeof(int))]
		public int? MaxFileSizeKB
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_maxfilesize");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_maxfilesize"))
				    value = (int?) backupAttributeCollection["ldv_maxfilesize"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MaxFileSizeKB");
					SetAttributeValue("ldv_maxfilesize", value);
				OnPropertyChanged("MaxFileSizeKB");
			}
		}

		[AttributeLogicalName("ldv_metadatacacheduration"), Required, InRange("0", "2147483647", typeof(int))]
		public int? MetadataCacheDuration
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_metadatacacheduration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_metadatacacheduration"))
				    value = (int?) backupAttributeCollection["ldv_metadatacacheduration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MetadataCacheDuration");
					SetAttributeValue("ldv_metadatacacheduration", value);
				OnPropertyChanged("MetadataCacheDuration");
			}
		}

        /// <summary>
        /// [MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_organisationbaseurl"), Required, MaxLength(4000)]
		public string OrganisationBaseURL
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_organisationbaseurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_organisationbaseurl"))
				    value = (string) backupAttributeCollection["ldv_organisationbaseurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrganisationBaseURL");
					SetAttributeValue("ldv_organisationbaseurl", value);
				OnPropertyChanged("OrganisationBaseURL");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_OrgNameOnSSRS'.<br />
        /// E.g. XXX_MSCRM
        /// </summary>
		[AttributeLogicalName("ldv_orgnameonssrs"), Required, MaxLength(100)]
		public string OrgNameOnSSRS
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_orgnameonssrs");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_orgnameonssrs"))
				    value = (string) backupAttributeCollection["ldv_orgnameonssrs"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OrgNameOnSSRS");
					SetAttributeValue("ldv_orgnameonssrs", value);
				OnPropertyChanged("OrgNameOnSSRS");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=4000] 
		/// 'ldv_ReportServiceURL'.<br />
        /// E.g. http://ldcrm16-XXX.cloudapp.net/ReportServer/reportexecution2005.asmx
        /// </summary>
		[AttributeLogicalName("ldv_reportserviceurl"), Required, MaxLength(4000)]
		public string ReportServiceURL
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_reportserviceurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_reportserviceurl"))
				    value = (string) backupAttributeCollection["ldv_reportserviceurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ReportServiceURL");
					SetAttributeValue("ldv_reportserviceurl", value);
				OnPropertyChanged("ReportServiceURL");
			}
		}

		[AttributeLogicalName("ldv_ssrsdomain"), Required, MaxLength(100)]
		public string SSRSDomain
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrsdomain");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrsdomain"))
				    value = (string) backupAttributeCollection["ldv_ssrsdomain"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSDomain");
					SetAttributeValue("ldv_ssrsdomain", value);
				OnPropertyChanged("SSRSDomain");
			}
		}

		[AttributeLogicalName("ldv_ssrspassword"), Required, MaxLength(100)]
		public string SSRSPassword
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrspassword");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrspassword"))
				    value = (string) backupAttributeCollection["ldv_ssrspassword"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSPassword");
					SetAttributeValue("ldv_ssrspassword", value);
				OnPropertyChanged("SSRSPassword");
			}
		}

        /// <summary>
        /// [MaximumLength=4000] 
		/// 'ldv_SSRSSharedFolderPath'.<br />
        /// E.g. SharedReports/8.0.xxxx
        /// </summary>
		[AttributeLogicalName("ldv_ssrssharedfolderpath"), MaxLength(4000)]
		public string SSRSSharedFolderPath
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrssharedfolderpath");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrssharedfolderpath"))
				    value = (string) backupAttributeCollection["ldv_ssrssharedfolderpath"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSSharedFolderPath");
					SetAttributeValue("ldv_ssrssharedfolderpath", value);
				OnPropertyChanged("SSRSSharedFolderPath");
			}
		}

		[AttributeLogicalName("ldv_ssrsusername"), Required, MaxLength(100)]
		public string SSRSUserName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_ssrsusername");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ssrsusername"))
				    value = (string) backupAttributeCollection["ldv_ssrsusername"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SSRSUserName");
					SetAttributeValue("ldv_ssrsusername", value);
				OnPropertyChanged("SSRSUserName");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Generic Configuration
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Generic Configuration
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public GenericConfiguration(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_genericconfigurationid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region CategorisebyType

		public enum CategorisebyTypeEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ContinueNotifyOnError

		public enum ContinueNotifyOnErrorEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region NotificationsCentreEnabled

		public enum NotificationsCentreEnabledEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ReuseLogFile

		public enum ReuseLogFileEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region LogFileSplitFrequency

		public enum LogFileSplitFrequencyEnum
		{
			[EnumMember]Hourly = 10,
			[EnumMember]Daily = 20,
			[EnumMember]Monthly = 30,
			[EnumMember]Yearly = 40,
		}

		#endregion
	
		#region LogFileSplitMode

		public enum LogFileSplitModeEnum
		{
			[EnumMember]Size = 10,
			[EnumMember]Date = 20,
			[EnumMember]Both = 30,
		}

		#endregion
	
		#region LogLevel

		public enum LogLevelEnum
		{
			[EnumMember]None = 0,
			[EnumMember]Error = 10,
			[EnumMember]Warning = 20,
			[EnumMember]Info = 30,
			[EnumMember]Debug = 40,
		}

		#endregion
	
		#region LogMode

		public enum LogModeEnum
		{
			[EnumMember]CRM = 10,
			[EnumMember]File = 20,
			[EnumMember]Both = 30,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region ldv_ldv_customjob_ldv_recurrencerule

	/// <summary>
	/// 'ldv_ldv_customjob_ldv_recurrencerule'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_customjob_ldv_recurrencerule")]
	public partial class ldv_ldv_customjob_ldv_recurrencerule : GeneratedEntity<ldv_ldv_customjob_ldv_recurrencerule.RelationName>
	{
		
		public ldv_ldv_customjob_ldv_recurrencerule() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_customjob_ldv_recurrencerule";
		public const string EntityLogicalName = "ldv_ldv_customjob_ldv_recurrencerule";
		public const int EntityTypeCode = 10032;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_ldv_customjob_ldv_recurrenceruleid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_customjob_ldv_recurrenceruleIdId == null || ldv_ldv_customjob_ldv_recurrenceruleIdId == Guid.Empty) ? base.Id : ldv_ldv_customjob_ldv_recurrenceruleIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_customjob_ldv_recurrenceruleid");
                    base.Id = value;
                } else {
				    ldv_ldv_customjob_ldv_recurrenceruleIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_customjobid")]
		public Guid? ldv_customjobid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_customjobid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_customjobid"))
				    value = (Guid?) backupAttributeCollection["ldv_customjobid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_customjobid");
					SetAttributeValue("ldv_customjobid", value);
				OnPropertyChanged("ldv_customjobid");
			}
		}

		[AttributeLogicalName("ldv_ldv_customjob_ldv_recurrenceruleid")]
		public Guid? ldv_ldv_customjob_ldv_recurrenceruleIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_customjob_ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_customjob_ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_customjob_ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_customjob_ldv_recurrenceruleIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_customjob_ldv_recurrenceruleid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_customjob_ldv_recurrenceruleIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? ldv_recurrenceruleid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleid");
					SetAttributeValue("ldv_recurrenceruleid", value);
				OnPropertyChanged("ldv_recurrenceruleid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'ldv_ldv_customjob_ldv_recurrencerule'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_recurrencerule")]
		public CustomJob[] CustomJobsOfldv_ldv_customjob_ldv_recurrencerule

		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJob>("ldv_ldv_customjob_ldv_recurrencerule", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobsOfldv_ldv_customjob_ldv_recurrencerule");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJob>("ldv_ldv_customjob_ldv_recurrencerule", null, value);
				OnPropertyChanged("CustomJobsOfldv_ldv_customjob_ldv_recurrencerule");
			}
		}
		
		public static class RelationNames {
			public static RelationName CustomJobsOfldv_ldv_customjob_ldv_recurrencerule = new RelationName("CustomJobsOfldv_ldv_customjob_ldv_recurrencerule");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["CustomJobsOfldv_ldv_customjob_ldv_recurrencerule"] = new object[] { "CustomJobsOfldv_ldv_customjob_ldv_recurrencerule", "ldv_customjob", "ldv_ldv_customjob_ldv_recurrencerule", "ldv_customjobid", "ldv_customjobid", "ldv_ldv_customjob_ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_customjob_ldv_recurrencerule", typeof (CustomJob[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_customjob_ldv_recurrencerule(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region ldv_ldv_recurrencerule_ldv_recurrenceexgrou

	/// <summary>
	/// 'ldv_ldv_recurrencerule_ldv_recurrenceexgrou'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceexgrou")]
	public partial class ldv_ldv_recurrencerule_ldv_recurrenceexgrou : GeneratedEntity<ldv_ldv_recurrencerule_ldv_recurrenceexgrou.RelationName>
	{
		
		public ldv_ldv_recurrencerule_ldv_recurrenceexgrou() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_recurrencerule_ldv_recurrenceexgrou";
		public const string EntityLogicalName = "ldv_ldv_recurrencerule_ldv_recurrenceexgrou";
		public const int EntityTypeCode = 10033;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId == null || ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId == Guid.Empty) ? base.Id : ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid");
                    base.Id = value;
                } else {
				    ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid")]
		public Guid? ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_recurrencerule_ldv_recurrenceexgrouid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_recurrencerule_ldv_recurrenceexgrouid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_recurrencerule_ldv_recurrenceexgrouIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid")]
		public Guid? ldv_recurrenceruleexceptiongroupingid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptiongroupingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptiongroupingid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptiongroupingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptiongroupingid");
					SetAttributeValue("ldv_recurrenceruleexceptiongroupingid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptiongroupingid");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? ldv_recurrenceruleid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleid");
					SetAttributeValue("ldv_recurrenceruleid", value);
				OnPropertyChanged("ldv_recurrenceruleid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceexgroup'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceexgroup")]
		public RecurrenceRule[] RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null, value);
				OnPropertyChanged("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup = new RelationName("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup"] = new object[] { "RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceexgrou", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceexgrouid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrencerule_ldv_recurrenceexgroup", typeof (RecurrenceRule[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_recurrencerule_ldv_recurrenceexgrou(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region ldv_ldv_recurrencerule_ldv_recurrenceruleex

	/// <summary>
	/// 'ldv_ldv_recurrencerule_ldv_recurrenceruleex'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceruleex")]
	public partial class ldv_ldv_recurrencerule_ldv_recurrenceruleex : GeneratedEntity<ldv_ldv_recurrencerule_ldv_recurrenceruleex.RelationName>
	{
		
		public ldv_ldv_recurrencerule_ldv_recurrenceruleex() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_recurrencerule_ldv_recurrenceruleex";
		public const string EntityLogicalName = "ldv_ldv_recurrencerule_ldv_recurrenceruleex";
		public const int EntityTypeCode = 10034;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceruleexid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId == null || ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId == Guid.Empty) ? base.Id : ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_recurrencerule_ldv_recurrenceruleexid");
                    base.Id = value;
                } else {
				    ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_ldv_recurrencerule_ldv_recurrenceruleexid")]
		public Guid? ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_recurrencerule_ldv_recurrenceruleexid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_recurrencerule_ldv_recurrenceruleexid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_recurrencerule_ldv_recurrenceruleexid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_recurrencerule_ldv_recurrenceruleexid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_recurrencerule_ldv_recurrenceruleexIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptionid")]
		public Guid? ldv_recurrenceruleexceptionid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptionid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptionid");
					SetAttributeValue("ldv_recurrenceruleexceptionid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptionid");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? ldv_recurrenceruleid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleid");
					SetAttributeValue("ldv_recurrenceruleid", value);
				OnPropertyChanged("ldv_recurrenceruleid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceruleexce'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceruleexce")]
		public RecurrenceRule[] RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null, value);
				OnPropertyChanged("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce = new RelationName("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce"] = new object[] { "RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceruleex", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexce", typeof (RecurrenceRule[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_recurrencerule_ldv_recurrenceruleex(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region ldv_ldv_recurrenceruleexceptiongrouping_ldv

	/// <summary>
	/// 'ldv_ldv_recurrenceruleexceptiongrouping_ldv'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_ldv_recurrenceruleexceptiongrouping_ldv")]
	public partial class ldv_ldv_recurrenceruleexceptiongrouping_ldv : GeneratedEntity<ldv_ldv_recurrenceruleexceptiongrouping_ldv.RelationName>
	{
		
		public ldv_ldv_recurrenceruleexceptiongrouping_ldv() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = null;
		public const string SchemaName = "ldv_ldv_recurrenceruleexceptiongrouping_ldv";
		public const string EntityLogicalName = "ldv_ldv_recurrenceruleexceptiongrouping_ldv";
		public const int EntityTypeCode = 10035;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_ldv_recurrenceruleexceptiongrouping_ldvid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId == null || ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId == Guid.Empty) ? base.Id : ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_ldv_recurrenceruleexceptiongrouping_ldvid");
                    base.Id = value;
                } else {
				    ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId = value;
                }
			}
		}

		[AttributeLogicalName("ldv_ldv_recurrenceruleexceptiongrouping_ldvid")]
		public Guid? ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_ldv_recurrenceruleexceptiongrouping_ldvid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_ldv_recurrenceruleexceptiongrouping_ldvid"))
				    value = (Guid?) backupAttributeCollection["ldv_ldv_recurrenceruleexceptiongrouping_ldvid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId");
                if (value != null)
					SetAttributeValue("ldv_ldv_recurrenceruleexceptiongrouping_ldvid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("ldv_ldv_recurrenceruleexceptiongrouping_ldvIdId");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid")]
		public Guid? ldv_recurrenceruleexceptiongroupingid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptiongroupingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptiongroupingid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptiongroupingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptiongroupingid");
					SetAttributeValue("ldv_recurrenceruleexceptiongroupingid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptiongroupingid");
			}
		}

		[AttributeLogicalName("ldv_recurrenceruleexceptionid")]
		public Guid? ldv_recurrenceruleexceptionid
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptionid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ldv_recurrenceruleexceptionid");
					SetAttributeValue("ldv_recurrenceruleexceptionid", value);
				OnPropertyChanged("ldv_recurrenceruleexceptionid");
			}
		}

		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrenceruleexceptiongrouping_ldv_r'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r")]
		public RecurrenceRuleExceptionGrouping[] RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r = new RelationName("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r"] = new object[] { "RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r", "ldv_recurrenceruleexceptiongrouping", "ldv_ldv_recurrenceruleexceptiongrouping_ldv", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrenceruleexceptiongrouping_ldvid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", typeof (RecurrenceRuleExceptionGrouping[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public ldv_ldv_recurrenceruleexceptiongrouping_ldv(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region Log

	/// <summary>
	/// 'ldv_log'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_log")]
	public partial class Log : GeneratedEntity<Log.RelationName>
	{
		
		public Log() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Log";
		public const string SchemaName = "ldv_log";
		public const string EntityLogicalName = "ldv_log";
		public const int EntityTypeCode = 10012;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_logid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (LogId == null || LogId == Guid.Empty) ? base.Id : LogId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_logid");
                    base.Id = value;
                } else {
				    LogId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_assembly"), MaxLength(4000)]
		public string Assembly
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_assembly");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_assembly"))
				    value = (string) backupAttributeCollection["ldv_assembly"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Assembly");
					SetAttributeValue("ldv_assembly", value);
				OnPropertyChanged("Assembly");
			}
		}

		[AttributeLogicalName("ldv_entryclass"), MaxLength(4000)]
		public string EntryClass
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_entryclass");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_entryclass"))
				    value = (string) backupAttributeCollection["ldv_entryclass"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntryClass");
					SetAttributeValue("ldv_entryclass", value);
				OnPropertyChanged("EntryClass");
			}
		}

		[AttributeLogicalName("ldv_entryfunction"), MaxLength(4000)]
		public string EntryFunction
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_entryfunction");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_entryfunction"))
				    value = (string) backupAttributeCollection["ldv_entryfunction"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EntryFunction");
					SetAttributeValue("ldv_entryfunction", value);
				OnPropertyChanged("EntryFunction");
			}
		}

		[AttributeLogicalName("ldv_exceptionlogentry")]
		public Guid? ExceptionLogEntry
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_exceptionlogentry");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionlogentry"))
				    value = (EntityReference) backupAttributeCollection["ldv_exceptionlogentry"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ExceptionLogEntry");
                if (value != null)
				    SetAttributeValue("ldv_exceptionlogentry", new EntityReference("ldv_logentry", value.Value));
                else
					SetAttributeValue("ldv_exceptionlogentry", value);
				OnPropertyChanged("ExceptionLogEntry");
			}
		}

        public string ExceptionLogEntryName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_exceptionlogentry");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionlogentry"))
				    value = (EntityReference) backupAttributeCollection["ldv_exceptionlogentry"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

		[AttributeLogicalName("ldv_exceptionmessage"), MaxLength(1048576)]
		public string ExceptionMessage
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_exceptionmessage");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionmessage"))
				    value = (string) backupAttributeCollection["ldv_exceptionmessage"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExceptionMessage");
					SetAttributeValue("ldv_exceptionmessage", value);
				OnPropertyChanged("ExceptionMessage");
			}
		}

		[AttributeLogicalName("ldv_exceptionthrown")]
		public bool? ExceptionThrown
		{
			get
			{
				var value = GetAttributeValue<bool?>("ldv_exceptionthrown");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionthrown"))
				    value = (bool?) backupAttributeCollection["ldv_exceptionthrown"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExceptionThrown");
					SetAttributeValue("ldv_exceptionthrown", value);
				OnPropertyChanged("ExceptionThrown");
			}
		}

		[AttributeLogicalName("ldv_executionduration"), InRange("0", "2147483647", typeof(int))]
		public int? ExecDurationms
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_executionduration");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_executionduration"))
				    value = (int?) backupAttributeCollection["ldv_executionduration"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExecDurationms");
					SetAttributeValue("ldv_executionduration", value);
				OnPropertyChanged("ExecDurationms");
			}
		}

		[AttributeLogicalName("ldv_executionendstate")]
		public ExecEndStateEnum? ExecEndState
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_executionendstate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_executionendstate"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_executionendstate"];
                return value == null ? (ExecEndStateEnum?) null : (ExecEndStateEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("ExecEndState");
                if (value != null)
				    SetAttributeValue("ldv_executionendstate", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_executionendstate", value);
				OnPropertyChanged("ExecEndState");
			}
		}

		[AttributeLogicalName("ldv_information"), MaxLength(1048576)]
		public string Information
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_information");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_information"))
				    value = (string) backupAttributeCollection["ldv_information"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Information");
					SetAttributeValue("ldv_information", value);
				OnPropertyChanged("Information");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_logId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_logid")]
		public Guid? LogId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_logid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_logid"))
				    value = (Guid?) backupAttributeCollection["ldv_logid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogId");
                if (value != null)
					SetAttributeValue("ldv_logid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("LogId");
			}
		}

        /// <summary>
        /// [MaximumLength=400] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), MaxLength(400)]
		public string LogID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("LogID");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("LogID");
			}
		}

		[AttributeLogicalName("ldv_recordurl"), MaxLength(4000)]
		public string RecordURL
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_recordurl");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recordurl"))
				    value = (string) backupAttributeCollection["ldv_recordurl"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordURL");
					SetAttributeValue("ldv_recordurl", value);
				OnPropertyChanged("RecordURL");
			}
		}

		[AttributeLogicalName("ldv_regardingid"), MaxLength(36)]
		public string RegardingID
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingid"))
				    value = (string) backupAttributeCollection["ldv_regardingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingID");
					SetAttributeValue("ldv_regardingid", value);
				OnPropertyChanged("RegardingID");
			}
		}

		[AttributeLogicalName("ldv_regardingname"), MaxLength(4000)]
		public string RecordName
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingname");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingname"))
				    value = (string) backupAttributeCollection["ldv_regardingname"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordName");
					SetAttributeValue("ldv_regardingname", value);
				OnPropertyChanged("RecordName");
			}
		}

		[AttributeLogicalName("ldv_regardingtype"), MaxLength(2000)]
		public string RegardingType
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_regardingtype");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_regardingtype"))
				    value = (string) backupAttributeCollection["ldv_regardingtype"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RegardingType");
					SetAttributeValue("ldv_regardingtype", value);
				OnPropertyChanged("RegardingType");
			}
		}

		[AttributeLogicalName("ldv_serialisedlogentries"), MaxLength(1048576)]
		public string SerialisedLogEntries
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_serialisedlogentries");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_serialisedlogentries"))
				    value = (string) backupAttributeCollection["ldv_serialisedlogentries"];
			    return value;
			}
			set
			{
				OnPropertyChanging("SerialisedLogEntries");
					SetAttributeValue("ldv_serialisedlogentries", value);
				OnPropertyChanged("SerialisedLogEntries");
			}
		}

		[AttributeLogicalName("ldv_startdate")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_startdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_startdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_startdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("ldv_startdate", value);
				OnPropertyChanged("StartDate");
			}
		}

		[AttributeLogicalName("ldv_title"), MaxLength(4000)]
		public string Title
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_title");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_title"))
				    value = (string) backupAttributeCollection["ldv_title"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Title");
					SetAttributeValue("ldv_title", value);
				OnPropertyChanged("Title");
			}
		}

		[AttributeLogicalName("ldv_user")]
		public Guid? User
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ldv_user");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_user"))
				    value = (EntityReference) backupAttributeCollection["ldv_user"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("User");
                if (value != null)
				    SetAttributeValue("ldv_user", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("ldv_user", value);
				OnPropertyChanged("User");
			}
		}

        public string UserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ldv_user");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_user"))
				    value = (EntityReference) backupAttributeCollection["ldv_user"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Log
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Log
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		public static class RelationNames {
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public Log(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_logid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region ExceptionThrown

		public enum ExceptionThrownEnum
		{
			[EnumMember]Yes = 1,
			[EnumMember]No = 0,
		}

		#endregion
	
		#region ExecEndState

		public enum ExecEndStateEnum
		{
			[EnumMember]Success = 0,
			[EnumMember]Failure = 1,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#region Enums

		public static class Enums
		{
			/// <summary>
			/// Gets the label corresponding to the option-set's value using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="constant">The value from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns></returns>
			public static string GetLabel(string logicalName, int constant, int languageCode = 1033)
			{
				return GeneratorHelpers.GetLabel(logicalName, constant, typeof(Enums), languageCode);
			}
			/// <summary>
			/// Gets the value corresponding to the option-set's label using its logical name,
			/// the value within, and the language code.
			/// </summary>
			/// <param name="logicalName">The logical name of the option-set in CRM</param>
			/// <param name="label">The label from the option-set</param>
			/// <param name="languageCode">The language code from CRM</param>
			/// <returns>The value corresponding to the label</returns>
			public static int GetValue(string logicalName, string label, int languageCode = 1033)
			{
				return GeneratorHelpers.GetValue(logicalName, label, typeof(Enums), languageCode);
			}

			#region Logical names

			public static class Names
			{
				public const string ExceptionThrown = "ldv_exceptionthrown";
				public const string ExecEndState = "ldv_executionendstate";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class ExceptionThrown 
				{
					public const string Yes_1033 = "Yes";
					public const string No_1033 = "No";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ExceptionThrown), label, languageCode);
					}
				}

				public static class ExecEndState 
				{
					public const string Success_1033 = "Success";
					public const string Failure_1033 = "Failure";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(ExecEndState), label, languageCode);
					}
				}

				public static class Status 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(Status), label, languageCode);
					}
				}

				public static class StatusReason 
				{
					public const string Active_1033 = "Active";
					public const string Inactive_1033 = "Inactive";

					public static int GetValue(string label, int languageCode = 1033)
					{
						return GeneratorHelpers.GetValue(typeof(StatusReason), label, languageCode);
					}
				}

			}

			#endregion
		}

		#endregion

		#region Fields

		public static class Fields
		{
			#region Logical names

			public const string CreatedBy = "createdby";
			public const string CreatedOn = "createdon";
			public const string CreatedByDelegate = "createdonbehalfby";
			public const string ImportSequenceNumber = "importsequencenumber";
			public const string Assembly = "ldv_assembly";
			public const string EntryClass = "ldv_entryclass";
			public const string EntryFunction = "ldv_entryfunction";
			public const string ExceptionLogEntry = "ldv_exceptionlogentry";
			public const string ExceptionMessage = "ldv_exceptionmessage";
			public const string ExceptionThrown = "ldv_exceptionthrown";
			public const string ExecDurationms = "ldv_executionduration";
			public const string ExecEndState = "ldv_executionendstate";
			public const string Information = "ldv_information";
			public const string LogId = "ldv_logid";
			public const string LogID = "ldv_name";
			public const string RecordURL = "ldv_recordurl";
			public const string RegardingID = "ldv_regardingid";
			public const string RecordName = "ldv_regardingname";
			public const string RegardingType = "ldv_regardingtype";
			public const string SerialisedLogEntries = "ldv_serialisedlogentries";
			public const string StartDate = "ldv_startdate";
			public const string Title = "ldv_title";
			public const string User = "ldv_user";
			public const string ModifiedBy = "modifiedby";
			public const string ModifiedOn = "modifiedon";
			public const string ModifiedByDelegate = "modifiedonbehalfby";
			public const string RecordCreatedOn = "overriddencreatedon";
			public const string Owner = "ownerid";
			public const string OwningBusinessUnit = "owningbusinessunit";
			public const string OwningTeam = "owningteam";
			public const string OwningUser = "owninguser";
			public const string Status = "statecode";
			public const string StatusReason = "statuscode";
			public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";
			public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";
			public const string VersionNumber = "versionnumber";

			#endregion

			#region Schema names

			public static class Schema
			{
				public const string CreatedBy = "CreatedBy";
				public const string CreatedOn = "CreatedOn";
				public const string CreatedByDelegate = "CreatedOnBehalfBy";
				public const string ImportSequenceNumber = "ImportSequenceNumber";
				public const string Assembly = "ldv_Assembly";
				public const string EntryClass = "ldv_EntryClass";
				public const string EntryFunction = "ldv_EntryFunction";
				public const string ExceptionLogEntry = "ldv_ExceptionLogEntry";
				public const string ExceptionMessage = "ldv_ExceptionMessage";
				public const string ExceptionThrown = "ldv_ExceptionThrown";
				public const string ExecDurationms = "ldv_ExecutionDuration";
				public const string ExecEndState = "ldv_ExecutionEndState";
				public const string Information = "ldv_Information";
				public const string LogId = "ldv_logId";
				public const string LogID = "ldv_name";
				public const string RecordURL = "ldv_RecordURL";
				public const string RegardingID = "ldv_RegardingID";
				public const string RecordName = "ldv_RegardingName";
				public const string RegardingType = "ldv_RegardingType";
				public const string SerialisedLogEntries = "ldv_SerialisedLogEntries";
				public const string StartDate = "ldv_StartDate";
				public const string Title = "ldv_Title";
				public const string User = "ldv_User";
				public const string ModifiedBy = "ModifiedBy";
				public const string ModifiedOn = "ModifiedOn";
				public const string ModifiedByDelegate = "ModifiedOnBehalfBy";
				public const string RecordCreatedOn = "OverriddenCreatedOn";
				public const string Owner = "OwnerId";
				public const string OwningBusinessUnit = "OwningBusinessUnit";
				public const string OwningTeam = "OwningTeam";
				public const string OwningUser = "OwningUser";
				public const string Status = "statecode";
				public const string StatusReason = "statuscode";
				public const string TimeZoneRuleVersionNumber = "TimeZoneRuleVersionNumber";
				public const string UTCConversionTimeZoneCode = "UTCConversionTimeZoneCode";
				public const string VersionNumber = "VersionNumber";
			}

			#endregion

			#region Labels

			public static class Labels
			{
				public static class CreatedBy
				{
					public const string _1033 = "Created By";
				}

				public static class CreatedOn
				{
					public const string _1033 = "Created On";
				}

				public static class CreatedByDelegate
				{
					public const string _1033 = "Created By (Delegate)";
				}

				public static class ImportSequenceNumber
				{
					public const string _1033 = "Import Sequence Number";
				}

				public static class Assembly
				{
					public const string _1033 = "Assembly";
				}

				public static class EntryClass
				{
					public const string _1033 = "Entry Class";
				}

				public static class EntryFunction
				{
					public const string _1033 = "Entry Function";
				}

				public static class ExceptionLogEntry
				{
					public const string _1033 = "Exception Log Entry";
				}

				public static class ExceptionMessage
				{
					public const string _1033 = "Exception Message";
				}

				public static class ExceptionThrown
				{
					public const string _1033 = "Exception Thrown";
				}

				public static class ExecDurationms
				{
					public const string _1033 = "Exec. Duration (ms)";
				}

				public static class ExecEndState
				{
					public const string _1033 = "Exec. End State";
				}

				public static class Information
				{
					public const string _1033 = "Information";
				}

				public static class LogId
				{
					public const string _1033 = "Log";
				}

				public static class LogID
				{
					public const string _1033 = "Log ID";
				}

				public static class RecordURL
				{
					public const string _1033 = "Record URL";
				}

				public static class RegardingID
				{
					public const string _1033 = "Regarding ID";
				}

				public static class RecordName
				{
					public const string _1033 = "Record Name";
				}

				public static class RegardingType
				{
					public const string _1033 = "Regarding Type";
				}

				public static class SerialisedLogEntries
				{
					public const string _1033 = "Serialised Log Entries";
				}

				public static class StartDate
				{
					public const string _1033 = "Start Date";
				}

				public static class Title
				{
					public const string _1033 = "Title";
				}

				public static class User
				{
					public const string _1033 = "User";
				}

				public static class ModifiedBy
				{
					public const string _1033 = "Modified By";
				}

				public static class ModifiedOn
				{
					public const string _1033 = "Modified On";
				}

				public static class ModifiedByDelegate
				{
					public const string _1033 = "Modified By (Delegate)";
				}

				public static class RecordCreatedOn
				{
					public const string _1033 = "Record Created On";
				}

				public static class Owner
				{
					public const string _1033 = "Owner";
				}

				public static class OwningBusinessUnit
				{
					public const string _1033 = "Owning Business Unit";
				}

				public static class OwningTeam
				{
					public const string _1033 = "Owning Team";
				}

				public static class OwningUser
				{
					public const string _1033 = "Owning User";
				}

				public static class Status
				{
					public const string _1033 = "Status";
				}

				public static class StatusReason
				{
					public const string _1033 = "Status Reason";
				}

				public static class TimeZoneRuleVersionNumber
				{
					public const string _1033 = "Time Zone Rule Version Number";
				}

				public static class UTCConversionTimeZoneCode
				{
					public const string _1033 = "UTC Conversion Time Zone Code";
				}

				public static class VersionNumber
				{
					public const string _1033 = "Version Number";
				}

			}

			#endregion
		}

		#endregion

		#region Relations

		public static class Relations
		{
			public static class OneToN
			{
			}
			
			public static class NToOne
			{

				public static class Lookups
				{
				}
			}

			public static class NToN
			{

			}
		}

		#endregion

		#endregion
	}

	#endregion

	#region RecurrenceRule

	/// <summary>
	/// 'ldv_recurrencerule'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_recurrencerule")]
	public partial class RecurrenceRule : GeneratedEntity<RecurrenceRule.RelationName>
	{
		
		public RecurrenceRule() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Recurrence Rule";
		public const string SchemaName = "ldv_recurrencerule";
		public const string EntityLogicalName = "ldv_recurrencerule";
		public const int EntityTypeCode = 10027;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_recurrenceruleid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (RecurrenceRuleId == null || RecurrenceRuleId == Guid.Empty) ? base.Id : RecurrenceRuleId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_recurrenceruleid");
                    base.Id = value;
                } else {
				    RecurrenceRuleId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_dailyfrequency"), InRange("1", "2147483647", typeof(int))]
		public int? DailyFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_dailyfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_dailyfrequency"))
				    value = (int?) backupAttributeCollection["ldv_dailyfrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DailyFrequency");
					SetAttributeValue("ldv_dailyfrequency", value);
				OnPropertyChanged("DailyFrequency");
			}
		}

		[AttributeLogicalName("ldv_dayoccurrences"), MaxLength(4000)]
		public string DayOccurrences
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_dayoccurrences");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_dayoccurrences"))
				    value = (string) backupAttributeCollection["ldv_dayoccurrences"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DayOccurrences");
					SetAttributeValue("ldv_dayoccurrences", value);
				OnPropertyChanged("DayOccurrences");
			}
		}

		[AttributeLogicalName("ldv_daysofthemonth"), MaxLength(4000)]
		public string DaysOfTheMonth
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_daysofthemonth");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_daysofthemonth"))
				    value = (string) backupAttributeCollection["ldv_daysofthemonth"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DaysOfTheMonth");
					SetAttributeValue("ldv_daysofthemonth", value);
				OnPropertyChanged("DaysOfTheMonth");
			}
		}

		[AttributeLogicalName("ldv_enddate")]
		public DateTime? EndDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_enddate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_enddate"))
				    value = (DateTime?) backupAttributeCollection["ldv_enddate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EndDate");
					SetAttributeValue("ldv_enddate", value);
				OnPropertyChanged("EndDate");
			}
		}

		[AttributeLogicalName("ldv_exceptionupdatedtrigger"), MaxLength(4000)]
		public string ExceptionUpdatedTrigger
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_exceptionupdatedtrigger");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_exceptionupdatedtrigger"))
				    value = (string) backupAttributeCollection["ldv_exceptionupdatedtrigger"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ExceptionUpdatedTrigger");
					SetAttributeValue("ldv_exceptionupdatedtrigger", value);
				OnPropertyChanged("ExceptionUpdatedTrigger");
			}
		}

		[AttributeLogicalName("ldv_hourlyfrequency"), InRange("1", "2147483647", typeof(int))]
		public int? HourlyFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_hourlyfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_hourlyfrequency"))
				    value = (int?) backupAttributeCollection["ldv_hourlyfrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("HourlyFrequency");
					SetAttributeValue("ldv_hourlyfrequency", value);
				OnPropertyChanged("HourlyFrequency");
			}
		}

		[AttributeLogicalName("ldv_minutefrequency"), InRange("1", "2147483647", typeof(int))]
		public int? MinuteFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_minutefrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_minutefrequency"))
				    value = (int?) backupAttributeCollection["ldv_minutefrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("MinuteFrequency");
					SetAttributeValue("ldv_minutefrequency", value);
				OnPropertyChanged("MinuteFrequency");
			}
		}

		[AttributeLogicalName("ldv_monthlydayoccurrence")]
		public MonthlyDayOccurrenceEnum? MonthlyDayOccurrence
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_monthlydayoccurrence");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monthlydayoccurrence"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_monthlydayoccurrence"];
                return value == null ? (MonthlyDayOccurrenceEnum?) null : (MonthlyDayOccurrenceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MonthlyDayOccurrence");
                if (value != null)
				    SetAttributeValue("ldv_monthlydayoccurrence", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_monthlydayoccurrence", value);
				OnPropertyChanged("MonthlyDayOccurrence");
			}
		}

		[AttributeLogicalName("ldv_monthlypattern")]
		public MonthlyPatternEnum? MonthlyPattern
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_monthlypattern");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monthlypattern"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_monthlypattern"];
                return value == null ? (MonthlyPatternEnum?) null : (MonthlyPatternEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MonthlyPattern");
                if (value != null)
				    SetAttributeValue("ldv_monthlypattern", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_monthlypattern", value);
				OnPropertyChanged("MonthlyPattern");
			}
		}

		[AttributeLogicalName("ldv_monthofyear")]
		public MonthOfYearEnum? MonthOfYear
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_monthofyear");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monthofyear"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_monthofyear"];
                return value == null ? (MonthOfYearEnum?) null : (MonthOfYearEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MonthOfYear");
                if (value != null)
				    SetAttributeValue("ldv_monthofyear", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_monthofyear", value);
				OnPropertyChanged("MonthOfYear");
			}
		}

		[AttributeLogicalName("ldv_months"), MaxLength(4000)]
		public string Months
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_months");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_months"))
				    value = (string) backupAttributeCollection["ldv_months"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Months");
					SetAttributeValue("ldv_months", value);
				OnPropertyChanged("Months");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

		[AttributeLogicalName("ldv_occurrencecount"), InRange("1", "2147483647", typeof(int))]
		public int? OccurrenceCount
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_occurrencecount");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_occurrencecount"))
				    value = (int?) backupAttributeCollection["ldv_occurrencecount"];
			    return value;
			}
			set
			{
				OnPropertyChanging("OccurrenceCount");
					SetAttributeValue("ldv_occurrencecount", value);
				OnPropertyChanged("OccurrenceCount");
			}
		}

		[AttributeLogicalName("ldv_recurrencepattern"), Required]
		public RecurrencePatternEnum? RecurrencePattern
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_recurrencepattern");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrencepattern"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_recurrencepattern"];
                return value == null ? (RecurrencePatternEnum?) null : (RecurrencePatternEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("RecurrencePattern");
                if (value != null)
				    SetAttributeValue("ldv_recurrencepattern", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_recurrencepattern", value);
				OnPropertyChanged("RecurrencePattern");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_recurrenceruleId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_recurrenceruleid")]
		public Guid? RecurrenceRuleId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleId");
                if (value != null)
					SetAttributeValue("ldv_recurrenceruleid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("RecurrenceRuleId");
			}
		}

		[AttributeLogicalName("ldv_startdate"), Required]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_startdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_startdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_startdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("ldv_startdate", value);
				OnPropertyChanged("StartDate");
			}
		}

		[AttributeLogicalName("ldv_weekday")]
		public WeekDayEnum? WeekDay
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_weekday");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekday"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_weekday"];
                return value == null ? (WeekDayEnum?) null : (WeekDayEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("WeekDay");
                if (value != null)
				    SetAttributeValue("ldv_weekday", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_weekday", value);
				OnPropertyChanged("WeekDay");
			}
		}

		[AttributeLogicalName("ldv_weekdays"), MaxLength(4000)]
		public string WeekDays
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_weekdays");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekdays"))
				    value = (string) backupAttributeCollection["ldv_weekdays"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WeekDays");
					SetAttributeValue("ldv_weekdays", value);
				OnPropertyChanged("WeekDays");
			}
		}

		[AttributeLogicalName("ldv_weeklyfrequency"), InRange("1", "2147483647", typeof(int))]
		public int? WeeklyFrequency
		{
			get
			{
				var value = GetAttributeValue<int?>("ldv_weeklyfrequency");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weeklyfrequency"))
				    value = (int?) backupAttributeCollection["ldv_weeklyfrequency"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WeeklyFrequency");
					SetAttributeValue("ldv_weeklyfrequency", value);
				OnPropertyChanged("WeeklyFrequency");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Recurrence Rule
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Recurrence Rule
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// 1:N, 'ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule")]
		public CustomJob[] CustomJobsOfRetrySchedule
		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJob>("ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobsOfRetrySchedule");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJob>("ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule", null, value);
				OnPropertyChanged("CustomJobsOfRetrySchedule");
			}
		}
		
		/// <summary>
		/// 1:N, 'ldv_recurrencerule_customjob_SubJobsRetryScheduleId'
		/// </summary>
		[RelationshipSchemaName("ldv_recurrencerule_customjob_SubJobsRetryScheduleId")]
		public CustomJob[] CustomJobsOfSubJobsRetrySchedule
		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJob>("ldv_recurrencerule_customjob_SubJobsRetryScheduleId", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobsOfSubJobsRetrySchedule");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJob>("ldv_recurrencerule_customjob_SubJobsRetryScheduleId", null, value);
				OnPropertyChanged("CustomJobsOfSubJobsRetrySchedule");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_customjob_ldv_recurrencerule'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_customjob_ldv_recurrencerule")]
		public CustomJob[] CustomJobsOfldv_ldv_customjob_ldv_recurrencerule

		{
			get
			{
				var enumerable = GetRelatedEntities<CustomJob>("ldv_ldv_customjob_ldv_recurrencerule", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("CustomJobsOfldv_ldv_customjob_ldv_recurrencerule");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<CustomJob>("ldv_ldv_customjob_ldv_recurrencerule", null, value);
				OnPropertyChanged("CustomJobsOfldv_ldv_customjob_ldv_recurrencerule");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceexgroup'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceexgroup")]
		public RecurrenceRuleExceptionGrouping[] RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceruleexce'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceruleexce")]
		public RecurrenceRuleException[] RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
			}
		}
		
		public static class RelationNames {
			public static RelationName CustomJobsOfRetrySchedule = new RelationName("CustomJobsOfRetrySchedule");
			public static RelationName CustomJobsOfSubJobsRetrySchedule = new RelationName("CustomJobsOfSubJobsRetrySchedule");
			public static RelationName CustomJobsOfldv_ldv_customjob_ldv_recurrencerule = new RelationName("CustomJobsOfldv_ldv_customjob_ldv_recurrencerule");
			public static RelationName RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup = new RelationName("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			public static RelationName RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce = new RelationName("RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["CustomJobsOfRetrySchedule"] = new object[] { "CustomJobsOfRetrySchedule", "ldv_customjob", "ldv_recurrencerule", "ldv_retryschedule", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_customjob_RetrySchedule", typeof (CustomJob[]) };
			relationProperties["CustomJobsOfSubJobsRetrySchedule"] = new object[] { "CustomJobsOfSubJobsRetrySchedule", "ldv_customjob", "ldv_recurrencerule", "ldv_subjobsretryscheduleid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_recurrencerule_customjob_SubJobsRetryScheduleId", typeof (CustomJob[]) };
			relationProperties["CustomJobsOfldv_ldv_customjob_ldv_recurrencerule"] = new object[] { "CustomJobsOfldv_ldv_customjob_ldv_recurrencerule", "ldv_customjob", "ldv_ldv_customjob_ldv_recurrencerule", "ldv_customjobid", "ldv_customjobid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_customjob_ldv_recurrencerule", typeof (CustomJob[]) };
			relationProperties["RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup"] = new object[] { "RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrencerule_ldv_recurrenceexgroup", "ldv_recurrenceruleexceptiongrouping", "ldv_ldv_recurrencerule_ldv_recurrenceexgrou", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceexgroup", typeof (RecurrenceRuleExceptionGrouping[]) };
			relationProperties["RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce"] = new object[] { "RecurrenceRuleExceptionsOfldv_ldv_recurrencerule_ldv_recurrenceruleexce", "ldv_recurrenceruleexception", "ldv_ldv_recurrencerule_ldv_recurrenceruleex", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexce", typeof (RecurrenceRuleException[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public RecurrenceRule(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_recurrenceruleid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region MonthlyDayOccurrence

		public enum MonthlyDayOccurrenceEnum
		{
			[EnumMember]First = 1,
			[EnumMember]Second = 2,
			[EnumMember]Third = 3,
			[EnumMember]Fourth = 4,
			[EnumMember]Last = 5,
		}

		#endregion
	
		#region MonthlyPattern

		public enum MonthlyPatternEnum
		{
			[EnumMember]SpecificDays = 1,
			[EnumMember]DayOccurrence = 2,
		}

		#endregion
	
		#region MonthOfYear

		public enum MonthOfYearEnum
		{
			[EnumMember]January = 1,
			[EnumMember]February = 2,
			[EnumMember]March = 3,
			[EnumMember]April = 4,
			[EnumMember]May = 5,
			[EnumMember]June = 6,
			[EnumMember]July = 7,
			[EnumMember]August = 8,
			[EnumMember]September = 9,
			[EnumMember]October = 10,
			[EnumMember]November = 11,
			[EnumMember]December = 12,
		}

		#endregion
	
		#region RecurrencePattern

		public enum RecurrencePatternEnum
		{
			[EnumMember]EveryMinute = 1,
			[EnumMember]Hourly = 2,
			[EnumMember]Daily = 3,
			[EnumMember]Weekly = 4,
			[EnumMember]Monthly = 5,
		}

		#endregion
	
		#region WeekDay

		public enum WeekDayEnum
		{
			[EnumMember]Sunday = 1,
			[EnumMember]Monday = 2,
			[EnumMember]Tuesday = 3,
			[EnumMember]Wednesday = 4,
			[EnumMember]Thursday = 5,
			[EnumMember]Friday = 6,
			[EnumMember]Saturday = 7,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region RecurrenceRuleException

	/// <summary>
	/// 'ldv_recurrenceruleexception'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_recurrenceruleexception")]
	public partial class RecurrenceRuleException : GeneratedEntity<RecurrenceRuleException.RelationName>
	{
		
		public RecurrenceRuleException() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Recurrence Rule Exception";
		public const string SchemaName = "ldv_recurrenceruleexception";
		public const string EntityLogicalName = "ldv_recurrenceruleexception";
		public const int EntityTypeCode = 10028;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_recurrenceruleexceptionid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (RecurrenceRuleExceptionId == null || RecurrenceRuleExceptionId == Guid.Empty) ? base.Id : RecurrenceRuleExceptionId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_recurrenceruleexceptionid");
                    base.Id = value;
                } else {
				    RecurrenceRuleExceptionId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

		[AttributeLogicalName("ldv_dayoccurrences"), MaxLength(4000)]
		public string DayOccurrences
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_dayoccurrences");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_dayoccurrences"))
				    value = (string) backupAttributeCollection["ldv_dayoccurrences"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DayOccurrences");
					SetAttributeValue("ldv_dayoccurrences", value);
				OnPropertyChanged("DayOccurrences");
			}
		}

		[AttributeLogicalName("ldv_daysofthemonth"), MaxLength(4000)]
		public string DaysOfTheMonth
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_daysofthemonth");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_daysofthemonth"))
				    value = (string) backupAttributeCollection["ldv_daysofthemonth"];
			    return value;
			}
			set
			{
				OnPropertyChanging("DaysOfTheMonth");
					SetAttributeValue("ldv_daysofthemonth", value);
				OnPropertyChanged("DaysOfTheMonth");
			}
		}

		[AttributeLogicalName("ldv_enddate")]
		public DateTime? EndDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_enddate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_enddate"))
				    value = (DateTime?) backupAttributeCollection["ldv_enddate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("EndDate");
					SetAttributeValue("ldv_enddate", value);
				OnPropertyChanged("EndDate");
			}
		}

		[AttributeLogicalName("ldv_hours"), MaxLength(4000)]
		public string Hours
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_hours");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_hours"))
				    value = (string) backupAttributeCollection["ldv_hours"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Hours");
					SetAttributeValue("ldv_hours", value);
				OnPropertyChanged("Hours");
			}
		}

		[AttributeLogicalName("ldv_minutes"), MaxLength(4000)]
		public string Minutes
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_minutes");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_minutes"))
				    value = (string) backupAttributeCollection["ldv_minutes"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Minutes");
					SetAttributeValue("ldv_minutes", value);
				OnPropertyChanged("Minutes");
			}
		}

		[AttributeLogicalName("ldv_month")]
		public MonthEnum? Month
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_month");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_month"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_month"];
                return value == null ? (MonthEnum?) null : (MonthEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Month");
                if (value != null)
				    SetAttributeValue("ldv_month", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_month", value);
				OnPropertyChanged("Month");
			}
		}

		[AttributeLogicalName("ldv_monthlydayoccurrence")]
		public MonthlyDayOccurrenceEnum? MonthlyDayOccurrence
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_monthlydayoccurrence");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_monthlydayoccurrence"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_monthlydayoccurrence"];
                return value == null ? (MonthlyDayOccurrenceEnum?) null : (MonthlyDayOccurrenceEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("MonthlyDayOccurrence");
                if (value != null)
				    SetAttributeValue("ldv_monthlydayoccurrence", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_monthlydayoccurrence", value);
				OnPropertyChanged("MonthlyDayOccurrence");
			}
		}

		[AttributeLogicalName("ldv_months"), MaxLength(4000)]
		public string Months
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_months");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_months"))
				    value = (string) backupAttributeCollection["ldv_months"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Months");
					SetAttributeValue("ldv_months", value);
				OnPropertyChanged("Months");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_recurrenceruleexceptionId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_recurrenceruleexceptionid")]
		public Guid? RecurrenceRuleExceptionId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptionid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptionid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptionid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionId");
                if (value != null)
					SetAttributeValue("ldv_recurrenceruleexceptionid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("RecurrenceRuleExceptionId");
			}
		}

		[AttributeLogicalName("ldv_startdate")]
		public DateTime? StartDate
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("ldv_startdate");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_startdate"))
				    value = (DateTime?) backupAttributeCollection["ldv_startdate"];
			    return value;
			}
			set
			{
				OnPropertyChanging("StartDate");
					SetAttributeValue("ldv_startdate", value);
				OnPropertyChanged("StartDate");
			}
		}

		[AttributeLogicalName("ldv_weekday")]
		public WeekDayEnum? WeekDay
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("ldv_weekday");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekday"))
				    value = (OptionSetValue) backupAttributeCollection["ldv_weekday"];
                return value == null ? (WeekDayEnum?) null : (WeekDayEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("WeekDay");
                if (value != null)
				    SetAttributeValue("ldv_weekday", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("ldv_weekday", value);
				OnPropertyChanged("WeekDay");
			}
		}

		[AttributeLogicalName("ldv_weekdays"), MaxLength(4000)]
		public string WeekDays
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_weekdays");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_weekdays"))
				    value = (string) backupAttributeCollection["ldv_weekdays"];
			    return value;
			}
			set
			{
				OnPropertyChanging("WeekDays");
					SetAttributeValue("ldv_weekdays", value);
				OnPropertyChanged("WeekDays");
			}
		}

		[AttributeLogicalName("ldv_years"), MaxLength(4000)]
		public string Years
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_years");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_years"))
				    value = (string) backupAttributeCollection["ldv_years"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Years");
					SetAttributeValue("ldv_years", value);
				OnPropertyChanged("Years");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Recurrence Rule Exception
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Recurrence Rule Exception
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceruleexce'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceruleexce")]
		public RecurrenceRule[] RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceruleexce", null, value);
				OnPropertyChanged("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrenceruleexceptiongrouping_ldv_r'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r")]
		public RecurrenceRuleExceptionGrouping[] RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleExceptionGrouping>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce = new RelationName("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce");
			public static RelationName RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r = new RelationName("RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce"] = new object[] { "RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceruleexce", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceruleex", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrencerule_ldv_recurrenceruleexce", typeof (RecurrenceRule[]) };
			relationProperties["RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r"] = new object[] { "RecurrenceRuleExceptionGroupingsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r", "ldv_recurrenceruleexceptiongrouping", "ldv_ldv_recurrenceruleexceptiongrouping_ldv", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", typeof (RecurrenceRuleExceptionGrouping[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public RecurrenceRuleException(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_recurrenceruleexceptionid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region Month

		public enum MonthEnum
		{
			[EnumMember]January = 1,
			[EnumMember]February = 2,
			[EnumMember]March = 3,
			[EnumMember]April = 4,
			[EnumMember]May = 5,
			[EnumMember]June = 6,
			[EnumMember]July = 7,
			[EnumMember]August = 8,
			[EnumMember]September = 9,
			[EnumMember]October = 10,
			[EnumMember]November = 11,
			[EnumMember]December = 12,
		}

		#endregion
	
		#region MonthlyDayOccurrence

		public enum MonthlyDayOccurrenceEnum
		{
			[EnumMember]First = 1,
			[EnumMember]Second = 2,
			[EnumMember]Third = 3,
			[EnumMember]Fourth = 4,
			[EnumMember]Last = 5,
		}

		#endregion
	
		#region WeekDay

		public enum WeekDayEnum
		{
			[EnumMember]Sunday = 1,
			[EnumMember]Monday = 2,
			[EnumMember]Tuesday = 3,
			[EnumMember]Wednesday = 4,
			[EnumMember]Thursday = 5,
			[EnumMember]Friday = 6,
			[EnumMember]Saturday = 7,
		}

		#endregion
	
		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#region RecurrenceRuleExceptionGrouping

	/// <summary>
	/// 'ldv_recurrenceruleexceptiongrouping'.<br />
	/// 
	/// </summary>
	[ExcludeFromCodeCoverage]
	[DebuggerNonUserCode]
	[DataContract, EntityLogicalName("ldv_recurrenceruleexceptiongrouping")]
	public partial class RecurrenceRuleExceptionGrouping : GeneratedEntity<RecurrenceRuleExceptionGrouping.RelationName>
	{
		
		public RecurrenceRuleExceptionGrouping() : 
				base(EntityLogicalName)
		{
		}
		
		public const string DisplayName = "Recurrence Rule Exception Grouping";
		public const string SchemaName = "ldv_recurrenceruleexceptiongrouping";
		public const string EntityLogicalName = "ldv_recurrenceruleexceptiongrouping";
		public const int EntityTypeCode = 10029;
		
		public class RelationName : RelationNameBase
		{
			public RelationName(string name) : base(name)
			{}
		}


		#region Attributes

		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid"), DataMember]
		public override System.Guid Id
		{
			get
			{
				return (RecurrenceRuleExceptionGroupingId == null || RecurrenceRuleExceptionGroupingId == Guid.Empty) ? base.Id : RecurrenceRuleExceptionGroupingId.GetValueOrDefault();
			}
			
			set
			{
                if (value == Guid.Empty) {
                    Attributes.Remove("ldv_recurrenceruleexceptiongroupingid");
                    base.Id = value;
                } else {
				    RecurrenceRuleExceptionGroupingId = value;
                }
			}
		}

        /// <summary>
        ///  
		/// 'CreatedBy'.<br />
        /// Unique identifier of the user who created the record.
        /// </summary>
		[AttributeLogicalName("createdby")]
		public Guid? CreatedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedBy");
                if (value != null)
				    SetAttributeValue("createdby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdby", value);
				OnPropertyChanged("CreatedBy");
			}
		}

        public string CreatedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdby"))
				    value = (EntityReference) backupAttributeCollection["createdby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'CreatedOn'.<br />
        /// Date and time when the record was created.
        /// </summary>
		[AttributeLogicalName("createdon")]
		public DateTime? CreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("createdon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdon"))
				    value = (DateTime?) backupAttributeCollection["createdon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("CreatedOn");
					SetAttributeValue("createdon", value);
				OnPropertyChanged("CreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'CreatedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who created the record.
        /// </summary>
		[AttributeLogicalName("createdonbehalfby")]
		public Guid? CreatedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("CreatedByDelegate");
                if (value != null)
				    SetAttributeValue("createdonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("createdonbehalfby", value);
				OnPropertyChanged("CreatedByDelegate");
			}
		}

        public string CreatedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("createdonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("createdonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["createdonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        /// [Range(-2147483648, 2147483647)] 
		/// 'ImportSequenceNumber'.<br />
        /// Sequence number of the import that created this record.
        /// </summary>
		[AttributeLogicalName("importsequencenumber"), InRange("-2147483648", "2147483647", typeof(int))]
		public int? ImportSequenceNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("importsequencenumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("importsequencenumber"))
				    value = (int?) backupAttributeCollection["importsequencenumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ImportSequenceNumber");
					SetAttributeValue("importsequencenumber", value);
				OnPropertyChanged("ImportSequenceNumber");
			}
		}

        /// <summary>
        /// [Required][MaximumLength=100] 
		/// 'ldv_name'.<br />
        /// The name of the custom entity.
        /// </summary>
		[AttributeLogicalName("ldv_name"), Required, MaxLength(100)]
		public string Name
		{
			get
			{
				var value = GetAttributeValue<string>("ldv_name");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_name"))
				    value = (string) backupAttributeCollection["ldv_name"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Name");
					SetAttributeValue("ldv_name", value);
				OnPropertyChanged("Name");
			}
		}

        /// <summary>
        ///  
		/// 'ldv_recurrenceruleexceptiongroupingId'.<br />
        /// Unique identifier for entity instances
        /// </summary>
		[AttributeLogicalName("ldv_recurrenceruleexceptiongroupingid")]
		public Guid? RecurrenceRuleExceptionGroupingId
		{
			get
			{
				var value = GetAttributeValue<Guid?>("ldv_recurrenceruleexceptiongroupingid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ldv_recurrenceruleexceptiongroupingid"))
				    value = (Guid?) backupAttributeCollection["ldv_recurrenceruleexceptiongroupingid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionGroupingId");
                if (value != null)
					SetAttributeValue("ldv_recurrenceruleexceptiongroupingid", value);
				if (value != null)
					base.Id = value.Value;
				else
					Id = System.Guid.Empty;
				OnPropertyChanged("RecurrenceRuleExceptionGroupingId");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedBy'.<br />
        /// Unique identifier of the user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedby")]
		public Guid? ModifiedBy
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedBy");
                if (value != null)
				    SetAttributeValue("modifiedby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedby", value);
				OnPropertyChanged("ModifiedBy");
			}
		}

        public string ModifiedByName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedby"))
				    value = (EntityReference) backupAttributeCollection["modifiedby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'ModifiedOn'.<br />
        /// Date and time when the record was modified.
        /// </summary>
		[AttributeLogicalName("modifiedon")]
		public DateTime? ModifiedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("modifiedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedon"))
				    value = (DateTime?) backupAttributeCollection["modifiedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("ModifiedOn");
					SetAttributeValue("modifiedon", value);
				OnPropertyChanged("ModifiedOn");
			}
		}

        /// <summary>
        ///  
		/// 'ModifiedOnBehalfBy'.<br />
        /// Unique identifier of the delegate user who modified the record.
        /// </summary>
		[AttributeLogicalName("modifiedonbehalfby")]
		public Guid? ModifiedByDelegate
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("ModifiedByDelegate");
                if (value != null)
				    SetAttributeValue("modifiedonbehalfby", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("modifiedonbehalfby", value);
				OnPropertyChanged("ModifiedByDelegate");
			}
		}

        public string ModifiedByDelegateName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("modifiedonbehalfby");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("modifiedonbehalfby"))
				    value = (EntityReference) backupAttributeCollection["modifiedonbehalfby"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OverriddenCreatedOn'.<br />
        /// Date and time that the record was migrated.
        /// </summary>
		[AttributeLogicalName("overriddencreatedon")]
		public DateTime? RecordCreatedOn
		{
			get
			{
				var value = GetAttributeValue<DateTime?>("overriddencreatedon");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("overriddencreatedon"))
				    value = (DateTime?) backupAttributeCollection["overriddencreatedon"];
			    return value;
			}
			set
			{
				OnPropertyChanging("RecordCreatedOn");
					SetAttributeValue("overriddencreatedon", value);
				OnPropertyChanged("RecordCreatedOn");
			}
		}

        /// <summary>
        ///  
		/// 'OwnerId'.<br />
        /// Owner Id
        /// </summary>
		[AttributeLogicalName("ownerid")]
		public EntityReference Owner
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
			    return value;
			}
			set
			{
				OnPropertyChanging("Owner");
					SetAttributeValue("ownerid", value);
				OnPropertyChanged("Owner");
			}
		}

        public string OwnerName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("ownerid");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("ownerid"))
				    value = (EntityReference) backupAttributeCollection["ownerid"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningBusinessUnit'.<br />
        /// Unique identifier for the business unit that owns the record
        /// </summary>
		[AttributeLogicalName("owningbusinessunit")]
		public Guid? OwningBusinessUnit
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningBusinessUnit");
                if (value != null)
				    SetAttributeValue("owningbusinessunit", new EntityReference("businessunit", value.Value));
                else
					SetAttributeValue("owningbusinessunit", value);
				OnPropertyChanged("OwningBusinessUnit");
			}
		}

        public string OwningBusinessUnitName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningbusinessunit");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningbusinessunit"))
				    value = (EntityReference) backupAttributeCollection["owningbusinessunit"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningTeam'.<br />
        /// Unique identifier for the team that owns the record.
        /// </summary>
		[AttributeLogicalName("owningteam")]
		public Guid? OwningTeam
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningTeam");
                if (value != null)
				    SetAttributeValue("owningteam", new EntityReference("team", value.Value));
                else
					SetAttributeValue("owningteam", value);
				OnPropertyChanged("OwningTeam");
			}
		}

        public string OwningTeamName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owningteam");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owningteam"))
				    value = (EntityReference) backupAttributeCollection["owningteam"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'OwningUser'.<br />
        /// Unique identifier for the user that owns the record.
        /// </summary>
		[AttributeLogicalName("owninguser")]
		public Guid? OwningUser
		{
			get
			{
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (Guid?) null : value.Id;
			}
			set
			{
				OnPropertyChanging("OwningUser");
                if (value != null)
				    SetAttributeValue("owninguser", new EntityReference("systemuser", value.Value));
                else
					SetAttributeValue("owninguser", value);
				OnPropertyChanged("OwningUser");
			}
		}

        public string OwningUserName
        {
		    get
		    {
				var value = GetAttributeValue<EntityReference>("owninguser");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("owninguser"))
				    value = (EntityReference) backupAttributeCollection["owninguser"];
                return value == null ? (string) null : value.Name;
            }
            set
            {}
        }

        /// <summary>
        ///  
		/// 'statecode'.<br />
        /// Status of the Recurrence Rule Exception Grouping
        /// </summary>
		[AttributeLogicalName("statecode")]
		public StatusEnum? Status
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statecode"))
				    value = (OptionSetValue) backupAttributeCollection["statecode"];
                return value == null ? (StatusEnum?) null : (StatusEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("Status");
                if (value != null)
				    SetAttributeValue("statecode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statecode", value);
				OnPropertyChanged("Status");
			}
		}

        /// <summary>
        ///  
		/// 'statuscode'.<br />
        /// Reason for the status of the Recurrence Rule Exception Grouping
        /// </summary>
		[AttributeLogicalName("statuscode")]
		public StatusReasonEnum? StatusReason
		{
			get
			{
				var value = GetAttributeValue<OptionSetValue>("statuscode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("statuscode"))
				    value = (OptionSetValue) backupAttributeCollection["statuscode"];
                return value == null ? (StatusReasonEnum?) null : (StatusReasonEnum?) value.Value;
			}
			set
			{
				OnPropertyChanging("StatusReason");
                if (value != null)
				    SetAttributeValue("statuscode", new OptionSetValue((int) value.Value));
                else
					SetAttributeValue("statuscode", value);
				OnPropertyChanged("StatusReason");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'TimeZoneRuleVersionNumber'.<br />
        /// For internal use only.
        /// </summary>
		[AttributeLogicalName("timezoneruleversionnumber"), InRange("-1", "2147483647", typeof(int))]
		public int? TimeZoneRuleVersionNumber
		{
			get
			{
				var value = GetAttributeValue<int?>("timezoneruleversionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("timezoneruleversionnumber"))
				    value = (int?) backupAttributeCollection["timezoneruleversionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("TimeZoneRuleVersionNumber");
					SetAttributeValue("timezoneruleversionnumber", value);
				OnPropertyChanged("TimeZoneRuleVersionNumber");
			}
		}

        /// <summary>
        /// [Range(-1, 2147483647)] 
		/// 'UTCConversionTimeZoneCode'.<br />
        /// Time zone code that was in use when the record was created.
        /// </summary>
		[AttributeLogicalName("utcconversiontimezonecode"), InRange("-1", "2147483647", typeof(int))]
		public int? UTCConversionTimeZoneCode
		{
			get
			{
				var value = GetAttributeValue<int?>("utcconversiontimezonecode");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("utcconversiontimezonecode"))
				    value = (int?) backupAttributeCollection["utcconversiontimezonecode"];
			    return value;
			}
			set
			{
				OnPropertyChanging("UTCConversionTimeZoneCode");
					SetAttributeValue("utcconversiontimezonecode", value);
				OnPropertyChanged("UTCConversionTimeZoneCode");
			}
		}

        /// <summary>
        ///  
		/// 'VersionNumber'.<br />
        /// Version Number
        /// </summary>
		[AttributeLogicalName("versionnumber")]
		public long? VersionNumber
		{
			get
			{
				var value = GetAttributeValue<long?>("versionnumber");
				if (value == null && backupAttributeCollection != null && backupAttributeCollection.Contains("versionnumber"))
				    value = (long?) backupAttributeCollection["versionnumber"];
			    return value;
			}
			set
			{
				OnPropertyChanging("VersionNumber");
					SetAttributeValue("versionnumber", value);
				OnPropertyChanged("VersionNumber");
			}
		}

		#endregion

		#region Relationships

		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrencerule_ldv_recurrenceexgroup'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrencerule_ldv_recurrenceexgroup")]
		public RecurrenceRule[] RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRule>("ldv_ldv_recurrencerule_ldv_recurrenceexgroup", null, value);
				OnPropertyChanged("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			}
		}
		
		/// <summary>
		/// N:N, 'ldv_ldv_recurrenceruleexceptiongrouping_ldv_r'
		/// </summary>
		[RelationshipSchemaName("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r")]
		public RecurrenceRuleException[] RecurrenceRuleExceptionsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r

		{
			get
			{
				var enumerable = GetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null);
				return enumerable != null ? enumerable.ToArray() : null;
			}
			set
			{
				OnPropertyChanging("RecurrenceRuleExceptionsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
				if (RelatedEntities.IsReadOnly) { throw new Exception("Relationship collection is read only. The context that loaded this entity must be used to create relationships."); }
                if (value != null)
                    value.ToList().ForEach(entity => entity.LogicalName = (string) value.First().GetType().GetField("EntityLogicalName").GetRawConstantValue());
				SetRelatedEntities<RecurrenceRuleException>("ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", null, value);
				OnPropertyChanged("RecurrenceRuleExceptionsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
			}
		}
		
		public static class RelationNames {
			public static RelationName RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup = new RelationName("RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup");
			public static RelationName RecurrenceRuleExceptionsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r = new RelationName("RecurrenceRuleExceptionsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r");
		}


		protected override IDictionary<string, object[]> RelationProperties { get {
			if (relationProperties != null) return relationProperties;
			relationProperties = new Dictionary<string, object[]>();
			relationProperties["RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup"] = new object[] { "RecurrenceRulesOfldv_ldv_recurrencerule_ldv_recurrenceexgroup", "ldv_recurrencerule", "ldv_ldv_recurrencerule_ldv_recurrenceexgrou", "ldv_recurrenceruleid", "ldv_recurrenceruleid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrencerule_ldv_recurrenceexgroup", typeof (RecurrenceRule[]) };
			relationProperties["RecurrenceRuleExceptionsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r"] = new object[] { "RecurrenceRuleExceptionsOfldv_ldv_recurrenceruleexceptiongrouping_ldv_r", "ldv_recurrenceruleexception", "ldv_ldv_recurrenceruleexceptiongrouping_ldv", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptionid", "ldv_recurrenceruleexceptiongroupingid", "ldv_recurrenceruleexceptiongroupingid", "ldv_ldv_recurrenceruleexceptiongrouping_ldv_r", typeof (RecurrenceRuleException[]) };
			return relationProperties; } }


		#endregion

		/// <summary>
		/// Constructor for populating via LINQ queries given a LINQ anonymous type
		/// <param name="anonymousType">LINQ anonymous type.</param>
		/// </summary>
		public RecurrenceRuleExceptionGrouping(object anonymousType) : 
				this()
		{
            foreach (var p in anonymousType.GetType().GetProperties())
            {
                var value = p.GetValue(anonymousType, null);
                if (p.PropertyType == typeof(System.Guid))
                {
                    // Type is Guid, must be Id
                    base.Id = (System.Guid)value;
                    Attributes["ldv_recurrenceruleexceptiongroupingid"] = base.Id;
               }
                else if (p.Name == "FormattedValues")
                {
                    // Add Support for FormattedValues
                    FormattedValues.AddRange((FormattedValueCollection)value);
                }
                else
                {
                    Attributes[p.Name.ToLower()] = value;
                }
            }
		}


		#region Label/value pairs

		#region Status

		public enum StatusEnum
		{
			[EnumMember]Active = 0,
			[EnumMember]Inactive = 1,
		}

		#endregion
	
		#region StatusReason

		public enum StatusReasonEnum
		{
			[EnumMember]Active = 1,
			[EnumMember]Inactive = 2,
		}

		#endregion
	
		#endregion


		#region Metadata


		#endregion
	}

	#endregion

	#endregion

}

